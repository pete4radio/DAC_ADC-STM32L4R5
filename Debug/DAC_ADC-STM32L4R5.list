
DAC_ADC-STM32L4R5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008528  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080086e8  080086e8  000096e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  080089f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20040068  08008a58  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040350  08008a58  0000a350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131c0  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287f  00000000  00000000  0001d258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c14  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c959  00000000  00000000  000216b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e70  00000000  00000000  0004e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113760  00000000  00000000  0005fe7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001735dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  00173620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  00178370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040068 	.word	0x20040068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080086d0 	.word	0x080086d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004006c 	.word	0x2004006c
 80001fc:	080086d0 	.word	0x080086d0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	f000 b988 	b.w	8000f04 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	468e      	mov	lr, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	4688      	mov	r8, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4617      	mov	r7, r2
 8000c20:	d962      	bls.n	8000ce8 <__udivmoddi4+0xdc>
 8000c22:	fab2 f682 	clz	r6, r2
 8000c26:	b14e      	cbz	r6, 8000c3c <__udivmoddi4+0x30>
 8000c28:	f1c6 0320 	rsb	r3, r6, #32
 8000c2c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	40b7      	lsls	r7, r6
 8000c36:	ea43 0808 	orr.w	r8, r3, r8
 8000c3a:	40b4      	lsls	r4, r6
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f fc87 	uxth.w	ip, r7
 8000c44:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c48:	0c23      	lsrs	r3, r4, #16
 8000c4a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c52:	fb01 f20c 	mul.w	r2, r1, ip
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c60:	f080 80ea 	bcs.w	8000e38 <__udivmoddi4+0x22c>
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f240 80e7 	bls.w	8000e38 <__udivmoddi4+0x22c>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	443b      	add	r3, r7
 8000c6e:	1a9a      	subs	r2, r3, r2
 8000c70:	b2a3      	uxth	r3, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c82:	459c      	cmp	ip, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x8e>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c8c:	f080 80d6 	bcs.w	8000e3c <__udivmoddi4+0x230>
 8000c90:	459c      	cmp	ip, r3
 8000c92:	f240 80d3 	bls.w	8000e3c <__udivmoddi4+0x230>
 8000c96:	443b      	add	r3, r7
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9e:	eba3 030c 	sub.w	r3, r3, ip
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40f3      	lsrs	r3, r6
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xb6>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb0>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x14c>
 8000cca:	4573      	cmp	r3, lr
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xc8>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 8105 	bhi.w	8000ede <__udivmoddi4+0x2d2>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	4690      	mov	r8, r2
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e5      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce6:	e7e2      	b.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f000 8090 	beq.w	8000e0e <__udivmoddi4+0x202>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f040 80a4 	bne.w	8000e40 <__udivmoddi4+0x234>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	0c03      	lsrs	r3, r0, #16
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	b280      	uxth	r0, r0
 8000d02:	b2bc      	uxth	r4, r7
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d0a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d12:	fb04 f20c 	mul.w	r2, r4, ip
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x11e>
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x11c>
 8000d22:	429a      	cmp	r2, r3
 8000d24:	f200 80e0 	bhi.w	8000ee8 <__udivmoddi4+0x2dc>
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d30:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d38:	fb02 f404 	mul.w	r4, r2, r4
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x144>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x142>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f200 80ca 	bhi.w	8000ee2 <__udivmoddi4+0x2d6>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	1b1b      	subs	r3, r3, r4
 8000d52:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa0e f401 	lsl.w	r4, lr, r1
 8000d68:	fa20 f306 	lsr.w	r3, r0, r6
 8000d6c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d70:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7a:	fa1f fc87 	uxth.w	ip, r7
 8000d7e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d82:	0c1c      	lsrs	r4, r3, #16
 8000d84:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d8c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1a0>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d9e:	f080 809c 	bcs.w	8000eda <__udivmoddi4+0x2ce>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	f240 8099 	bls.w	8000eda <__udivmoddi4+0x2ce>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	eba4 040e 	sub.w	r4, r4, lr
 8000db0:	fa1f fe83 	uxth.w	lr, r3
 8000db4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dbc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dc0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1ce>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dce:	f080 8082 	bcs.w	8000ed6 <__udivmoddi4+0x2ca>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d97f      	bls.n	8000ed6 <__udivmoddi4+0x2ca>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dde:	eba4 040c 	sub.w	r4, r4, ip
 8000de2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de6:	4564      	cmp	r4, ip
 8000de8:	4673      	mov	r3, lr
 8000dea:	46e1      	mov	r9, ip
 8000dec:	d362      	bcc.n	8000eb4 <__udivmoddi4+0x2a8>
 8000dee:	d05f      	beq.n	8000eb0 <__udivmoddi4+0x2a4>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x1fe>
 8000df2:	ebb8 0203 	subs.w	r2, r8, r3
 8000df6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	fa22 f301 	lsr.w	r3, r2, r1
 8000e02:	431e      	orrs	r6, r3
 8000e04:	40cc      	lsrs	r4, r1
 8000e06:	e9c5 6400 	strd	r6, r4, [r5]
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e74f      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e0e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e12:	0c01      	lsrs	r1, r0, #16
 8000e14:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4638      	mov	r0, r7
 8000e22:	463c      	mov	r4, r7
 8000e24:	46b8      	mov	r8, r7
 8000e26:	46be      	mov	lr, r7
 8000e28:	2620      	movs	r6, #32
 8000e2a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2e:	eba2 0208 	sub.w	r2, r2, r8
 8000e32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e36:	e766      	b.n	8000d06 <__udivmoddi4+0xfa>
 8000e38:	4601      	mov	r1, r0
 8000e3a:	e718      	b.n	8000c6e <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e72c      	b.n	8000c9a <__udivmoddi4+0x8e>
 8000e40:	f1c6 0220 	rsb	r2, r6, #32
 8000e44:	fa2e f302 	lsr.w	r3, lr, r2
 8000e48:	40b7      	lsls	r7, r6
 8000e4a:	40b1      	lsls	r1, r6
 8000e4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	430a      	orrs	r2, r1
 8000e56:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb08 f904 	mul.w	r9, r8, r4
 8000e6a:	40b0      	lsls	r0, r6
 8000e6c:	4589      	cmp	r9, r1
 8000e6e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e72:	b280      	uxth	r0, r0
 8000e74:	d93e      	bls.n	8000ef4 <__udivmoddi4+0x2e8>
 8000e76:	1879      	adds	r1, r7, r1
 8000e78:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e7c:	d201      	bcs.n	8000e82 <__udivmoddi4+0x276>
 8000e7e:	4589      	cmp	r9, r1
 8000e80:	d81f      	bhi.n	8000ec2 <__udivmoddi4+0x2b6>
 8000e82:	eba1 0109 	sub.w	r1, r1, r9
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fb09 f804 	mul.w	r8, r9, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	b292      	uxth	r2, r2
 8000e94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e98:	4542      	cmp	r2, r8
 8000e9a:	d229      	bcs.n	8000ef0 <__udivmoddi4+0x2e4>
 8000e9c:	18ba      	adds	r2, r7, r2
 8000e9e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ea2:	d2c4      	bcs.n	8000e2e <__udivmoddi4+0x222>
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d2c2      	bcs.n	8000e2e <__udivmoddi4+0x222>
 8000ea8:	f1a9 0102 	sub.w	r1, r9, #2
 8000eac:	443a      	add	r2, r7
 8000eae:	e7be      	b.n	8000e2e <__udivmoddi4+0x222>
 8000eb0:	45f0      	cmp	r8, lr
 8000eb2:	d29d      	bcs.n	8000df0 <__udivmoddi4+0x1e4>
 8000eb4:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	46e1      	mov	r9, ip
 8000ec0:	e796      	b.n	8000df0 <__udivmoddi4+0x1e4>
 8000ec2:	eba7 0909 	sub.w	r9, r7, r9
 8000ec6:	4449      	add	r1, r9
 8000ec8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ecc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed0:	fb09 f804 	mul.w	r8, r9, r4
 8000ed4:	e7db      	b.n	8000e8e <__udivmoddi4+0x282>
 8000ed6:	4673      	mov	r3, lr
 8000ed8:	e77f      	b.n	8000dda <__udivmoddi4+0x1ce>
 8000eda:	4650      	mov	r0, sl
 8000edc:	e766      	b.n	8000dac <__udivmoddi4+0x1a0>
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e6fd      	b.n	8000cde <__udivmoddi4+0xd2>
 8000ee2:	443b      	add	r3, r7
 8000ee4:	3a02      	subs	r2, #2
 8000ee6:	e733      	b.n	8000d50 <__udivmoddi4+0x144>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	443b      	add	r3, r7
 8000eee:	e71c      	b.n	8000d2a <__udivmoddi4+0x11e>
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x222>
 8000ef4:	eba1 0109 	sub.w	r1, r1, r9
 8000ef8:	46c4      	mov	ip, r8
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	e7c4      	b.n	8000e8e <__udivmoddi4+0x282>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
	{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 10);
 8000f10:	1d39      	adds	r1, r7, #4
 8000f12:	230a      	movs	r3, #10
 8000f14:	2201      	movs	r2, #1
 8000f16:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <__io_putchar+0x20>)
 8000f18:	f004 fdde 	bl	8005ad8 <HAL_UART_Transmit>
//	HAL_Delay(5);		// Slow Printing
	return ch;
 8000f1c:	687b      	ldr	r3, [r7, #4]
	}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20040160 	.word	0x20040160
 8000f2c:	00000000 	.word	0x00000000

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fed9 	bl	8001cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f8b2 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 fa04 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f44:	f000 f9d8 	bl	80012f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f48:	f000 f8f2 	bl	8001130 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f4c:	f000 f954 	bl	80011f8 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000f50:	f000 f986 	bl	8001260 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // https://wiki.st.com/stm32mcu/wiki/Getting_started_with_ADC#Configure_ADC
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000f54:	2110      	movs	r1, #16
 8000f56:	484c      	ldr	r0, [pc, #304]	@ (8001088 <main+0x158>)
 8000f58:	f002 fae3 	bl	8003522 <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f5c:	217f      	movs	r1, #127	@ 0x7f
 8000f5e:	484b      	ldr	r0, [pc, #300]	@ (800108c <main+0x15c>)
 8000f60:	f002 f94c 	bl	80031fc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	494a      	ldr	r1, [pc, #296]	@ (8001090 <main+0x160>)
 8000f68:	4848      	ldr	r0, [pc, #288]	@ (800108c <main+0x15c>)
 8000f6a:	f001 fb03 	bl	8002574 <HAL_ADC_Start_DMA>

// Create a uint16_t array to hold the sin wave, which has 380 uint16_t samples
//  Approximately 100 kHz DAC output capability, and 262 Hz output frequency = 380 samples
  uint16_t cos_wave[380];
// Load the array with the sin wave values ranging from 0 to 4095 (12-bit)
  for(int i=0; i<380; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8000f74:	e04e      	b.n	8001014 <main+0xe4>
      cos_wave[i] = (uint16_t)(2047.5 + 2047.5 * cos(2 * 3.14159 * i / 380));
 8000f76:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 8000f7a:	f7ff fae3 	bl	8000544 <__aeabi_i2d>
 8000f7e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001070 <main+0x140>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fb48 	bl	8000618 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	a339      	add	r3, pc, #228	@ (adr r3, 8001078 <main+0x148>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fc69 	bl	800086c <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	f006 fb6d 	bl	8007688 <cos>
 8000fae:	ec51 0b10 	vmov	r0, r1, d0
 8000fb2:	a333      	add	r3, pc, #204	@ (adr r3, 8001080 <main+0x150>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fb2e 	bl	8000618 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001080 <main+0x150>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff f96f 	bl	80002ac <__adddf3>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fde1 	bl	8000b9c <__aeabi_d2uiz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000fe2:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8000fe6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8000fea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      printf("i, t, v: %d, %" PRIu16 "\r\n", i, cos_wave[i]);
 8000fee:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000ff2:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8000ff6:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8000ffa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <main+0x164>)
 8001006:	f005 fcd5 	bl	80069b4 <iprintf>
  for(int i=0; i<380; i++) {
 800100a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800100e:	3301      	adds	r3, #1
 8001010:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8001014:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001018:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 800101c:	dbab      	blt.n	8000f76 <main+0x46>
  while (1)
  	{
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  	  printf("Hello DAC-ADC World! ");
 800101e:	481e      	ldr	r0, [pc, #120]	@ (8001098 <main+0x168>)
 8001020:	f005 fcc8 	bl	80069b4 <iprintf>
	  	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <main+0x16c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	2110      	movs	r1, #16
 800102c:	4816      	ldr	r0, [pc, #88]	@ (8001088 <main+0x158>)
 800102e:	f002 faca 	bl	80035c6 <HAL_DAC_SetValue>
	  	  value_dac++;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <main+0x16c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a18      	ldr	r2, [pc, #96]	@ (800109c <main+0x16c>)
 800103a:	6013      	str	r3, [r2, #0]
	  	  if(value_dac>4095) {
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <main+0x16c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001044:	d302      	bcc.n	800104c <main+0x11c>
	  	    value_dac=0;
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <main+0x16c>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	  	  	}
	  	  HAL_ADC_Start(&hadc1);
 800104c:	480f      	ldr	r0, [pc, #60]	@ (800108c <main+0x15c>)
 800104e:	f001 fa2d 	bl	80024ac <HAL_ADC_Start>
	  	  HAL_Delay(10);
 8001052:	200a      	movs	r0, #10
 8001054:	f000 fec0 	bl	8001dd8 <HAL_Delay>
	 //I google-searched "printf how to print uint32_t?"
	  	  printf("DAC1 OUT2 PA5 set to uint32_t: %" PRIu32 " and ADC1 IN6 PA1 reads uint32_t: %" PRIu32 "\n\r", value_dac, value_adc);
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <main+0x16c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <main+0x160>)
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <main+0x170>)
 8001064:	f005 fca6 	bl	80069b4 <iprintf>
	  	  printf("Hello DAC-ADC World! ");
 8001068:	e7d9      	b.n	800101e <main+0xee>
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	f01b866e 	.word	0xf01b866e
 8001074:	401921f9 	.word	0x401921f9
 8001078:	00000000 	.word	0x00000000
 800107c:	4077c000 	.word	0x4077c000
 8001080:	00000000 	.word	0x00000000
 8001084:	409ffe00 	.word	0x409ffe00
 8001088:	2004014c 	.word	0x2004014c
 800108c:	20040084 	.word	0x20040084
 8001090:	200401f4 	.word	0x200401f4
 8001094:	080086e8 	.word	0x080086e8
 8001098:	080086fc 	.word	0x080086fc
 800109c:	200401f8 	.word	0x200401f8
 80010a0:	08008714 	.word	0x08008714

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b096      	sub	sp, #88	@ 0x58
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2244      	movs	r2, #68	@ 0x44
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fc90 	bl	80069d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ca:	f003 f811 	bl	80040f0 <HAL_PWREx_ControlVoltageScaling>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010d4:	f000 fb58 	bl	8001788 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010d8:	2310      	movs	r3, #16
 80010da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010e4:	2360      	movs	r3, #96	@ 0x60
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 f8b1 	bl	8004258 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010fc:	f000 fb44 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fcb7 	bl	8004a8c <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001124:	f000 fb30 	bl	8001788 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3758      	adds	r7, #88	@ 0x58
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001146:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001148:	4a29      	ldr	r2, [pc, #164]	@ (80011f0 <MX_ADC1_Init+0xc0>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800114e:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8001152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001168:	2204      	movs	r2, #4
 800116a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001174:	2201      	movs	r2, #1
 8001176:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800117a:	2201      	movs	r2, #1
 800117c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_ADC1_Init+0xbc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_ADC1_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_ADC1_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a8:	4810      	ldr	r0, [pc, #64]	@ (80011ec <MX_ADC1_Init+0xbc>)
 80011aa:	f001 f839 	bl	8002220 <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80011b4:	f000 fae8 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_ADC1_Init+0xc4>)
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011bc:	2306      	movs	r3, #6
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011c0:	2305      	movs	r3, #5
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c4:	237f      	movs	r3, #127	@ 0x7f
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c8:	2304      	movs	r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_ADC1_Init+0xbc>)
 80011d6:	f001 fa6f 	bl	80026b8 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011e0:	f000 fad2 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20040084 	.word	0x20040084
 80011f0:	50040000 	.word	0x50040000
 80011f4:	19200040 	.word	0x19200040

080011f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011fe:	463b      	mov	r3, r7
 8001200:	2228      	movs	r2, #40	@ 0x28
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fbe7 	bl	80069d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_DAC1_Init+0x60>)
 800120c:	4a13      	ldr	r2, [pc, #76]	@ (800125c <MX_DAC1_Init+0x64>)
 800120e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001210:	4811      	ldr	r0, [pc, #68]	@ (8001258 <MX_DAC1_Init+0x60>)
 8001212:	f002 f964 	bl	80034de <HAL_DAC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800121c:	f000 fab4 	bl	8001788 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2210      	movs	r2, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <MX_DAC1_Init+0x60>)
 8001240:	f002 f9e6 	bl	8003610 <HAL_DAC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800124a:	f000 fa9d 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2004014c 	.word	0x2004014c
 800125c:	40007400 	.word	0x40007400

08001260 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	@ (80012f4 <MX_LPUART1_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 80012aa:	f004 fbc5 	bl	8005a38 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 fa68 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 80012bc:	f005 f9ee 	bl	800669c <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f000 fa5f 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 80012ce:	f005 fa23 	bl	8006718 <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 fa56 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_LPUART1_UART_Init+0x90>)
 80012de:	f005 f9a4 	bl	800662a <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 fa4e 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20040160 	.word	0x20040160
 80012f4:	40008000 	.word	0x40008000

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_DMA_Init+0x50>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	4a11      	ldr	r2, [pc, #68]	@ (8001348 <MX_DMA_Init+0x50>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6493      	str	r3, [r2, #72]	@ 0x48
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_DMA_Init+0x50>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_DMA_Init+0x50>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <MX_DMA_Init+0x50>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6493      	str	r3, [r2, #72]	@ 0x48
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_DMA_Init+0x50>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200b      	movs	r0, #11
 8001334:	f002 f89d 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001338:	200b      	movs	r0, #11
 800133a:	f002 f8b6 	bl	80034aa <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	4bb1      	ldr	r3, [pc, #708]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4ab0      	ldr	r2, [pc, #704]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4bae      	ldr	r3, [pc, #696]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4bab      	ldr	r3, [pc, #684]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4aaa      	ldr	r2, [pc, #680]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4ba8      	ldr	r3, [pc, #672]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001392:	4ba5      	ldr	r3, [pc, #660]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4aa4      	ldr	r2, [pc, #656]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4ba2      	ldr	r3, [pc, #648]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a9e      	ldr	r2, [pc, #632]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b99      	ldr	r3, [pc, #612]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a98      	ldr	r2, [pc, #608]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b96      	ldr	r3, [pc, #600]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b93      	ldr	r3, [pc, #588]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a92      	ldr	r2, [pc, #584]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b90      	ldr	r3, [pc, #576]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a8c      	ldr	r2, [pc, #560]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b8a      	ldr	r3, [pc, #552]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800140a:	4b87      	ldr	r3, [pc, #540]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a86      	ldr	r2, [pc, #536]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b84      	ldr	r3, [pc, #528]	@ (8001628 <MX_GPIO_Init+0x2dc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001422:	f002 ff09 	bl	8004238 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001426:	230c      	movs	r3, #12
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001436:	230d      	movs	r3, #13
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	487a      	ldr	r0, [pc, #488]	@ (800162c <MX_GPIO_Init+0x2e0>)
 8001442:	f002 fca3 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001446:	2307      	movs	r3, #7
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144a:	2312      	movs	r3, #18
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001456:	2304      	movs	r3, #4
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4873      	ldr	r0, [pc, #460]	@ (8001630 <MX_GPIO_Init+0x2e4>)
 8001462:	f002 fc93 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001476:	230d      	movs	r3, #13
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	486b      	ldr	r0, [pc, #428]	@ (8001630 <MX_GPIO_Init+0x2e4>)
 8001482:	f002 fc83 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001496:	2301      	movs	r3, #1
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f002 fc72 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23d0      	movs	r3, #208	@ 0xd0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b8:	2305      	movs	r3, #5
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f002 fc61 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014da:	2302      	movs	r3, #2
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4853      	ldr	r0, [pc, #332]	@ (8001634 <MX_GPIO_Init+0x2e8>)
 80014e6:	f002 fc51 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80014ea:	2344      	movs	r3, #68	@ 0x44
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	484d      	ldr	r0, [pc, #308]	@ (8001634 <MX_GPIO_Init+0x2e8>)
 80014fe:	f002 fc45 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001502:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001514:	2301      	movs	r3, #1
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4843      	ldr	r0, [pc, #268]	@ (800162c <MX_GPIO_Init+0x2e0>)
 8001520:	f002 fc34 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001524:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001536:	2303      	movs	r3, #3
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	483a      	ldr	r0, [pc, #232]	@ (800162c <MX_GPIO_Init+0x2e0>)
 8001542:	f002 fc23 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001558:	2301      	movs	r3, #1
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4834      	ldr	r0, [pc, #208]	@ (8001634 <MX_GPIO_Init+0x2e8>)
 8001564:	f002 fc12 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001568:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800157a:	230d      	movs	r3, #13
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	482b      	ldr	r0, [pc, #172]	@ (8001634 <MX_GPIO_Init+0x2e8>)
 8001586:	f002 fc01 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800158a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800159c:	230e      	movs	r3, #14
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4823      	ldr	r0, [pc, #140]	@ (8001634 <MX_GPIO_Init+0x2e8>)
 80015a8:	f002 fbf0 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015be:	2307      	movs	r3, #7
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	481b      	ldr	r0, [pc, #108]	@ (8001638 <MX_GPIO_Init+0x2ec>)
 80015ca:	f002 fbdf 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e0:	2302      	movs	r3, #2
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	@ (8001638 <MX_GPIO_Init+0x2ec>)
 80015ec:	f002 fbce 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001600:	230d      	movs	r3, #13
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_GPIO_Init+0x2f0>)
 800160c:	f002 fbbe 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001620:	2302      	movs	r3, #2
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
 8001624:	e00c      	b.n	8001640 <MX_GPIO_Init+0x2f4>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48000400 	.word	0x48000400
 8001638:	48000c00 	.word	0x48000c00
 800163c:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	484c      	ldr	r0, [pc, #304]	@ (8001778 <MX_GPIO_Init+0x42c>)
 8001648:	f002 fba0 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800164c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800165e:	230c      	movs	r3, #12
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4843      	ldr	r0, [pc, #268]	@ (8001778 <MX_GPIO_Init+0x42c>)
 800166a:	f002 fb8f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800166e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001680:	230a      	movs	r3, #10
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168e:	f002 fb7d 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016aa:	f002 fb6f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016be:	2309      	movs	r3, #9
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	482c      	ldr	r0, [pc, #176]	@ (800177c <MX_GPIO_Init+0x430>)
 80016ca:	f002 fb5f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ce:	2304      	movs	r3, #4
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016de:	230c      	movs	r3, #12
 80016e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4824      	ldr	r0, [pc, #144]	@ (800177c <MX_GPIO_Init+0x430>)
 80016ea:	f002 fb4f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016ee:	2378      	movs	r3, #120	@ 0x78
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	481c      	ldr	r0, [pc, #112]	@ (800177c <MX_GPIO_Init+0x430>)
 800170a:	f002 fb3f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800170e:	2338      	movs	r3, #56	@ 0x38
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800171e:	2306      	movs	r3, #6
 8001720:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4815      	ldr	r0, [pc, #84]	@ (8001780 <MX_GPIO_Init+0x434>)
 800172a:	f002 fb2f 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001740:	2304      	movs	r3, #4
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <MX_GPIO_Init+0x434>)
 800174c:	f002 fb1e 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001760:	2302      	movs	r3, #2
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_GPIO_Init+0x438>)
 800176c:	f002 fb0e 	bl	8003d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	@ 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	48000800 	.word	0x48000800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48000400 	.word	0x48000400
 8001784:	48001000 	.word	0x48001000

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <Error_Handler+0x8>

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_MspInit+0x44>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <HAL_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_MspInit+0x44>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_MspInit+0x44>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x44>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0b0      	sub	sp, #192	@ 0xc0
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	2294      	movs	r2, #148	@ 0x94
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 f8eb 	bl	80069d8 <memset>
  if(hadc->Instance==ADC1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_ADC_MspInit+0x18c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	f040 80a9 	bne.w	8001960 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800180e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001812:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001814:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001820:	2301      	movs	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fbe2 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800184a:	f7ff ff9d 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a46      	ldr	r2, [pc, #280]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001854:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b44      	ldr	r3, [pc, #272]	@ (800196c <HAL_ADC_MspInit+0x190>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a40      	ldr	r2, [pc, #256]	@ (800196c <HAL_ADC_MspInit+0x190>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	4a3a      	ldr	r2, [pc, #232]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <HAL_ADC_MspInit+0x190>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	4b35      	ldr	r3, [pc, #212]	@ (800196c <HAL_ADC_MspInit+0x190>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	4a34      	ldr	r2, [pc, #208]	@ (800196c <HAL_ADC_MspInit+0x190>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a2:	4b32      	ldr	r3, [pc, #200]	@ (800196c <HAL_ADC_MspInit+0x190>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018ae:	233f      	movs	r3, #63	@ 0x3f
 80018b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018b4:	230b      	movs	r3, #11
 80018b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018c4:	4619      	mov	r1, r3
 80018c6:	482a      	ldr	r0, [pc, #168]	@ (8001970 <HAL_ADC_MspInit+0x194>)
 80018c8:	f002 fa60 	bl	8003d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80018cc:	230a      	movs	r3, #10
 80018ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018d2:	230b      	movs	r3, #11
 80018d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e8:	f002 fa50 	bl	8003d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018f2:	230b      	movs	r3, #11
 80018f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001902:	4619      	mov	r1, r3
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <HAL_ADC_MspInit+0x198>)
 8001906:	f002 fa41 	bl	8003d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 800190c:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_ADC_MspInit+0x1a0>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001912:	2205      	movs	r2, #5
 8001914:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 800192a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001932:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001936:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 800193a:	2220      	movs	r2, #32
 800193c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001946:	f001 ffaf 	bl	80038a8 <HAL_DMA_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8001950:	f7ff ff1a 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 8001958:	651a      	str	r2, [r3, #80]	@ 0x50
 800195a:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_ADC_MspInit+0x19c>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001960:	bf00      	nop
 8001962:	37c0      	adds	r7, #192	@ 0xc0
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	50040000 	.word	0x50040000
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	48000400 	.word	0x48000400
 8001978:	200400ec 	.word	0x200400ec
 800197c:	40020008 	.word	0x40020008

08001980 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_DAC_MspInit+0x74>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d124      	bne.n	80019ec <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_DAC_MspInit+0x78>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d2:	2320      	movs	r3, #32
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d6:	2303      	movs	r3, #3
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e8:	f002 f9d0 	bl	8003d8c <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	@ 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40007400 	.word	0x40007400
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2294      	movs	r2, #148	@ 0x94
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 ffdb 	bl	80069d8 <memset>
  if(huart->Instance==LPUART1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <HAL_UART_MspInit+0xb4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d13d      	bne.n	8001aa8 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fae5 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a44:	f7ff fea0 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a64:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001a78:	f002 fbde 	bl	8004238 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a96:	2308      	movs	r3, #8
 8001a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_UART_MspInit+0xbc>)
 8001aa4:	f002 f972 	bl	8003d8c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001aa8:	bf00      	nop
 8001aaa:	37b8      	adds	r7, #184	@ 0xb8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40008000 	.word	0x40008000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48001800 	.word	0x48001800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b12:	f000 f941 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA1_Channel1_IRQHandler+0x10>)
 8001b22:	f001 ffe4 	bl	8003aee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200400ec 	.word	0x200400ec

08001b30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e00a      	b.n	8001b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b42:	f3af 8000 	nop.w
 8001b46:	4601      	mov	r1, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf0      	blt.n	8001b42 <_read+0x12>
  }

  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f9bf 	bl	8000f08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf1      	blt.n	8001b7c <_write+0x12>
  }
  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f004 fed4 	bl	80069e8 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200a0000 	.word	0x200a0000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200401fc 	.word	0x200401fc
 8001c74:	20040350 	.word	0x20040350

08001c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f004 fe93 	bl	80069f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff f92f 	bl	8000f30 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001cd8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001cdc:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 8001ce0:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 8001ce4:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 8001ce8:	20040350 	.word	0x20040350

08001cec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_IRQHandler>

08001cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f001 fbaf 	bl	800345c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f000 f80e 	bl	8001d20 <HAL_InitTick>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	e001      	b.n	8001d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d10:	f7ff fd40 	bl	8001794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <HAL_InitTick+0x6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <HAL_InitTick+0x70>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_InitTick+0x6c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fbbb 	bl	80034c6 <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d809      	bhi.n	8001d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d64:	f001 fb85 	bl	8003472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d68:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <HAL_InitTick+0x74>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e007      	b.n	8001d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e004      	b.n	8001d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e001      	b.n	8001d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20040008 	.word	0x20040008
 8001d90:	20040000 	.word	0x20040000
 8001d94:	20040004 	.word	0x20040004

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20040008 	.word	0x20040008
 8001dbc:	20040200 	.word	0x20040200

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20040200 	.word	0x20040200

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20040008 	.word	0x20040008

08001e20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3360      	adds	r3, #96	@ 0x60
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <LL_ADC_SetOffset+0x44>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	03fff000 	.word	0x03fff000

08001ed0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3360      	adds	r3, #96	@ 0x60
 8001ede:	461a      	mov	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3360      	adds	r3, #96	@ 0x60
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	615a      	str	r2, [r3, #20]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3330      	adds	r3, #48	@ 0x30
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	211f      	movs	r1, #31
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 011f 	and.w	r1, r3, #31
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3314      	adds	r3, #20
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0e5b      	lsrs	r3, r3, #25
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2107      	movs	r1, #7
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0d1b      	lsrs	r3, r3, #20
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	431a      	orrs	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0318 	and.w	r3, r3, #24
 800204e:	4908      	ldr	r1, [pc, #32]	@ (8002070 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002050:	40d9      	lsrs	r1, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	400b      	ands	r3, r1
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	431a      	orrs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	0007ffff 	.word	0x0007ffff

08002074 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6093      	str	r3, [r2, #8]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80020d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020fc:	d101      	bne.n	8002102 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002148:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <LL_ADC_IsEnabled+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_IsEnabled+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d101      	bne.n	800219e <LL_ADC_IsDisableOngoing+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsDisableOngoing+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c0:	f043 0204 	orr.w	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d101      	bne.n	80021ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b08      	cmp	r3, #8
 800220c:	d101      	bne.n	8002212 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e129      	b.n	800248e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fac7 	bl	80017dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff19 	bl	8002098 <LL_ADC_IsDeepPowerDownEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff feff 	bl	8002074 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff34 	bl	80020e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff18 	bl	80020c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002290:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <HAL_ADC_Init+0x278>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	4a81      	ldr	r2, [pc, #516]	@ (800249c <HAL_ADC_Init+0x27c>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a4:	e002      	b.n	80022ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff16 	bl	80020e8 <LL_ADC_IsInternalRegulatorEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff76 	bl	80021d4 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 80c2 	bne.w	800247c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80be 	bne.w	800247c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff23 	bl	8002160 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10b      	bne.n	8002338 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002320:	485f      	ldr	r0, [pc, #380]	@ (80024a0 <HAL_ADC_Init+0x280>)
 8002322:	f7ff ff1d 	bl	8002160 <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4619      	mov	r1, r3
 8002332:	485c      	ldr	r0, [pc, #368]	@ (80024a4 <HAL_ADC_Init+0x284>)
 8002334:	f7ff fd74 	bl	8001e20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e5b      	ldrb	r3, [r3, #25]
 800233c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002342:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002348:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800234e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002356:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d106      	bne.n	8002374 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	3b01      	subs	r3, #1
 800236c:	045b      	lsls	r3, r3, #17
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <HAL_ADC_Init+0x288>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff26 	bl	80021fa <LL_ADC_INJ_IsConversionOngoing>
 80023ae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d140      	bne.n	8002438 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13d      	bne.n	8002438 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e1b      	ldrb	r3, [r3, #24]
 80023c4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023de:	f023 0306 	bic.w	r3, r3, #6
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	430b      	orrs	r3, r1
 80023ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d118      	bne.n	8002428 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002418:	430a      	orrs	r2, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	e007      	b.n	8002438 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10c      	bne.n	800245a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f023 010f 	bic.w	r1, r3, #15
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
 8002458:	e007      	b.n	800246a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 020f 	bic.w	r2, r2, #15
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	659a      	str	r2, [r3, #88]	@ 0x58
 800247a:	e007      	b.n	800248c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	f043 0210 	orr.w	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800248c:	7ffb      	ldrb	r3, [r7, #31]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20040000 	.word	0x20040000
 800249c:	053e2d63 	.word	0x053e2d63
 80024a0:	50040000 	.word	0x50040000
 80024a4:	50040300 	.word	0x50040300
 80024a8:	fff0c007 	.word	0xfff0c007

080024ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fe8b 	bl	80021d4 <LL_ADC_REG_IsConversionOngoing>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d14f      	bne.n	8002564 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Start+0x26>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e04b      	b.n	800256a <HAL_ADC_Start+0xbe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fce8 	bl	8002eb0 <ADC_Enable>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d137      	bne.n	800255a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250a:	d106      	bne.n	800251a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f023 0206 	bic.w	r2, r3, #6
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002518:	e002      	b.n	8002520 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	221c      	movs	r2, #28
 8002526:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002546:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fe2a 	bl	80021ac <LL_ADC_REG_StartConversion>
 8002558:	e006      	b.n	8002568 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002562:	e001      	b.n	8002568 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fe25 	bl	80021d4 <LL_ADC_REG_IsConversionOngoing>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d167      	bne.n	8002660 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_ADC_Start_DMA+0x2a>
 800259a:	2302      	movs	r3, #2
 800259c:	e063      	b.n	8002666 <HAL_ADC_Start_DMA+0xf2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fc82 	bl	8002eb0 <ADC_Enable>
 80025ac:	4603      	mov	r3, r0
 80025ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d14f      	bne.n	8002656 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f023 0206 	bic.w	r2, r3, #6
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025e2:	e002      	b.n	80025ea <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ee:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <HAL_ADC_Start_DMA+0xfc>)
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002674 <HAL_ADC_Start_DMA+0x100>)
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_ADC_Start_DMA+0x104>)
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	221c      	movs	r2, #28
 8002608:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0210 	orr.w	r2, r2, #16
 8002620:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3340      	adds	r3, #64	@ 0x40
 800263c:	4619      	mov	r1, r3
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f001 f9d9 	bl	80039f8 <HAL_DMA_Start_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fdac 	bl	80021ac <LL_ADC_REG_StartConversion>
 8002654:	e006      	b.n	8002664 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800265e:	e001      	b.n	8002664 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002660:	2302      	movs	r3, #2
 8002662:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	0800307b 	.word	0x0800307b
 8002674:	08003153 	.word	0x08003153
 8002678:	0800316f 	.word	0x0800316f

0800267c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0b6      	sub	sp, #216	@ 0xd8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x22>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e3d5      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x7ce>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fd74 	bl	80021d4 <LL_ADC_REG_IsConversionOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 83ba 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d824      	bhi.n	800274e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	3b02      	subs	r3, #2
 800270a:	2b03      	cmp	r3, #3
 800270c:	d81b      	bhi.n	8002746 <HAL_ADC_ConfigChannel+0x8e>
 800270e:	a201      	add	r2, pc, #4	@ (adr r2, 8002714 <HAL_ADC_ConfigChannel+0x5c>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002725 	.word	0x08002725
 8002718:	0800272d 	.word	0x0800272d
 800271c:	08002735 	.word	0x08002735
 8002720:	0800273d 	.word	0x0800273d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002724:	230c      	movs	r3, #12
 8002726:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800272a:	e010      	b.n	800274e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800272c:	2312      	movs	r3, #18
 800272e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002732:	e00c      	b.n	800274e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002734:	2318      	movs	r3, #24
 8002736:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800273a:	e008      	b.n	800274e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800273c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002746:	2306      	movs	r3, #6
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800274c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800275c:	f7ff fc0f 	bl	8001f7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fd35 	bl	80021d4 <LL_ADC_REG_IsConversionOngoing>
 800276a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fd41 	bl	80021fa <LL_ADC_INJ_IsConversionOngoing>
 8002778:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800277c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 81bf 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 81ba 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002798:	d10f      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7ff fc16 	bl	8001fd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fbbd 	bl	8001f32 <LL_ADC_SetSamplingTimeCommonConfig>
 80027b8:	e00e      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7ff fc05 	bl	8001fd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fbad 	bl	8001f32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	08db      	lsrs	r3, r3, #3
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00a      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6919      	ldr	r1, [r3, #16]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800280a:	f7ff fb3d 	bl	8001e88 <LL_ADC_SetOffset>
 800280e:	e179      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fb5a 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x184>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb4f 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	e01e      	b.n	800287a <HAL_ADC_ConfigChannel+0x1c2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb44 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800285a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800285e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800286e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x1da>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	e018      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x20c>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80028a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80028ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fb13 	bl	8001efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff faf7 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x24a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff faec 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	e01e      	b.n	8002940 <HAL_ADC_ConfigChannel+0x288>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fae1 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e004      	b.n	800293e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002934:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x2a0>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	e018      	b.n	800298a <HAL_ADC_ConfigChannel+0x2d2>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800296c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e004      	b.n	800298a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800298a:	429a      	cmp	r2, r3
 800298c:	d106      	bne.n	800299c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fab0 	bl	8001efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa94 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x310>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2102      	movs	r1, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fa89 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 021f 	and.w	r2, r3, #31
 80029c6:	e01e      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x34e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2102      	movs	r1, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fa7e 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80029e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80029ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80029fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x366>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	e014      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x390>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e004      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d106      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fa51 	bl	8001efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fa35 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x3ce>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2103      	movs	r1, #3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fa2a 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	e017      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x3fe>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fa1f 	bl	8001ed0 <LL_ADC_GetOffsetChannel>
 8002a92:	4603      	mov	r3, r0
 8002a94:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e003      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002aac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x416>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	e011      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x43a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002adc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ade:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2103      	movs	r1, #3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f9fc 	bl	8001efc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fb29 	bl	8002160 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 813f 	bne.w	8002d94 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7ff fa82 	bl	800202c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d68 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f040 8130 	bne.w	8002d94 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x4a4>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	bf94      	ite	ls
 8002b54:	2301      	movls	r3, #1
 8002b56:	2300      	movhi	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e019      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x4d8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e003      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	bf94      	ite	ls
 8002b8a:	2301      	movls	r3, #1
 8002b8c:	2300      	movhi	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d079      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x4f8>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	069b      	lsls	r3, r3, #26
 8002baa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bae:	e015      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x524>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	069b      	lsls	r3, r3, #26
 8002bd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x544>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	e017      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x574>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	ea42 0103 	orr.w	r1, r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x59a>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	051b      	lsls	r3, r3, #20
 8002c50:	e018      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x5cc>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c84:	430b      	orrs	r3, r1
 8002c86:	e080      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x5ec>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	069b      	lsls	r3, r3, #26
 8002c9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca2:	e015      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x618>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x638>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	e017      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x668>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	61bb      	str	r3, [r7, #24]
  return result;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	ea42 0103 	orr.w	r1, r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x694>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	051b      	lsls	r3, r3, #20
 8002d46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	e01d      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x6d0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	60fb      	str	r3, [r7, #12]
  return result;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e005      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x6bc>
 8002d68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b1e      	subs	r3, #30
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7ff f921 	bl	8001fd6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b3d      	ldr	r3, [pc, #244]	@ (8002e90 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d06c      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da0:	483c      	ldr	r0, [pc, #240]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002da2:	f7ff f863 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 8002da6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3a      	ldr	r2, [pc, #232]	@ (8002e98 <HAL_ADC_ConfigChannel+0x7e0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d127      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d121      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	@ (8002e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d157      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	482f      	ldr	r0, [pc, #188]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dd6:	f7ff f836 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	4a30      	ldr	r2, [pc, #192]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002df4:	e002      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f9      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e02:	e03a      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a27      	ldr	r2, [pc, #156]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d113      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d12a      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e30:	f7ff f809 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e34:	e021      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_ADC_ConfigChannel+0x7f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d11c      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e62:	f7fe fff0 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
 8002e66:	e008      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	37d8      	adds	r7, #216	@ 0xd8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80080000 	.word	0x80080000
 8002e94:	50040300 	.word	0x50040300
 8002e98:	c7520000 	.word	0xc7520000
 8002e9c:	50040000 	.word	0x50040000
 8002ea0:	20040000 	.word	0x20040000
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	80000001 	.word	0x80000001

08002eb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f94d 	bl	8002160 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d169      	bne.n	8002fa0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <ADC_Enable+0xfc>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f043 0210 	orr.w	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e055      	b.n	8002fa2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f908 	bl	8002110 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f00:	482b      	ldr	r0, [pc, #172]	@ (8002fb0 <ADC_Enable+0x100>)
 8002f02:	f7fe ffb3 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 8002f06:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <ADC_Enable+0x104>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <ADC_Enable+0x108>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f38:	f7fe ff42 	bl	8001dc0 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3e:	e028      	b.n	8002f92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f90b 	bl	8002160 <LL_ADC_IsEnabled>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f8db 	bl	8002110 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f5a:	f7fe ff31 	bl	8001dc0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d914      	bls.n	8002f92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d00d      	beq.n	8002f92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e007      	b.n	8002fa2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d1cf      	bne.n	8002f40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	8000003f 	.word	0x8000003f
 8002fb0:	50040300 	.word	0x50040300
 8002fb4:	20040000 	.word	0x20040000
 8002fb8:	053e2d63 	.word	0x053e2d63

08002fbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f8dc 	bl	8002186 <LL_ADC_IsDisableOngoing>
 8002fce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f8c3 	bl	8002160 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d047      	beq.n	8003070 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d144      	bne.n	8003070 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030d 	and.w	r3, r3, #13
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10c      	bne.n	800300e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f89d 	bl	8002138 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2203      	movs	r2, #3
 8003004:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003006:	f7fe fedb 	bl	8001dc0 <HAL_GetTick>
 800300a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300c:	e029      	b.n	8003062 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e023      	b.n	8003072 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302a:	f7fe fec9 	bl	8001dc0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d914      	bls.n	8003062 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1dc      	bne.n	800302a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14b      	bne.n	800312c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe ff50 	bl	8001f58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d032      	beq.n	8003124 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d12b      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11f      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80030f0:	e018      	b.n	8003124 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff faa9 	bl	800267c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800312a:	e00e      	b.n	800314a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fab3 	bl	80026a4 <HAL_ADC_ErrorCallback>
}
 800313e:	e004      	b.n	800314a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff fa95 	bl	8002690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fa85 	bl	80026a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <LL_ADC_StartCalibration>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80031b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031e8:	d101      	bne.n	80031ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADCEx_Calibration_Start+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e04d      	b.n	80032b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fecb 	bl	8002fbc <ADC_Disable>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d136      	bne.n	800329e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003238:	f023 0302 	bic.w	r3, r3, #2
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ffa9 	bl	80031a2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003250:	e014      	b.n	800327c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3301      	adds	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800325e:	d30d      	bcc.n	800327c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	f023 0312 	bic.w	r3, r3, #18
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e01b      	b.n	80032b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ffa7 	bl	80031d4 <LL_ADC_IsCalibrationOnGoing>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e2      	bne.n	8003252 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	f023 0303 	bic.w	r3, r3, #3
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	659a      	str	r2, [r3, #88]	@ 0x58
 800329c:	e005      	b.n	80032aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0b      	blt.n	800334a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4907      	ldr	r1, [pc, #28]	@ (8003358 <__NVIC_EnableIRQ+0x38>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	@ (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	@ (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	@ 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003428:	d301      	bcc.n	800342e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342a:	2301      	movs	r3, #1
 800342c:	e00f      	b.n	800344e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <SysTick_Config+0x40>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003436:	210f      	movs	r1, #15
 8003438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800343c:	f7ff ff8e 	bl	800335c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <SysTick_Config+0x40>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003446:	4b04      	ldr	r3, [pc, #16]	@ (8003458 <SysTick_Config+0x40>)
 8003448:	2207      	movs	r2, #7
 800344a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000e010 	.word	0xe000e010

0800345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff29 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003484:	f7ff ff3e 	bl	8003304 <__NVIC_GetPriorityGrouping>
 8003488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff ff8e 	bl	80033b0 <NVIC_EncodePriority>
 8003494:	4602      	mov	r2, r0
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff5d 	bl	800335c <__NVIC_SetPriority>
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff31 	bl	8003320 <__NVIC_EnableIRQ>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffa2 	bl	8003418 <SysTick_Config>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e014      	b.n	800351a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fe fa3d 	bl	8001980 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	795b      	ldrb	r3, [r3, #5]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_DAC_Start+0x16>
 8003534:	2302      	movs	r3, #2
 8003536:	e040      	b.n	80035ba <HAL_DAC_Start+0x98>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2201      	movs	r2, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800356c:	2b02      	cmp	r3, #2
 800356e:	d11d      	bne.n	80035ac <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	e014      	b.n	80035ac <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2102      	movs	r1, #2
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	429a      	cmp	r2, r3
 800359a:	d107      	bne.n	80035ac <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0202 	orr.w	r2, r2, #2
 80035aa:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3308      	adds	r3, #8
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e004      	b.n	80035fa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	3314      	adds	r3, #20
 80035f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	461a      	mov	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	795b      	ldrb	r3, [r3, #5]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_DAC_ConfigChannel+0x1c>
 8003628:	2302      	movs	r3, #2
 800362a:	e137      	b.n	800389c <HAL_DAC_ConfigChannel+0x28c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2202      	movs	r2, #2
 8003636:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b04      	cmp	r3, #4
 800363e:	f040 8081 	bne.w	8003744 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003642:	f7fe fbbd 	bl	8001dc0 <HAL_GetTick>
 8003646:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d140      	bne.n	80036d0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800364e:	e018      	b.n	8003682 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003650:	f7fe fbb6 	bl	8001dc0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d911      	bls.n	8003682 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f043 0208 	orr.w	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2203      	movs	r2, #3
 800367c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e10c      	b.n	800389c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1df      	bne.n	8003650 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003690:	2001      	movs	r0, #1
 8003692:	f7fe fba1 	bl	8001dd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	69d2      	ldr	r2, [r2, #28]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40
 80036a0:	e023      	b.n	80036ea <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036a2:	f7fe fb8d 	bl	8001dc0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d90f      	bls.n	80036d0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da0a      	bge.n	80036d0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f043 0208 	orr.w	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2203      	movs	r2, #3
 80036ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0e5      	b.n	800389c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	dbe3      	blt.n	80036a2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7fe fb7c 	bl	8001dd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	69d2      	ldr	r2, [r2, #28]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	ea02 0103 	and.w	r1, r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	21ff      	movs	r1, #255	@ 0xff
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	ea02 0103 	and.w	r1, r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11d      	bne.n	8003788 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003752:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	221f      	movs	r2, #31
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	4013      	ands	r3, r2
 8003766:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	4313      	orrs	r3, r2
 800377e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2207      	movs	r2, #7
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	400a      	ands	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	4013      	ands	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	4313      	orrs	r3, r2
 8003822:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382c:	d104      	bne.n	8003838 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e018      	b.n	800386a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e00f      	b.n	800386a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800384a:	f001 fae5 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 800384e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4a14      	ldr	r2, [pc, #80]	@ (80038a4 <HAL_DAC_ConfigChannel+0x294>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d904      	bls.n	8003862 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e003      	b.n	800386a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003868:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	22c0      	movs	r2, #192	@ 0xc0
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	04c4b400 	.word	0x04c4b400

080038a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_DMA_Init+0x138>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d80f      	bhi.n	80038e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b45      	ldr	r3, [pc, #276]	@ (80039e4 <HAL_DMA_Init+0x13c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	4a45      	ldr	r2, [pc, #276]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a42      	ldr	r2, [pc, #264]	@ (80039ec <HAL_DMA_Init+0x144>)
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038e4:	e00e      	b.n	8003904 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b40      	ldr	r3, [pc, #256]	@ (80039f0 <HAL_DMA_Init+0x148>)
 80038ee:	4413      	add	r3, r2
 80038f0:	4a3d      	ldr	r2, [pc, #244]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <HAL_DMA_Init+0x14c>)
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9b6 	bl	8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003964:	d102      	bne.n	800396c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003980:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_DMA_Init+0x104>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d80c      	bhi.n	80039ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9d6 	bl	8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e008      	b.n	80039be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40020407 	.word	0x40020407
 80039e4:	bffdfff8 	.word	0xbffdfff8
 80039e8:	cccccccd 	.word	0xcccccccd
 80039ec:	40020000 	.word	0x40020000
 80039f0:	bffdfbf8 	.word	0xbffdfbf8
 80039f4:	40020400 	.word	0x40020400

080039f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_Start_IT+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e066      	b.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d155      	bne.n	8003ad8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f8fb 	bl	8003c4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 020e 	orr.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00f      	b.n	8003a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e005      	b.n	8003ae4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f003 031c 	and.w	r3, r3, #28
 8003b0e:	2204      	movs	r2, #4
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d026      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x7a>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d021      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0204 	bic.w	r2, r2, #4
 8003b40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 021c 	and.w	r2, r3, #28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2104      	movs	r1, #4
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d071      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b66:	e06c      	b.n	8003c42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f003 031c 	and.w	r3, r3, #28
 8003b70:	2202      	movs	r2, #2
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02e      	beq.n	8003bda <HAL_DMA_IRQHandler+0xec>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d029      	beq.n	8003bda <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020a 	bic.w	r2, r2, #10
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	f003 021c 	and.w	r2, r3, #28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2102      	movs	r1, #2
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d038      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bd8:	e033      	b.n	8003c42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f003 031c 	and.w	r3, r3, #28
 8003be2:	2208      	movs	r2, #8
 8003be4:	409a      	lsls	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02a      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x156>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d025      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 020e 	bic.w	r2, r2, #14
 8003c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	f003 021c 	and.w	r2, r3, #28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
}
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c74:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f003 021c 	and.w	r2, r3, #28
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d108      	bne.n	8003cac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003caa:	e007      	b.n	8003cbc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d80a      	bhi.n	8003cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ce8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cf0:	e007      	b.n	8003d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	009a      	lsls	r2, r3, #2
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b08      	subs	r3, #8
 8003d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2201      	movs	r2, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40020407 	.word	0x40020407
 8003d38:	4002081c 	.word	0x4002081c
 8003d3c:	cccccccd 	.word	0xcccccccd
 8003d40:	40020880 	.word	0x40020880

08003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	1000823f 	.word	0x1000823f
 8003d88:	40020940 	.word	0x40020940

08003d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9a:	e166      	b.n	800406a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8158 	beq.w	8004064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d005      	beq.n	8003dcc <HAL_GPIO_Init+0x40>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d130      	bne.n	8003e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e02:	2201      	movs	r2, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0201 	and.w	r2, r3, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d017      	beq.n	8003e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d123      	bne.n	8003ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	08da      	lsrs	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3208      	adds	r2, #8
 8003eb8:	6939      	ldr	r1, [r7, #16]
 8003eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80b2 	beq.w	8004064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f00:	4b61      	ldr	r3, [pc, #388]	@ (8004088 <HAL_GPIO_Init+0x2fc>)
 8003f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f04:	4a60      	ldr	r2, [pc, #384]	@ (8004088 <HAL_GPIO_Init+0x2fc>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004088 <HAL_GPIO_Init+0x2fc>)
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f18:	4a5c      	ldr	r2, [pc, #368]	@ (800408c <HAL_GPIO_Init+0x300>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f42:	d02b      	beq.n	8003f9c <HAL_GPIO_Init+0x210>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_GPIO_Init+0x304>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d025      	beq.n	8003f98 <HAL_GPIO_Init+0x20c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a51      	ldr	r2, [pc, #324]	@ (8004094 <HAL_GPIO_Init+0x308>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01f      	beq.n	8003f94 <HAL_GPIO_Init+0x208>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a50      	ldr	r2, [pc, #320]	@ (8004098 <HAL_GPIO_Init+0x30c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d019      	beq.n	8003f90 <HAL_GPIO_Init+0x204>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800409c <HAL_GPIO_Init+0x310>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_GPIO_Init+0x200>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4e      	ldr	r2, [pc, #312]	@ (80040a0 <HAL_GPIO_Init+0x314>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00d      	beq.n	8003f88 <HAL_GPIO_Init+0x1fc>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80040a4 <HAL_GPIO_Init+0x318>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_Init+0x1f8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a4c      	ldr	r2, [pc, #304]	@ (80040a8 <HAL_GPIO_Init+0x31c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_GPIO_Init+0x1f4>
 8003f7c:	2307      	movs	r3, #7
 8003f7e:	e00e      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f80:	2308      	movs	r3, #8
 8003f82:	e00c      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f84:	2306      	movs	r3, #6
 8003f86:	e00a      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f88:	2305      	movs	r3, #5
 8003f8a:	e008      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e006      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f90:	2303      	movs	r3, #3
 8003f92:	e004      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e002      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_GPIO_Init+0x212>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	f002 0203 	and.w	r2, r2, #3
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	4093      	lsls	r3, r2
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fae:	4937      	ldr	r1, [pc, #220]	@ (800408c <HAL_GPIO_Init+0x300>)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe0:	4a32      	ldr	r2, [pc, #200]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400a:	4a28      	ldr	r2, [pc, #160]	@ (80040ac <HAL_GPIO_Init+0x320>)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004010:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004034:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800403a:	4b1c      	ldr	r3, [pc, #112]	@ (80040ac <HAL_GPIO_Init+0x320>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800405e:	4a13      	ldr	r2, [pc, #76]	@ (80040ac <HAL_GPIO_Init+0x320>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f ae91 	bne.w	8003d9c <HAL_GPIO_Init+0x10>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40021000 	.word	0x40021000
 800408c:	40010000 	.word	0x40010000
 8004090:	48000400 	.word	0x48000400
 8004094:	48000800 	.word	0x48000800
 8004098:	48000c00 	.word	0x48000c00
 800409c:	48001000 	.word	0x48001000
 80040a0:	48001400 	.word	0x48001400
 80040a4:	48001800 	.word	0x48001800
 80040a8:	48001c00 	.word	0x48001c00
 80040ac:	40010400 	.word	0x40010400

080040b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040b4:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d102      	bne.n	80040c8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80040c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040c6:	e00b      	b.n	80040e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80040c8:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d6:	d102      	bne.n	80040de <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80040d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040dc:	e000      	b.n	80040e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80040de:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40007000 	.word	0x40007000

080040f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d141      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040fe:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410a:	d131      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800410c:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004112:	4a46      	ldr	r2, [pc, #280]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	4b43      	ldr	r3, [pc, #268]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004124:	4a41      	ldr	r2, [pc, #260]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800412c:	4b40      	ldr	r3, [pc, #256]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2232      	movs	r2, #50	@ 0x32
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	4a3f      	ldr	r2, [pc, #252]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	0c9b      	lsrs	r3, r3, #18
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004142:	e002      	b.n	800414a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800414a:	4b38      	ldr	r3, [pc, #224]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d102      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f2      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800415e:	4b33      	ldr	r3, [pc, #204]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d158      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e057      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004170:	4b2e      	ldr	r3, [pc, #184]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004176:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800417c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004180:	e04d      	b.n	800421e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004188:	d141      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800418a:	4b28      	ldr	r3, [pc, #160]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d131      	bne.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004198:	4b24      	ldr	r3, [pc, #144]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800419e:	4a23      	ldr	r2, [pc, #140]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041a8:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041b0:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2232      	movs	r2, #50	@ 0x32
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ce:	e002      	b.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e2:	d102      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f2      	bne.n	80041d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ea:	4b10      	ldr	r3, [pc, #64]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f6:	d112      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e011      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004202:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800420c:	e007      	b.n	800421e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004216:	4a05      	ldr	r2, [pc, #20]	@ (800422c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800421c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40007000 	.word	0x40007000
 8004230:	20040000 	.word	0x20040000
 8004234:	431bde83 	.word	0x431bde83

08004238 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800423c:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <HAL_PWREx_EnableVddIO2+0x1c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004246:	6053      	str	r3, [r2, #4]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40007000 	.word	0x40007000

08004258 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f000 bc08 	b.w	8004a7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426c:	4b96      	ldr	r3, [pc, #600]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004276:	4b94      	ldr	r3, [pc, #592]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80e4 	beq.w	8004456 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4c>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	f040 808b 	bne.w	80043b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 8087 	bne.w	80043b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a4:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_OscConfig+0x64>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e3df      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	4b81      	ldr	r3, [pc, #516]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_RCC_OscConfig+0x7e>
 80042cc:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d4:	e005      	b.n	80042e2 <HAL_RCC_OscConfig+0x8a>
 80042d6:	4b7c      	ldr	r3, [pc, #496]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d223      	bcs.n	800432e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fdcc 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e3c0      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fa:	4b73      	ldr	r3, [pc, #460]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a72      	ldr	r2, [pc, #456]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b70      	ldr	r3, [pc, #448]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	496d      	ldr	r1, [pc, #436]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004318:	4b6b      	ldr	r3, [pc, #428]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4968      	ldr	r1, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
 800432c:	e025      	b.n	800437a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432e:	4b66      	ldr	r3, [pc, #408]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a65      	ldr	r2, [pc, #404]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4960      	ldr	r1, [pc, #384]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434c:	4b5e      	ldr	r3, [pc, #376]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	495b      	ldr	r1, [pc, #364]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fd8c 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e380      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800437a:	f000 fcc1 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	4950      	ldr	r1, [pc, #320]	@ (80044cc <HAL_RCC_OscConfig+0x274>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a4e      	ldr	r2, [pc, #312]	@ (80044d0 <HAL_RCC_OscConfig+0x278>)
 8004398:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800439a:	4b4e      	ldr	r3, [pc, #312]	@ (80044d4 <HAL_RCC_OscConfig+0x27c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fcbe 	bl	8001d20 <HAL_InitTick>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d052      	beq.n	8004454 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	e364      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d032      	beq.n	8004420 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043ba:	4b43      	ldr	r3, [pc, #268]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a42      	ldr	r2, [pc, #264]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c6:	f7fd fcfb 	bl	8001dc0 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ce:	f7fd fcf7 	bl	8001dc0 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e34d      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043e0:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ec:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043f2:	f043 0308 	orr.w	r3, r3, #8
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b33      	ldr	r3, [pc, #204]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4930      	ldr	r1, [pc, #192]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	492b      	ldr	r1, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e01a      	b.n	8004456 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004420:	4b29      	ldr	r3, [pc, #164]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800442c:	f7fd fcc8 	bl	8001dc0 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004434:	f7fd fcc4 	bl	8001dc0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e31a      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004446:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1dc>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d073      	beq.n	800454a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x21c>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d10e      	bne.n	800448c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d10b      	bne.n	800448c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d063      	beq.n	8004548 <HAL_RCC_OscConfig+0x2f0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d15f      	bne.n	8004548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e2f7      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_OscConfig+0x24c>
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a0b      	ldr	r2, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e025      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ac:	d114      	bne.n	80044d8 <HAL_RCC_OscConfig+0x280>
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a05      	ldr	r2, [pc, #20]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b03      	ldr	r3, [pc, #12]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a02      	ldr	r2, [pc, #8]	@ (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e013      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	08008760 	.word	0x08008760
 80044d0:	20040000 	.word	0x20040000
 80044d4:	20040004 	.word	0x20040004
 80044d8:	4ba0      	ldr	r3, [pc, #640]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a9f      	ldr	r2, [pc, #636]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b9d      	ldr	r3, [pc, #628]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a9c      	ldr	r2, [pc, #624]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fc62 	bl	8001dc0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd fc5e 	bl	8001dc0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e2b4      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004512:	4b92      	ldr	r3, [pc, #584]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x2a8>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fc4e 	bl	8001dc0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fc4a 	bl	8001dc0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2a0      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453a:	4b88      	ldr	r3, [pc, #544]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x2d0>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d060      	beq.n	8004618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x310>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d119      	bne.n	8004596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d116      	bne.n	8004596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	4b7c      	ldr	r3, [pc, #496]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x328>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e27d      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b76      	ldr	r3, [pc, #472]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	4973      	ldr	r1, [pc, #460]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	e040      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d023      	beq.n	80045e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459e:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd fc09 	bl	8001dc0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fd fc05 	bl	8001dc0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e25b      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c4:	4b65      	ldr	r3, [pc, #404]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b62      	ldr	r3, [pc, #392]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	495f      	ldr	r1, [pc, #380]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	e018      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b5d      	ldr	r3, [pc, #372]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5c      	ldr	r2, [pc, #368]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80045ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd fbe5 	bl	8001dc0 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd fbe1 	bl	8001dc0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e237      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d03c      	beq.n	800469e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462c:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004632:	4a4a      	ldr	r2, [pc, #296]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd fbc0 	bl	8001dc0 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004644:	f7fd fbbc 	bl	8001dc0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e212      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004656:	4b41      	ldr	r3, [pc, #260]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <HAL_RCC_OscConfig+0x3ec>
 8004664:	e01b      	b.n	800469e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004666:	4b3d      	ldr	r3, [pc, #244]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	4a3b      	ldr	r2, [pc, #236]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd fba3 	bl	8001dc0 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467e:	f7fd fb9f 	bl	8001dc0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1f5      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004690:	4b32      	ldr	r3, [pc, #200]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ef      	bne.n	800467e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a6 	beq.w	80047f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046b0:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046bc:	4b27      	ldr	r3, [pc, #156]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <HAL_RCC_OscConfig+0x508>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d118      	bne.n	8004716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCC_OscConfig+0x508>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004760 <HAL_RCC_OscConfig+0x508>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f0:	f7fd fb66 	bl	8001dc0 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd fb62 	bl	8001dc0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1b8      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_RCC_OscConfig+0x508>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d108      	bne.n	8004730 <HAL_RCC_OscConfig+0x4d8>
 800471e:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800472e:	e029      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d115      	bne.n	8004764 <HAL_RCC_OscConfig+0x50c>
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004748:	4b04      	ldr	r3, [pc, #16]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a03      	ldr	r2, [pc, #12]	@ (800475c <HAL_RCC_OscConfig+0x504>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	4b9d      	ldr	r3, [pc, #628]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a9c      	ldr	r2, [pc, #624]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004774:	4b99      	ldr	r3, [pc, #612]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a98      	ldr	r2, [pc, #608]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d016      	beq.n	80047ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd fb18 	bl	8001dc0 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd fb14 	bl	8001dc0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e168      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047aa:	4b8c      	ldr	r3, [pc, #560]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ed      	beq.n	8004794 <HAL_RCC_OscConfig+0x53c>
 80047b8:	e015      	b.n	80047e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fd fb01 	bl	8001dc0 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd fafd 	bl	8001dc0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e151      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d8:	4b80      	ldr	r3, [pc, #512]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ed      	bne.n	80047c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e6:	7ffb      	ldrb	r3, [r7, #31]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b7b      	ldr	r3, [pc, #492]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	4a7a      	ldr	r2, [pc, #488]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03c      	beq.n	800487e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800480c:	4b73      	ldr	r3, [pc, #460]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800480e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004812:	4a72      	ldr	r2, [pc, #456]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd fad0 	bl	8001dc0 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004824:	f7fd facc 	bl	8001dc0 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e122      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004836:	4b69      	ldr	r3, [pc, #420]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCC_OscConfig+0x5cc>
 8004844:	e01b      	b.n	800487e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004846:	4b65      	ldr	r3, [pc, #404]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800484c:	4a63      	ldr	r2, [pc, #396]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd fab3 	bl	8001dc0 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800485e:	f7fd faaf 	bl	8001dc0 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e105      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004870:	4b5a      	ldr	r3, [pc, #360]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ef      	bne.n	800485e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80f9 	beq.w	8004a7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	2b02      	cmp	r3, #2
 800488e:	f040 80cf 	bne.w	8004a30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004892:	4b52      	ldr	r3, [pc, #328]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d12c      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	3b01      	subs	r3, #1
 80048b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d123      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d11b      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d113      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d109      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	3b01      	subs	r3, #1
 80048fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d071      	beq.n	80049e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d068      	beq.n	80049d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004906:	4b35      	ldr	r3, [pc, #212]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004912:	4b32      	ldr	r3, [pc, #200]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0ac      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004922:	4b2e      	ldr	r3, [pc, #184]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492e:	f7fd fa47 	bl	8001dc0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd fa43 	bl	8001dc0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e099      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004954:	4b21      	ldr	r3, [pc, #132]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x788>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004964:	3a01      	subs	r2, #1
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800496e:	0212      	lsls	r2, r2, #8
 8004970:	4311      	orrs	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0552      	lsls	r2, r2, #21
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004982:	0852      	lsrs	r2, r2, #1
 8004984:	3a01      	subs	r2, #1
 8004986:	0652      	lsls	r2, r2, #25
 8004988:	4311      	orrs	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800498e:	06d2      	lsls	r2, r2, #27
 8004990:	430a      	orrs	r2, r1
 8004992:	4912      	ldr	r1, [pc, #72]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0f      	ldr	r2, [pc, #60]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b0:	f7fd fa06 	bl	8001dc0 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fd fa02 	bl	8001dc0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e058      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <HAL_RCC_OscConfig+0x784>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d6:	e050      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04f      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d144      	bne.n	8004a7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049f0:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049fc:	4b21      	ldr	r3, [pc, #132]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a20      	ldr	r2, [pc, #128]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a08:	f7fd f9da 	bl	8001dc0 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fd f9d6 	bl	8001dc0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e02c      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	4b18      	ldr	r3, [pc, #96]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x7b8>
 8004a2e:	e024      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d01f      	beq.n	8004a76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a12      	ldr	r2, [pc, #72]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fd f9bd 	bl	8001dc0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fd f9b9 	bl	8001dc0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4905      	ldr	r1, [pc, #20]	@ (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_OscConfig+0x830>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
 8004a74:	e001      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	feeefffc 	.word	0xfeeefffc

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e11d      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b90      	ldr	r3, [pc, #576]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	498b      	ldr	r1, [pc, #556]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b89      	ldr	r3, [pc, #548]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e105      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	4b81      	ldr	r3, [pc, #516]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d908      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	497b      	ldr	r1, [pc, #492]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d079      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d11e      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b16:	4b75      	ldr	r3, [pc, #468]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0dc      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b26:	f000 fa09 	bl	8004f3c <RCC_GetSysClockFreqFromPLLSource>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4a70      	ldr	r2, [pc, #448]	@ (8004cf0 <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d946      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b32:	4b6e      	ldr	r3, [pc, #440]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d140      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b46:	4a69      	ldr	r2, [pc, #420]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e035      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5c:	4b63      	ldr	r3, [pc, #396]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d115      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b9      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b74:	4b5d      	ldr	r3, [pc, #372]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0ad      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b84:	4b59      	ldr	r3, [pc, #356]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0a5      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004b94:	f000 f8b4 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a55      	ldr	r2, [pc, #340]	@ (8004cf0 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d90f      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ba0:	4b52      	ldr	r3, [pc, #328]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bac:	4b4f      	ldr	r3, [pc, #316]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 0203 	bic.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4947      	ldr	r1, [pc, #284]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fd f8f5 	bl	8001dc0 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bda:	f7fd f8f1 	bl	8001dc0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e077      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 020c 	and.w	r2, r3, #12
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d1eb      	bne.n	8004bda <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c08:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a37      	ldr	r2, [pc, #220]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d208      	bcs.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b2e      	ldr	r3, [pc, #184]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	492b      	ldr	r1, [pc, #172]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c42:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d210      	bcs.n	8004c72 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 020f 	bic.w	r2, r3, #15
 8004c58:	4923      	ldr	r1, [pc, #140]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c60:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e036      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4918      	ldr	r1, [pc, #96]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4910      	ldr	r1, [pc, #64]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb0:	f000 f826 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	490c      	ldr	r1, [pc, #48]	@ (8004cf4 <HAL_RCC_ClockConfig+0x268>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf8 <HAL_RCC_ClockConfig+0x26c>)
 8004cce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RCC_ClockConfig+0x270>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd f823 	bl	8001d20 <HAL_InitTick>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	04c4b400 	.word	0x04c4b400
 8004cf4:	08008760 	.word	0x08008760
 8004cf8:	20040000 	.word	0x20040000
 8004cfc:	20040004 	.word	0x20040004

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d18:	4b3b      	ldr	r3, [pc, #236]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x34>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d121      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11e      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d34:	4b34      	ldr	r3, [pc, #208]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d40:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d50:	4b2d      	ldr	r3, [pc, #180]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10d      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e004      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d84:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d134      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d003      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0xac>
 8004da4:	e005      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004da8:	617b      	str	r3, [r7, #20]
      break;
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dae:	617b      	str	r3, [r7, #20]
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	617b      	str	r3, [r7, #20]
      break;
 8004db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	fb03 f202 	mul.w	r2, r3, r2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dde:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0e5b      	lsrs	r3, r3, #25
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	3301      	adds	r3, #1
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df8:	69bb      	ldr	r3, [r7, #24]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3724      	adds	r7, #36	@ 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08008778 	.word	0x08008778
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20040000 	.word	0x20040000

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4904      	ldr	r1, [pc, #16]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40021000 	.word	0x40021000
 8004e58:	08008770 	.word	0x08008770

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e60:	f7ff ffda 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0adb      	lsrs	r3, r3, #11
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	08008770 	.word	0x08008770

08004e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e94:	4b27      	ldr	r3, [pc, #156]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ea0:	f7ff f906 	bl	80040b0 <HAL_PWREx_GetVoltageRange>
 8004ea4:	6178      	str	r0, [r7, #20]
 8004ea6:	e014      	b.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea8:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ec0:	f7ff f8f6 	bl	80040b0 <HAL_PWREx_GetVoltageRange>
 8004ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed8:	d10b      	bne.n	8004ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b80      	cmp	r3, #128	@ 0x80
 8004ede:	d913      	bls.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ee4:	d902      	bls.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	e00d      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eec:	2301      	movs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e00a      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef6:	d902      	bls.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ef8:	2302      	movs	r3, #2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e004      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b70      	cmp	r3, #112	@ 0x70
 8004f02:	d101      	bne.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 020f 	bic.w	r2, r3, #15
 8004f10:	4909      	ldr	r1, [pc, #36]	@ (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f18:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40022000 	.word	0x40022000

08004f3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d00b      	beq.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d825      	bhi.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d008      	beq.n	8004f70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d11f      	bne.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f64:	4b25      	ldr	r3, [pc, #148]	@ (8004ffc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f66:	613b      	str	r3, [r7, #16]
    break;
 8004f68:	e01f      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004f6a:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004f6c:	613b      	str	r3, [r7, #16]
    break;
 8004f6e:	e01c      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f70:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e005      	b.n	8004f98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004f98:	4a1a      	ldr	r2, [pc, #104]	@ (8005004 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	613b      	str	r3, [r7, #16]
    break;
 8004fa2:	e002      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
    break;
 8004fa8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004faa:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	fb03 f202 	mul.w	r2, r3, r2
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	0e5b      	lsrs	r3, r3, #25
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004fea:	683b      	ldr	r3, [r7, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200
 8005004:	08008778 	.word	0x08008778

08005008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005010:	2300      	movs	r3, #0
 8005012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005014:	2300      	movs	r3, #0
 8005016:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005020:	2b00      	cmp	r3, #0
 8005022:	d040      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005028:	2b80      	cmp	r3, #128	@ 0x80
 800502a:	d02a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800502c:	2b80      	cmp	r3, #128	@ 0x80
 800502e:	d825      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005030:	2b60      	cmp	r3, #96	@ 0x60
 8005032:	d026      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005034:	2b60      	cmp	r3, #96	@ 0x60
 8005036:	d821      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d006      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d81d      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d010      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005048:	e018      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800504a:	4b89      	ldr	r3, [pc, #548]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4a88      	ldr	r2, [pc, #544]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005054:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005056:	e015      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb02 	bl	8005668 <RCCEx_PLLSAI1_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005068:	e00c      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3320      	adds	r3, #32
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fbed 	bl	8005850 <RCCEx_PLLSAI2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800507a:	e003      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	74fb      	strb	r3, [r7, #19]
      break;
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800508a:	4b79      	ldr	r3, [pc, #484]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005090:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005098:	4975      	ldr	r1, [pc, #468]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d047      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ba:	d030      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c0:	d82a      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c6:	d02a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050cc:	d824      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d2:	d008      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d8:	d81e      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d010      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050e4:	e018      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e6:	4b62      	ldr	r3, [pc, #392]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4a61      	ldr	r2, [pc, #388]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f2:	e015      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fab4 	bl	8005668 <RCCEx_PLLSAI1_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3320      	adds	r3, #32
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fb9f 	bl	8005850 <RCCEx_PLLSAI2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	74fb      	strb	r3, [r7, #19]
      break;
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800511e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005126:	4b52      	ldr	r3, [pc, #328]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	494e      	ldr	r1, [pc, #312]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800513c:	e001      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 809f 	beq.w	800528e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005154:	4b46      	ldr	r3, [pc, #280]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	4b41      	ldr	r3, [pc, #260]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	4a40      	ldr	r2, [pc, #256]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	@ 0x58
 8005176:	4b3e      	ldr	r3, [pc, #248]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005182:	2301      	movs	r3, #1
 8005184:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005186:	4b3b      	ldr	r3, [pc, #236]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a3a      	ldr	r2, [pc, #232]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005192:	f7fc fe15 	bl	8001dc0 <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005198:	e009      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fc fe11 	bl	8001dc0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d902      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	74fb      	strb	r3, [r7, #19]
        break;
 80051ac:	e005      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051ae:	4b31      	ldr	r3, [pc, #196]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ef      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15b      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01f      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d019      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051de:	4b24      	ldr	r3, [pc, #144]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ea:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005200:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800520a:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fdd0 	bl	8001dc0 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	e00b      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fc fdcc 	bl	8001dc0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d902      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	74fb      	strb	r3, [r7, #19]
            break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0ec      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	4903      	ldr	r1, [pc, #12]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005268:	e008      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	74bb      	strb	r3, [r7, #18]
 800526e:	e005      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800527c:	7c7b      	ldrb	r3, [r7, #17]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4ba0      	ldr	r3, [pc, #640]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	4a9f      	ldr	r2, [pc, #636]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800528c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529a:	4b9a      	ldr	r3, [pc, #616]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a0:	f023 0203 	bic.w	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	4996      	ldr	r1, [pc, #600]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052bc:	4b91      	ldr	r3, [pc, #580]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	f023 020c 	bic.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	498e      	ldr	r1, [pc, #568]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052de:	4b89      	ldr	r3, [pc, #548]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	4985      	ldr	r1, [pc, #532]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005300:	4b80      	ldr	r3, [pc, #512]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005306:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530e:	497d      	ldr	r1, [pc, #500]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005322:	4b78      	ldr	r3, [pc, #480]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005330:	4974      	ldr	r1, [pc, #464]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005344:	4b6f      	ldr	r3, [pc, #444]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005352:	496c      	ldr	r1, [pc, #432]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005366:	4b67      	ldr	r3, [pc, #412]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005374:	4963      	ldr	r1, [pc, #396]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005388:	4b5e      	ldr	r3, [pc, #376]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005396:	495b      	ldr	r1, [pc, #364]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053aa:	4b56      	ldr	r3, [pc, #344]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	4952      	ldr	r1, [pc, #328]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	494a      	ldr	r1, [pc, #296]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ee:	4b45      	ldr	r3, [pc, #276]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	4941      	ldr	r1, [pc, #260]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005410:	4b3c      	ldr	r3, [pc, #240]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541e:	4939      	ldr	r1, [pc, #228]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d028      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005432:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005440:	4930      	ldr	r1, [pc, #192]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005450:	d106      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005452:	4b2c      	ldr	r3, [pc, #176]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4a2b      	ldr	r2, [pc, #172]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545c:	60d3      	str	r3, [r2, #12]
 800545e:	e011      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005468:	d10c      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2101      	movs	r1, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f8f9 	bl	8005668 <RCCEx_PLLSAI1_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005498:	d108      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800549a:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054a0:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80054aa:	e012      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054ac:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b2:	4a14      	ldr	r2, [pc, #80]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80054bc:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ca:	490e      	ldr	r1, [pc, #56]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e020      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f2:	d109      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a02      	ldr	r2, [pc, #8]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e014      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f8a5 	bl	8005668 <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005538:	4b4a      	ldr	r3, [pc, #296]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005546:	4947      	ldr	r1, [pc, #284]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005552:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005556:	d106      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b42      	ldr	r3, [pc, #264]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a41      	ldr	r2, [pc, #260]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
 8005564:	e011      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800556e:	d10c      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f876 	bl	8005668 <RCCEx_PLLSAI1_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01e      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005596:	4b33      	ldr	r3, [pc, #204]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a6:	492f      	ldr	r1, [pc, #188]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	2102      	movs	r1, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f851 	bl	8005668 <RCCEx_PLLSAI1_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e0:	4b20      	ldr	r3, [pc, #128]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e6:	f023 0204 	bic.w	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f0:	491c      	ldr	r1, [pc, #112]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005604:	4b17      	ldr	r3, [pc, #92]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800560a:	f023 0218 	bic.w	r2, r3, #24
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	4913      	ldr	r1, [pc, #76]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005638:	490a      	ldr	r1, [pc, #40]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a04      	ldr	r2, [pc, #16]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005658:	7cbb      	ldrb	r3, [r7, #18]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000

08005668 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005676:	4b72      	ldr	r3, [pc, #456]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005682:	4b6f      	ldr	r3, [pc, #444]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0203 	and.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d103      	bne.n	800569a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
       ||
 8005696:	2b00      	cmp	r3, #0
 8005698:	d142      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
 800569e:	e03f      	b.n	8005720 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d018      	beq.n	80056da <RCCEx_PLLSAI1_Config+0x72>
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d825      	bhi.n	80056f8 <RCCEx_PLLSAI1_Config+0x90>
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d002      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x4e>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d009      	beq.n	80056c8 <RCCEx_PLLSAI1_Config+0x60>
 80056b4:	e020      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056b6:	4b62      	ldr	r3, [pc, #392]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11d      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c6:	e01a      	b.n	80056fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d8:	e013      	b.n	8005702 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056da:	4b59      	ldr	r3, [pc, #356]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056e6:	4b56      	ldr	r3, [pc, #344]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056f6:	e006      	b.n	8005706 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e004      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005706:	bf00      	nop
    }

    if(status == HAL_OK)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800570e:	4b4c      	ldr	r3, [pc, #304]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f023 0203 	bic.w	r2, r3, #3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4949      	ldr	r1, [pc, #292]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 800571c:	4313      	orrs	r3, r2
 800571e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 8086 	bne.w	8005834 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005728:	4b45      	ldr	r3, [pc, #276]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a44      	ldr	r2, [pc, #272]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 800572e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005734:	f7fc fb44 	bl	8001dc0 <HAL_GetTick>
 8005738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800573a:	e009      	b.n	8005750 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800573c:	f7fc fb40 	bl	8001dc0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	73fb      	strb	r3, [r7, #15]
        break;
 800574e:	e005      	b.n	800575c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005750:	4b3b      	ldr	r3, [pc, #236]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ef      	bne.n	800573c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d168      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d113      	bne.n	8005790 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005768:	4b35      	ldr	r3, [pc, #212]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <RCCEx_PLLSAI1_Config+0x1dc>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	0211      	lsls	r1, r2, #8
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	06d2      	lsls	r2, r2, #27
 800577c:	4311      	orrs	r1, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6852      	ldr	r2, [r2, #4]
 8005782:	3a01      	subs	r2, #1
 8005784:	0112      	lsls	r2, r2, #4
 8005786:	430a      	orrs	r2, r1
 8005788:	492d      	ldr	r1, [pc, #180]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578a:	4313      	orrs	r3, r2
 800578c:	610b      	str	r3, [r1, #16]
 800578e:	e02d      	b.n	80057ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d115      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005796:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	4013      	ands	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6892      	ldr	r2, [r2, #8]
 80057a2:	0211      	lsls	r1, r2, #8
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6912      	ldr	r2, [r2, #16]
 80057a8:	0852      	lsrs	r2, r2, #1
 80057aa:	3a01      	subs	r2, #1
 80057ac:	0552      	lsls	r2, r2, #21
 80057ae:	4311      	orrs	r1, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6852      	ldr	r2, [r2, #4]
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	430a      	orrs	r2, r1
 80057ba:	4921      	ldr	r1, [pc, #132]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]
 80057c0:	e014      	b.n	80057ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	4b21      	ldr	r3, [pc, #132]	@ (800584c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	0211      	lsls	r1, r2, #8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6952      	ldr	r2, [r2, #20]
 80057d4:	0852      	lsrs	r2, r2, #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	0652      	lsls	r2, r2, #25
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6852      	ldr	r2, [r2, #4]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0112      	lsls	r2, r2, #4
 80057e4:	430a      	orrs	r2, r1
 80057e6:	4916      	ldr	r1, [pc, #88]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057ec:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fc fae2 	bl	8001dc0 <HAL_GetTick>
 80057fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057fe:	e009      	b.n	8005814 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005800:	f7fc fade 	bl	8001dc0 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d902      	bls.n	8005814 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	73fb      	strb	r3, [r7, #15]
          break;
 8005812:	e005      	b.n	8005820 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005814:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ef      	beq.n	8005800 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005826:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	4904      	ldr	r1, [pc, #16]	@ (8005840 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	07ff800f 	.word	0x07ff800f
 8005848:	ff9f800f 	.word	0xff9f800f
 800584c:	f9ff800f 	.word	0xf9ff800f

08005850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800585e:	4b72      	ldr	r3, [pc, #456]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00e      	beq.n	8005888 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800586a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0203 	and.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d103      	bne.n	8005882 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
       ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d142      	bne.n	8005908 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
 8005886:	e03f      	b.n	8005908 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d018      	beq.n	80058c2 <RCCEx_PLLSAI2_Config+0x72>
 8005890:	2b03      	cmp	r3, #3
 8005892:	d825      	bhi.n	80058e0 <RCCEx_PLLSAI2_Config+0x90>
 8005894:	2b01      	cmp	r3, #1
 8005896:	d002      	beq.n	800589e <RCCEx_PLLSAI2_Config+0x4e>
 8005898:	2b02      	cmp	r3, #2
 800589a:	d009      	beq.n	80058b0 <RCCEx_PLLSAI2_Config+0x60>
 800589c:	e020      	b.n	80058e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800589e:	4b62      	ldr	r3, [pc, #392]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11d      	bne.n	80058e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ae:	e01a      	b.n	80058e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d116      	bne.n	80058ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c0:	e013      	b.n	80058ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058c2:	4b59      	ldr	r3, [pc, #356]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10f      	bne.n	80058ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ce:	4b56      	ldr	r3, [pc, #344]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058de:	e006      	b.n	80058ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      break;
 80058e4:	e004      	b.n	80058f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80058e6:	bf00      	nop
 80058e8:	e002      	b.n	80058f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80058ea:	bf00      	nop
 80058ec:	e000      	b.n	80058f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80058ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80058f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4949      	ldr	r1, [pc, #292]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f040 8086 	bne.w	8005a1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005910:	4b45      	ldr	r3, [pc, #276]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a44      	ldr	r2, [pc, #272]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800591a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591c:	f7fc fa50 	bl	8001dc0 <HAL_GetTick>
 8005920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005922:	e009      	b.n	8005938 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005924:	f7fc fa4c 	bl	8001dc0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d902      	bls.n	8005938 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	73fb      	strb	r3, [r7, #15]
        break;
 8005936:	e005      	b.n	8005944 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005938:	4b3b      	ldr	r3, [pc, #236]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ef      	bne.n	8005924 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d168      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d113      	bne.n	8005978 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005950:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	4b35      	ldr	r3, [pc, #212]	@ (8005a2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6892      	ldr	r2, [r2, #8]
 800595c:	0211      	lsls	r1, r2, #8
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68d2      	ldr	r2, [r2, #12]
 8005962:	06d2      	lsls	r2, r2, #27
 8005964:	4311      	orrs	r1, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6852      	ldr	r2, [r2, #4]
 800596a:	3a01      	subs	r2, #1
 800596c:	0112      	lsls	r2, r2, #4
 800596e:	430a      	orrs	r2, r1
 8005970:	492d      	ldr	r1, [pc, #180]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	614b      	str	r3, [r1, #20]
 8005976:	e02d      	b.n	80059d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d115      	bne.n	80059aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800597e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	4b2b      	ldr	r3, [pc, #172]	@ (8005a30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6892      	ldr	r2, [r2, #8]
 800598a:	0211      	lsls	r1, r2, #8
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6912      	ldr	r2, [r2, #16]
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	3a01      	subs	r2, #1
 8005994:	0552      	lsls	r2, r2, #21
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6852      	ldr	r2, [r2, #4]
 800599c:	3a01      	subs	r2, #1
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	430a      	orrs	r2, r1
 80059a2:	4921      	ldr	r1, [pc, #132]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	614b      	str	r3, [r1, #20]
 80059a8:	e014      	b.n	80059d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	4b21      	ldr	r3, [pc, #132]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1e4>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6892      	ldr	r2, [r2, #8]
 80059b6:	0211      	lsls	r1, r2, #8
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6952      	ldr	r2, [r2, #20]
 80059bc:	0852      	lsrs	r2, r2, #1
 80059be:	3a01      	subs	r2, #1
 80059c0:	0652      	lsls	r2, r2, #25
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6852      	ldr	r2, [r2, #4]
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0112      	lsls	r2, r2, #4
 80059cc:	430a      	orrs	r2, r1
 80059ce:	4916      	ldr	r1, [pc, #88]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059d4:	4b14      	ldr	r3, [pc, #80]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a13      	ldr	r2, [pc, #76]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fc f9ee 	bl	8001dc0 <HAL_GetTick>
 80059e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059e6:	e009      	b.n	80059fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059e8:	f7fc f9ea 	bl	8001dc0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d902      	bls.n	80059fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	73fb      	strb	r3, [r7, #15]
          break;
 80059fa:	e005      	b.n	8005a08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0ef      	beq.n	80059e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a0e:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4904      	ldr	r1, [pc, #16]	@ (8005a28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	07ff800f 	.word	0x07ff800f
 8005a30:	ff9f800f 	.word	0xff9f800f
 8005a34:	f9ff800f 	.word	0xf9ff800f

08005a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e042      	b.n	8005ad0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fb ffcd 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2224      	movs	r2, #36	@ 0x24
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fbb2 	bl	80061ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f8b3 	bl	8005bf4 <UART_SetConfig>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e01b      	b.n	8005ad0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc31 	bl	8006330 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	@ 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d17b      	bne.n	8005bea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Transmit+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e074      	b.n	8005bec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2221      	movs	r2, #33	@ 0x21
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b12:	f7fc f955 	bl	8001dc0 <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b30:	d108      	bne.n	8005b44 <HAL_UART_Transmit+0x6c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e003      	b.n	8005b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b4c:	e030      	b.n	8005bb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	2180      	movs	r1, #128	@ 0x80
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fc93 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e03d      	b.n	8005bec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b82:	b292      	uxth	r2, r2
 8005b84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	3302      	adds	r3, #2
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e007      	b.n	8005b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1c8      	bne.n	8005b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2140      	movs	r1, #64	@ 0x40
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fc5c 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e006      	b.n	8005bec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b08c      	sub	sp, #48	@ 0x30
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4baa      	ldr	r3, [pc, #680]	@ (8005ecc <UART_SetConfig+0x2d8>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed0 <UART_SetConfig+0x2dc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	f023 010f 	bic.w	r1, r3, #15
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a90      	ldr	r2, [pc, #576]	@ (8005ed4 <UART_SetConfig+0x2e0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d125      	bne.n	8005ce4 <UART_SetConfig+0xf0>
 8005c98:	4b8f      	ldr	r3, [pc, #572]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d81a      	bhi.n	8005cdc <UART_SetConfig+0xe8>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <UART_SetConfig+0xb8>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e116      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cca:	e112      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e10e      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e10a      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce2:	e106      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a7c      	ldr	r2, [pc, #496]	@ (8005edc <UART_SetConfig+0x2e8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d138      	bne.n	8005d60 <UART_SetConfig+0x16c>
 8005cee:	4b7a      	ldr	r3, [pc, #488]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d82d      	bhi.n	8005d58 <UART_SetConfig+0x164>
 8005cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0x110>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005d59 	.word	0x08005d59
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d59 	.word	0x08005d59
 8005d1c:	08005d59 	.word	0x08005d59
 8005d20:	08005d59 	.word	0x08005d59
 8005d24:	08005d41 	.word	0x08005d41
 8005d28:	08005d59 	.word	0x08005d59
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e0d8      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d40:	2302      	movs	r3, #2
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e0d4      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e0d0      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e0cc      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e0c8      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5e      	ldr	r2, [pc, #376]	@ (8005ee0 <UART_SetConfig+0x2ec>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d125      	bne.n	8005db6 <UART_SetConfig+0x1c2>
 8005d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d016      	beq.n	8005da6 <UART_SetConfig+0x1b2>
 8005d78:	2b30      	cmp	r3, #48	@ 0x30
 8005d7a:	d818      	bhi.n	8005dae <UART_SetConfig+0x1ba>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d00a      	beq.n	8005d96 <UART_SetConfig+0x1a2>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d814      	bhi.n	8005dae <UART_SetConfig+0x1ba>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <UART_SetConfig+0x19a>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d008      	beq.n	8005d9e <UART_SetConfig+0x1aa>
 8005d8c:	e00f      	b.n	8005dae <UART_SetConfig+0x1ba>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d94:	e0ad      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d96:	2302      	movs	r3, #2
 8005d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9c:	e0a9      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005d9e:	2304      	movs	r3, #4
 8005da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da4:	e0a5      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005da6:	2308      	movs	r3, #8
 8005da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dac:	e0a1      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005dae:	2310      	movs	r3, #16
 8005db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db4:	e09d      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee4 <UART_SetConfig+0x2f0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d125      	bne.n	8005e0c <UART_SetConfig+0x218>
 8005dc0:	4b45      	ldr	r3, [pc, #276]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dcc:	d016      	beq.n	8005dfc <UART_SetConfig+0x208>
 8005dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dd0:	d818      	bhi.n	8005e04 <UART_SetConfig+0x210>
 8005dd2:	2b80      	cmp	r3, #128	@ 0x80
 8005dd4:	d00a      	beq.n	8005dec <UART_SetConfig+0x1f8>
 8005dd6:	2b80      	cmp	r3, #128	@ 0x80
 8005dd8:	d814      	bhi.n	8005e04 <UART_SetConfig+0x210>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <UART_SetConfig+0x1f0>
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d008      	beq.n	8005df4 <UART_SetConfig+0x200>
 8005de2:	e00f      	b.n	8005e04 <UART_SetConfig+0x210>
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dea:	e082      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e07e      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e07a      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e076      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e072      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a35      	ldr	r2, [pc, #212]	@ (8005ee8 <UART_SetConfig+0x2f4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d12a      	bne.n	8005e6c <UART_SetConfig+0x278>
 8005e16:	4b30      	ldr	r3, [pc, #192]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e24:	d01a      	beq.n	8005e5c <UART_SetConfig+0x268>
 8005e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e2a:	d81b      	bhi.n	8005e64 <UART_SetConfig+0x270>
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e30:	d00c      	beq.n	8005e4c <UART_SetConfig+0x258>
 8005e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e36:	d815      	bhi.n	8005e64 <UART_SetConfig+0x270>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x250>
 8005e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e40:	d008      	beq.n	8005e54 <UART_SetConfig+0x260>
 8005e42:	e00f      	b.n	8005e64 <UART_SetConfig+0x270>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e4a:	e052      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e52:	e04e      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5a:	e04a      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e62:	e046      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6a:	e042      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a17      	ldr	r2, [pc, #92]	@ (8005ed0 <UART_SetConfig+0x2dc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d13a      	bne.n	8005eec <UART_SetConfig+0x2f8>
 8005e76:	4b18      	ldr	r3, [pc, #96]	@ (8005ed8 <UART_SetConfig+0x2e4>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e84:	d01a      	beq.n	8005ebc <UART_SetConfig+0x2c8>
 8005e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e8a:	d81b      	bhi.n	8005ec4 <UART_SetConfig+0x2d0>
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e90:	d00c      	beq.n	8005eac <UART_SetConfig+0x2b8>
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e96:	d815      	bhi.n	8005ec4 <UART_SetConfig+0x2d0>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <UART_SetConfig+0x2b0>
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x2c0>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x2d0>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eaa:	e022      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	e01e      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eba:	e01a      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e016      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eca:	e012      	b.n	8005ef2 <UART_SetConfig+0x2fe>
 8005ecc:	cfff69f3 	.word	0xcfff69f3
 8005ed0:	40008000 	.word	0x40008000
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	40004800 	.word	0x40004800
 8005ee4:	40004c00 	.word	0x40004c00
 8005ee8:	40005000 	.word	0x40005000
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4aae      	ldr	r2, [pc, #696]	@ (80061b0 <UART_SetConfig+0x5bc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f040 8097 	bne.w	800602c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005efe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d823      	bhi.n	8005f4e <UART_SetConfig+0x35a>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x318>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	08005f4f 	.word	0x08005f4f
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f4f 	.word	0x08005f4f
 8005f1c:	08005f3f 	.word	0x08005f3f
 8005f20:	08005f4f 	.word	0x08005f4f
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f4f 	.word	0x08005f4f
 8005f2c:	08005f47 	.word	0x08005f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f30:	f7fe ff7e 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f38:	4b9e      	ldr	r3, [pc, #632]	@ (80061b4 <UART_SetConfig+0x5c0>)
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f3c:	e00d      	b.n	8005f5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3e:	f7fe fedf 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8005f42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8130 	beq.w	80061c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	4a94      	ldr	r2, [pc, #592]	@ (80061b8 <UART_SetConfig+0x5c4>)
 8005f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d305      	bcc.n	8005f92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d903      	bls.n	8005f9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f98:	e113      	b.n	80061c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	60fa      	str	r2, [r7, #12]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	4a84      	ldr	r2, [pc, #528]	@ (80061b8 <UART_SetConfig+0x5c4>)
 8005fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2200      	movs	r2, #0
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fbc:	f7fa fe0e 	bl	8000bdc <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	020b      	lsls	r3, r1, #8
 8005fd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fd6:	0202      	lsls	r2, r0, #8
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	6849      	ldr	r1, [r1, #4]
 8005fdc:	0849      	lsrs	r1, r1, #1
 8005fde:	2000      	movs	r0, #0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	eb12 0804 	adds.w	r8, r2, r4
 8005fe8:	eb43 0905 	adc.w	r9, r3, r5
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	469a      	mov	sl, r3
 8005ff4:	4693      	mov	fp, r2
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	465b      	mov	r3, fp
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa fded 	bl	8000bdc <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4613      	mov	r3, r2
 8006008:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006010:	d308      	bcc.n	8006024 <UART_SetConfig+0x430>
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006018:	d204      	bcs.n	8006024 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	e0ce      	b.n	80061c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800602a:	e0ca      	b.n	80061c2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006034:	d166      	bne.n	8006104 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800603a:	2b08      	cmp	r3, #8
 800603c:	d827      	bhi.n	800608e <UART_SetConfig+0x49a>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <UART_SetConfig+0x450>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	0800608f 	.word	0x0800608f
 8006054:	0800607f 	.word	0x0800607f
 8006058:	0800608f 	.word	0x0800608f
 800605c:	0800608f 	.word	0x0800608f
 8006060:	0800608f 	.word	0x0800608f
 8006064:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe fee2 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800606e:	e014      	b.n	800609a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe fef4 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8006074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006076:	e010      	b.n	800609a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b4e      	ldr	r3, [pc, #312]	@ (80061b4 <UART_SetConfig+0x5c0>)
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800607c:	e00d      	b.n	800609a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fe fe3f 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8006082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006084:	e009      	b.n	800609a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800608c:	e005      	b.n	800609a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8090 	beq.w	80061c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	4a44      	ldr	r2, [pc, #272]	@ (80061b8 <UART_SetConfig+0x5c4>)
 80060a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b4:	005a      	lsls	r2, r3, #1
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	441a      	add	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2b0f      	cmp	r3, #15
 80060cc:	d916      	bls.n	80060fc <UART_SetConfig+0x508>
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d4:	d212      	bcs.n	80060fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f023 030f 	bic.w	r3, r3, #15
 80060de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	8bfb      	ldrh	r3, [r7, #30]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	8bfa      	ldrh	r2, [r7, #30]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e062      	b.n	80061c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006102:	e05e      	b.n	80061c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006104:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006108:	2b08      	cmp	r3, #8
 800610a:	d828      	bhi.n	800615e <UART_SetConfig+0x56a>
 800610c:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <UART_SetConfig+0x520>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
 8006134:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fe fe7a 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800613c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800613e:	e014      	b.n	800616a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fe fe8c 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8006144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006146:	e010      	b.n	800616a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006148:	4b1a      	ldr	r3, [pc, #104]	@ (80061b4 <UART_SetConfig+0x5c0>)
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800614c:	e00d      	b.n	800616a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fe fdd7 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8006152:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006154:	e009      	b.n	800616a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800615c:	e005      	b.n	800616a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006168:	bf00      	nop
    }

    if (pclk != 0U)
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d028      	beq.n	80061c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	4a10      	ldr	r2, [pc, #64]	@ (80061b8 <UART_SetConfig+0x5c4>)
 8006176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800617a:	461a      	mov	r2, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	441a      	add	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d910      	bls.n	80061bc <UART_SetConfig+0x5c8>
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a0:	d20c      	bcs.n	80061bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	e009      	b.n	80061c2 <UART_SetConfig+0x5ce>
 80061ae:	bf00      	nop
 80061b0:	40008000 	.word	0x40008000
 80061b4:	00f42400 	.word	0x00f42400
 80061b8:	080087a8 	.word	0x080087a8
      }
      else
      {
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2200      	movs	r2, #0
 80061dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3730      	adds	r7, #48	@ 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ea:	d10a      	bne.n	8006302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b098      	sub	sp, #96	@ 0x60
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006340:	f7fb fd3e 	bl	8001dc0 <HAL_GetTick>
 8006344:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d12f      	bne.n	80063b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f88e 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d022      	beq.n	80063b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800638c:	647b      	str	r3, [r7, #68]	@ 0x44
 800638e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800639a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e063      	b.n	800647c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d149      	bne.n	8006456 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ca:	2200      	movs	r2, #0
 80063cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f857 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d03c      	beq.n	8006456 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	60fb      	str	r3, [r7, #12]
   return(result);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642e:	61fa      	str	r2, [r7, #28]
 8006430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	69b9      	ldr	r1, [r7, #24]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	617b      	str	r3, [r7, #20]
   return(result);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e012      	b.n	800647c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3758      	adds	r7, #88	@ 0x58
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006494:	e04f      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800649c:	d04b      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649e:	f7fb fc8f 	bl	8001dc0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e04e      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d037      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b80      	cmp	r3, #128	@ 0x80
 80064ca:	d034      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b40      	cmp	r3, #64	@ 0x40
 80064d0:	d031      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d110      	bne.n	8006502 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f838 	bl	800655e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2208      	movs	r2, #8
 80064f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e029      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006510:	d111      	bne.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800651a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f81e 	bl	800655e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e00f      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d0a0      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800655e:	b480      	push	{r7}
 8006560:	b095      	sub	sp, #84	@ 0x54
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006584:	643b      	str	r3, [r7, #64]	@ 0x40
 8006586:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800658a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e6      	bne.n	8006566 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3308      	adds	r3, #8
 800659e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e3      	bne.n	8006598 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d118      	bne.n	800660a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f023 0310 	bic.w	r3, r3, #16
 80065ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6979      	ldr	r1, [r7, #20]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	613b      	str	r3, [r7, #16]
   return(result);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e6      	bne.n	80065d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800661e:	bf00      	nop
 8006620:	3754      	adds	r7, #84	@ 0x54
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_UARTEx_DisableFifoMode+0x16>
 800663c:	2302      	movs	r3, #2
 800663e:	e027      	b.n	8006690 <HAL_UARTEx_DisableFifoMode+0x66>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	@ 0x24
 800664c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0201 	bic.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800666e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e02d      	b.n	8006710 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	@ 0x24
 80066c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f84f 	bl	8006794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800672c:	2302      	movs	r3, #2
 800672e:	e02d      	b.n	800678c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2224      	movs	r2, #36	@ 0x24
 800673c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f811 	bl	8006794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d108      	bne.n	80067b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067b4:	e031      	b.n	800681a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067b6:	2308      	movs	r3, #8
 80067b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ba:	2308      	movs	r3, #8
 80067bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	0e5b      	lsrs	r3, r3, #25
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	0f5b      	lsrs	r3, r3, #29
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	7b3a      	ldrb	r2, [r7, #12]
 80067e2:	4911      	ldr	r1, [pc, #68]	@ (8006828 <UARTEx_SetNbDataToProcess+0x94>)
 80067e4:	5c8a      	ldrb	r2, [r1, r2]
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067ea:	7b3a      	ldrb	r2, [r7, #12]
 80067ec:	490f      	ldr	r1, [pc, #60]	@ (800682c <UARTEx_SetNbDataToProcess+0x98>)
 80067ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	7b7a      	ldrb	r2, [r7, #13]
 8006800:	4909      	ldr	r1, [pc, #36]	@ (8006828 <UARTEx_SetNbDataToProcess+0x94>)
 8006802:	5c8a      	ldrb	r2, [r1, r2]
 8006804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006808:	7b7a      	ldrb	r2, [r7, #13]
 800680a:	4908      	ldr	r1, [pc, #32]	@ (800682c <UARTEx_SetNbDataToProcess+0x98>)
 800680c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800680e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	080087c0 	.word	0x080087c0
 800682c:	080087c8 	.word	0x080087c8

08006830 <std>:
 8006830:	2300      	movs	r3, #0
 8006832:	b510      	push	{r4, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	e9c0 3300 	strd	r3, r3, [r0]
 800683a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683e:	6083      	str	r3, [r0, #8]
 8006840:	8181      	strh	r1, [r0, #12]
 8006842:	6643      	str	r3, [r0, #100]	@ 0x64
 8006844:	81c2      	strh	r2, [r0, #14]
 8006846:	6183      	str	r3, [r0, #24]
 8006848:	4619      	mov	r1, r3
 800684a:	2208      	movs	r2, #8
 800684c:	305c      	adds	r0, #92	@ 0x5c
 800684e:	f000 f8c3 	bl	80069d8 <memset>
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <std+0x58>)
 8006854:	6263      	str	r3, [r4, #36]	@ 0x24
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x5c>)
 8006858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <std+0x60>)
 800685c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <std+0x64>)
 8006860:	6323      	str	r3, [r4, #48]	@ 0x30
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <std+0x68>)
 8006864:	6224      	str	r4, [r4, #32]
 8006866:	429c      	cmp	r4, r3
 8006868:	d006      	beq.n	8006878 <std+0x48>
 800686a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800686e:	4294      	cmp	r4, r2
 8006870:	d002      	beq.n	8006878 <std+0x48>
 8006872:	33d0      	adds	r3, #208	@ 0xd0
 8006874:	429c      	cmp	r4, r3
 8006876:	d105      	bne.n	8006884 <std+0x54>
 8006878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006880:	f000 b8dc 	b.w	8006a3c <__retarget_lock_init_recursive>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	bf00      	nop
 8006888:	08007291 	.word	0x08007291
 800688c:	080072b3 	.word	0x080072b3
 8006890:	080072eb 	.word	0x080072eb
 8006894:	0800730f 	.word	0x0800730f
 8006898:	20040204 	.word	0x20040204

0800689c <stdio_exit_handler>:
 800689c:	4a02      	ldr	r2, [pc, #8]	@ (80068a8 <stdio_exit_handler+0xc>)
 800689e:	4903      	ldr	r1, [pc, #12]	@ (80068ac <stdio_exit_handler+0x10>)
 80068a0:	4803      	ldr	r0, [pc, #12]	@ (80068b0 <stdio_exit_handler+0x14>)
 80068a2:	f000 b869 	b.w	8006978 <_fwalk_sglue>
 80068a6:	bf00      	nop
 80068a8:	2004000c 	.word	0x2004000c
 80068ac:	08007229 	.word	0x08007229
 80068b0:	2004001c 	.word	0x2004001c

080068b4 <cleanup_stdio>:
 80068b4:	6841      	ldr	r1, [r0, #4]
 80068b6:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <cleanup_stdio+0x34>)
 80068b8:	4299      	cmp	r1, r3
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
 80068be:	d001      	beq.n	80068c4 <cleanup_stdio+0x10>
 80068c0:	f000 fcb2 	bl	8007228 <_fflush_r>
 80068c4:	68a1      	ldr	r1, [r4, #8]
 80068c6:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <cleanup_stdio+0x38>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d002      	beq.n	80068d2 <cleanup_stdio+0x1e>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fcab 	bl	8007228 <_fflush_r>
 80068d2:	68e1      	ldr	r1, [r4, #12]
 80068d4:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <cleanup_stdio+0x3c>)
 80068d6:	4299      	cmp	r1, r3
 80068d8:	d004      	beq.n	80068e4 <cleanup_stdio+0x30>
 80068da:	4620      	mov	r0, r4
 80068dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e0:	f000 bca2 	b.w	8007228 <_fflush_r>
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	20040204 	.word	0x20040204
 80068ec:	2004026c 	.word	0x2004026c
 80068f0:	200402d4 	.word	0x200402d4

080068f4 <global_stdio_init.part.0>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <global_stdio_init.part.0+0x30>)
 80068f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006928 <global_stdio_init.part.0+0x34>)
 80068fa:	4a0c      	ldr	r2, [pc, #48]	@ (800692c <global_stdio_init.part.0+0x38>)
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	4620      	mov	r0, r4
 8006900:	2200      	movs	r2, #0
 8006902:	2104      	movs	r1, #4
 8006904:	f7ff ff94 	bl	8006830 <std>
 8006908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800690c:	2201      	movs	r2, #1
 800690e:	2109      	movs	r1, #9
 8006910:	f7ff ff8e 	bl	8006830 <std>
 8006914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006918:	2202      	movs	r2, #2
 800691a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691e:	2112      	movs	r1, #18
 8006920:	f7ff bf86 	b.w	8006830 <std>
 8006924:	2004033c 	.word	0x2004033c
 8006928:	20040204 	.word	0x20040204
 800692c:	0800689d 	.word	0x0800689d

08006930 <__sfp_lock_acquire>:
 8006930:	4801      	ldr	r0, [pc, #4]	@ (8006938 <__sfp_lock_acquire+0x8>)
 8006932:	f000 b884 	b.w	8006a3e <__retarget_lock_acquire_recursive>
 8006936:	bf00      	nop
 8006938:	20040341 	.word	0x20040341

0800693c <__sfp_lock_release>:
 800693c:	4801      	ldr	r0, [pc, #4]	@ (8006944 <__sfp_lock_release+0x8>)
 800693e:	f000 b87f 	b.w	8006a40 <__retarget_lock_release_recursive>
 8006942:	bf00      	nop
 8006944:	20040341 	.word	0x20040341

08006948 <__sinit>:
 8006948:	b510      	push	{r4, lr}
 800694a:	4604      	mov	r4, r0
 800694c:	f7ff fff0 	bl	8006930 <__sfp_lock_acquire>
 8006950:	6a23      	ldr	r3, [r4, #32]
 8006952:	b11b      	cbz	r3, 800695c <__sinit+0x14>
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f7ff bff0 	b.w	800693c <__sfp_lock_release>
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <__sinit+0x28>)
 800695e:	6223      	str	r3, [r4, #32]
 8006960:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <__sinit+0x2c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f5      	bne.n	8006954 <__sinit+0xc>
 8006968:	f7ff ffc4 	bl	80068f4 <global_stdio_init.part.0>
 800696c:	e7f2      	b.n	8006954 <__sinit+0xc>
 800696e:	bf00      	nop
 8006970:	080068b5 	.word	0x080068b5
 8006974:	2004033c 	.word	0x2004033c

08006978 <_fwalk_sglue>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	4607      	mov	r7, r0
 800697e:	4688      	mov	r8, r1
 8006980:	4614      	mov	r4, r2
 8006982:	2600      	movs	r6, #0
 8006984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006988:	f1b9 0901 	subs.w	r9, r9, #1
 800698c:	d505      	bpl.n	800699a <_fwalk_sglue+0x22>
 800698e:	6824      	ldr	r4, [r4, #0]
 8006990:	2c00      	cmp	r4, #0
 8006992:	d1f7      	bne.n	8006984 <_fwalk_sglue+0xc>
 8006994:	4630      	mov	r0, r6
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d907      	bls.n	80069b0 <_fwalk_sglue+0x38>
 80069a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a4:	3301      	adds	r3, #1
 80069a6:	d003      	beq.n	80069b0 <_fwalk_sglue+0x38>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	4306      	orrs	r6, r0
 80069b0:	3568      	adds	r5, #104	@ 0x68
 80069b2:	e7e9      	b.n	8006988 <_fwalk_sglue+0x10>

080069b4 <iprintf>:
 80069b4:	b40f      	push	{r0, r1, r2, r3}
 80069b6:	b507      	push	{r0, r1, r2, lr}
 80069b8:	4906      	ldr	r1, [pc, #24]	@ (80069d4 <iprintf+0x20>)
 80069ba:	ab04      	add	r3, sp, #16
 80069bc:	6808      	ldr	r0, [r1, #0]
 80069be:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c2:	6881      	ldr	r1, [r0, #8]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	f000 f865 	bl	8006a94 <_vfiprintf_r>
 80069ca:	b003      	add	sp, #12
 80069cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d0:	b004      	add	sp, #16
 80069d2:	4770      	bx	lr
 80069d4:	20040018 	.word	0x20040018

080069d8 <memset>:
 80069d8:	4402      	add	r2, r0
 80069da:	4603      	mov	r3, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <__errno>:
 80069e8:	4b01      	ldr	r3, [pc, #4]	@ (80069f0 <__errno+0x8>)
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20040018 	.word	0x20040018

080069f4 <__libc_init_array>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4d0d      	ldr	r5, [pc, #52]	@ (8006a2c <__libc_init_array+0x38>)
 80069f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006a30 <__libc_init_array+0x3c>)
 80069fa:	1b64      	subs	r4, r4, r5
 80069fc:	10a4      	asrs	r4, r4, #2
 80069fe:	2600      	movs	r6, #0
 8006a00:	42a6      	cmp	r6, r4
 8006a02:	d109      	bne.n	8006a18 <__libc_init_array+0x24>
 8006a04:	4d0b      	ldr	r5, [pc, #44]	@ (8006a34 <__libc_init_array+0x40>)
 8006a06:	4c0c      	ldr	r4, [pc, #48]	@ (8006a38 <__libc_init_array+0x44>)
 8006a08:	f001 fe62 	bl	80086d0 <_init>
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	2600      	movs	r6, #0
 8006a12:	42a6      	cmp	r6, r4
 8006a14:	d105      	bne.n	8006a22 <__libc_init_array+0x2e>
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1c:	4798      	blx	r3
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7ee      	b.n	8006a00 <__libc_init_array+0xc>
 8006a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a26:	4798      	blx	r3
 8006a28:	3601      	adds	r6, #1
 8006a2a:	e7f2      	b.n	8006a12 <__libc_init_array+0x1e>
 8006a2c:	080089e8 	.word	0x080089e8
 8006a30:	080089e8 	.word	0x080089e8
 8006a34:	080089e8 	.word	0x080089e8
 8006a38:	080089ec 	.word	0x080089ec

08006a3c <__retarget_lock_init_recursive>:
 8006a3c:	4770      	bx	lr

08006a3e <__retarget_lock_acquire_recursive>:
 8006a3e:	4770      	bx	lr

08006a40 <__retarget_lock_release_recursive>:
 8006a40:	4770      	bx	lr

08006a42 <__sfputc_r>:
 8006a42:	6893      	ldr	r3, [r2, #8]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	b410      	push	{r4}
 8006a4a:	6093      	str	r3, [r2, #8]
 8006a4c:	da08      	bge.n	8006a60 <__sfputc_r+0x1e>
 8006a4e:	6994      	ldr	r4, [r2, #24]
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	db01      	blt.n	8006a58 <__sfputc_r+0x16>
 8006a54:	290a      	cmp	r1, #10
 8006a56:	d103      	bne.n	8006a60 <__sfputc_r+0x1e>
 8006a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a5c:	f000 bc5b 	b.w	8007316 <__swbuf_r>
 8006a60:	6813      	ldr	r3, [r2, #0]
 8006a62:	1c58      	adds	r0, r3, #1
 8006a64:	6010      	str	r0, [r2, #0]
 8006a66:	7019      	strb	r1, [r3, #0]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <__sfputs_r>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	4614      	mov	r4, r2
 8006a78:	18d5      	adds	r5, r2, r3
 8006a7a:	42ac      	cmp	r4, r5
 8006a7c:	d101      	bne.n	8006a82 <__sfputs_r+0x12>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e007      	b.n	8006a92 <__sfputs_r+0x22>
 8006a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a86:	463a      	mov	r2, r7
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f7ff ffda 	bl	8006a42 <__sfputc_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d1f3      	bne.n	8006a7a <__sfputs_r+0xa>
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a94 <_vfiprintf_r>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	460d      	mov	r5, r1
 8006a9a:	b09d      	sub	sp, #116	@ 0x74
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4698      	mov	r8, r3
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	b118      	cbz	r0, 8006aac <_vfiprintf_r+0x18>
 8006aa4:	6a03      	ldr	r3, [r0, #32]
 8006aa6:	b90b      	cbnz	r3, 8006aac <_vfiprintf_r+0x18>
 8006aa8:	f7ff ff4e 	bl	8006948 <__sinit>
 8006aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aae:	07d9      	lsls	r1, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_vfiprintf_r+0x2a>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	059a      	lsls	r2, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_vfiprintf_r+0x2a>
 8006ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aba:	f7ff ffc0 	bl	8006a3e <__retarget_lock_acquire_recursive>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	071b      	lsls	r3, r3, #28
 8006ac2:	d501      	bpl.n	8006ac8 <_vfiprintf_r+0x34>
 8006ac4:	692b      	ldr	r3, [r5, #16]
 8006ac6:	b99b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x5c>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 fc62 	bl	8007394 <__swsetup_r>
 8006ad0:	b170      	cbz	r0, 8006af0 <_vfiprintf_r+0x5c>
 8006ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad4:	07dc      	lsls	r4, r3, #31
 8006ad6:	d504      	bpl.n	8006ae2 <_vfiprintf_r+0x4e>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006adc:	b01d      	add	sp, #116	@ 0x74
 8006ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	0598      	lsls	r0, r3, #22
 8006ae6:	d4f7      	bmi.n	8006ad8 <_vfiprintf_r+0x44>
 8006ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aea:	f7ff ffa9 	bl	8006a40 <__retarget_lock_release_recursive>
 8006aee:	e7f3      	b.n	8006ad8 <_vfiprintf_r+0x44>
 8006af0:	2300      	movs	r3, #0
 8006af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af4:	2320      	movs	r3, #32
 8006af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afe:	2330      	movs	r3, #48	@ 0x30
 8006b00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cb0 <_vfiprintf_r+0x21c>
 8006b04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b08:	f04f 0901 	mov.w	r9, #1
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	469a      	mov	sl, r3
 8006b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b14:	b10a      	cbz	r2, 8006b1a <_vfiprintf_r+0x86>
 8006b16:	2a25      	cmp	r2, #37	@ 0x25
 8006b18:	d1f9      	bne.n	8006b0e <_vfiprintf_r+0x7a>
 8006b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1e:	d00b      	beq.n	8006b38 <_vfiprintf_r+0xa4>
 8006b20:	465b      	mov	r3, fp
 8006b22:	4622      	mov	r2, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff ffa2 	bl	8006a70 <__sfputs_r>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f000 80a7 	beq.w	8006c80 <_vfiprintf_r+0x1ec>
 8006b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b34:	445a      	add	r2, fp
 8006b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b38:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 809f 	beq.w	8006c80 <_vfiprintf_r+0x1ec>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b4c:	f10a 0a01 	add.w	sl, sl, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b5a:	4654      	mov	r4, sl
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b62:	4853      	ldr	r0, [pc, #332]	@ (8006cb0 <_vfiprintf_r+0x21c>)
 8006b64:	f7f9 fb4c 	bl	8000200 <memchr>
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	b9d8      	cbnz	r0, 8006ba4 <_vfiprintf_r+0x110>
 8006b6c:	06d1      	lsls	r1, r2, #27
 8006b6e:	bf44      	itt	mi
 8006b70:	2320      	movmi	r3, #32
 8006b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b76:	0713      	lsls	r3, r2, #28
 8006b78:	bf44      	itt	mi
 8006b7a:	232b      	movmi	r3, #43	@ 0x2b
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b80:	f89a 3000 	ldrb.w	r3, [sl]
 8006b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b86:	d015      	beq.n	8006bb4 <_vfiprintf_r+0x120>
 8006b88:	9a07      	ldr	r2, [sp, #28]
 8006b8a:	4654      	mov	r4, sl
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4621      	mov	r1, r4
 8006b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b98:	3b30      	subs	r3, #48	@ 0x30
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d94b      	bls.n	8006c36 <_vfiprintf_r+0x1a2>
 8006b9e:	b1b0      	cbz	r0, 8006bce <_vfiprintf_r+0x13a>
 8006ba0:	9207      	str	r2, [sp, #28]
 8006ba2:	e014      	b.n	8006bce <_vfiprintf_r+0x13a>
 8006ba4:	eba0 0308 	sub.w	r3, r0, r8
 8006ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bac:	4313      	orrs	r3, r2
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	46a2      	mov	sl, r4
 8006bb2:	e7d2      	b.n	8006b5a <_vfiprintf_r+0xc6>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	1d19      	adds	r1, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbb      	ittet	lt
 8006bc0:	425b      	neglt	r3, r3
 8006bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc6:	9307      	strge	r3, [sp, #28]
 8006bc8:	9307      	strlt	r3, [sp, #28]
 8006bca:	bfb8      	it	lt
 8006bcc:	9204      	strlt	r2, [sp, #16]
 8006bce:	7823      	ldrb	r3, [r4, #0]
 8006bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bd2:	d10a      	bne.n	8006bea <_vfiprintf_r+0x156>
 8006bd4:	7863      	ldrb	r3, [r4, #1]
 8006bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd8:	d132      	bne.n	8006c40 <_vfiprintf_r+0x1ac>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	9203      	str	r2, [sp, #12]
 8006be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006be6:	3402      	adds	r4, #2
 8006be8:	9305      	str	r3, [sp, #20]
 8006bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cc0 <_vfiprintf_r+0x22c>
 8006bee:	7821      	ldrb	r1, [r4, #0]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	f7f9 fb04 	bl	8000200 <memchr>
 8006bf8:	b138      	cbz	r0, 8006c0a <_vfiprintf_r+0x176>
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	eba0 000a 	sub.w	r0, r0, sl
 8006c00:	2240      	movs	r2, #64	@ 0x40
 8006c02:	4082      	lsls	r2, r0
 8006c04:	4313      	orrs	r3, r2
 8006c06:	3401      	adds	r4, #1
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0e:	4829      	ldr	r0, [pc, #164]	@ (8006cb4 <_vfiprintf_r+0x220>)
 8006c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c14:	2206      	movs	r2, #6
 8006c16:	f7f9 faf3 	bl	8000200 <memchr>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d03f      	beq.n	8006c9e <_vfiprintf_r+0x20a>
 8006c1e:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <_vfiprintf_r+0x224>)
 8006c20:	bb1b      	cbnz	r3, 8006c6a <_vfiprintf_r+0x1d6>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	3307      	adds	r3, #7
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	443b      	add	r3, r7
 8006c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c34:	e76a      	b.n	8006b0c <_vfiprintf_r+0x78>
 8006c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	e7a8      	b.n	8006b92 <_vfiprintf_r+0xfe>
 8006c40:	2300      	movs	r3, #0
 8006c42:	3401      	adds	r4, #1
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	4619      	mov	r1, r3
 8006c48:	f04f 0c0a 	mov.w	ip, #10
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c52:	3a30      	subs	r2, #48	@ 0x30
 8006c54:	2a09      	cmp	r2, #9
 8006c56:	d903      	bls.n	8006c60 <_vfiprintf_r+0x1cc>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0c6      	beq.n	8006bea <_vfiprintf_r+0x156>
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	e7c4      	b.n	8006bea <_vfiprintf_r+0x156>
 8006c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c64:	4604      	mov	r4, r0
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7f0      	b.n	8006c4c <_vfiprintf_r+0x1b8>
 8006c6a:	ab03      	add	r3, sp, #12
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <_vfiprintf_r+0x228>)
 8006c72:	a904      	add	r1, sp, #16
 8006c74:	4630      	mov	r0, r6
 8006c76:	f3af 8000 	nop.w
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	1c78      	adds	r0, r7, #1
 8006c7e:	d1d6      	bne.n	8006c2e <_vfiprintf_r+0x19a>
 8006c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c82:	07d9      	lsls	r1, r3, #31
 8006c84:	d405      	bmi.n	8006c92 <_vfiprintf_r+0x1fe>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	059a      	lsls	r2, r3, #22
 8006c8a:	d402      	bmi.n	8006c92 <_vfiprintf_r+0x1fe>
 8006c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8e:	f7ff fed7 	bl	8006a40 <__retarget_lock_release_recursive>
 8006c92:	89ab      	ldrh	r3, [r5, #12]
 8006c94:	065b      	lsls	r3, r3, #25
 8006c96:	f53f af1f 	bmi.w	8006ad8 <_vfiprintf_r+0x44>
 8006c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c9c:	e71e      	b.n	8006adc <_vfiprintf_r+0x48>
 8006c9e:	ab03      	add	r3, sp, #12
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <_vfiprintf_r+0x228>)
 8006ca6:	a904      	add	r1, sp, #16
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 f91b 	bl	8006ee4 <_printf_i>
 8006cae:	e7e4      	b.n	8006c7a <_vfiprintf_r+0x1e6>
 8006cb0:	080087d0 	.word	0x080087d0
 8006cb4:	080087da 	.word	0x080087da
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	08006a71 	.word	0x08006a71
 8006cc0:	080087d6 	.word	0x080087d6

08006cc4 <sbrk_aligned>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006d04 <sbrk_aligned+0x40>)
 8006cc8:	460c      	mov	r4, r1
 8006cca:	6831      	ldr	r1, [r6, #0]
 8006ccc:	4605      	mov	r5, r0
 8006cce:	b911      	cbnz	r1, 8006cd6 <sbrk_aligned+0x12>
 8006cd0:	f000 fc4c 	bl	800756c <_sbrk_r>
 8006cd4:	6030      	str	r0, [r6, #0]
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 fc47 	bl	800756c <_sbrk_r>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d103      	bne.n	8006cea <sbrk_aligned+0x26>
 8006ce2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	1cc4      	adds	r4, r0, #3
 8006cec:	f024 0403 	bic.w	r4, r4, #3
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	d0f8      	beq.n	8006ce6 <sbrk_aligned+0x22>
 8006cf4:	1a21      	subs	r1, r4, r0
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 fc38 	bl	800756c <_sbrk_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d1f2      	bne.n	8006ce6 <sbrk_aligned+0x22>
 8006d00:	e7ef      	b.n	8006ce2 <sbrk_aligned+0x1e>
 8006d02:	bf00      	nop
 8006d04:	20040344 	.word	0x20040344

08006d08 <_malloc_r>:
 8006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d0c:	1ccd      	adds	r5, r1, #3
 8006d0e:	f025 0503 	bic.w	r5, r5, #3
 8006d12:	3508      	adds	r5, #8
 8006d14:	2d0c      	cmp	r5, #12
 8006d16:	bf38      	it	cc
 8006d18:	250c      	movcc	r5, #12
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	db01      	blt.n	8006d24 <_malloc_r+0x1c>
 8006d20:	42a9      	cmp	r1, r5
 8006d22:	d904      	bls.n	8006d2e <_malloc_r+0x26>
 8006d24:	230c      	movs	r3, #12
 8006d26:	6033      	str	r3, [r6, #0]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e04 <_malloc_r+0xfc>
 8006d32:	f000 faa1 	bl	8007278 <__malloc_lock>
 8006d36:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3a:	461c      	mov	r4, r3
 8006d3c:	bb44      	cbnz	r4, 8006d90 <_malloc_r+0x88>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ffbf 	bl	8006cc4 <sbrk_aligned>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	4604      	mov	r4, r0
 8006d4a:	d158      	bne.n	8006dfe <_malloc_r+0xf6>
 8006d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006d50:	4627      	mov	r7, r4
 8006d52:	2f00      	cmp	r7, #0
 8006d54:	d143      	bne.n	8006dde <_malloc_r+0xd6>
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	d04b      	beq.n	8006df2 <_malloc_r+0xea>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4630      	mov	r0, r6
 8006d60:	eb04 0903 	add.w	r9, r4, r3
 8006d64:	f000 fc02 	bl	800756c <_sbrk_r>
 8006d68:	4581      	cmp	r9, r0
 8006d6a:	d142      	bne.n	8006df2 <_malloc_r+0xea>
 8006d6c:	6821      	ldr	r1, [r4, #0]
 8006d6e:	1a6d      	subs	r5, r5, r1
 8006d70:	4629      	mov	r1, r5
 8006d72:	4630      	mov	r0, r6
 8006d74:	f7ff ffa6 	bl	8006cc4 <sbrk_aligned>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d03a      	beq.n	8006df2 <_malloc_r+0xea>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	442b      	add	r3, r5
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	f8d8 3000 	ldr.w	r3, [r8]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	bb62      	cbnz	r2, 8006de4 <_malloc_r+0xdc>
 8006d8a:	f8c8 7000 	str.w	r7, [r8]
 8006d8e:	e00f      	b.n	8006db0 <_malloc_r+0xa8>
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	1b52      	subs	r2, r2, r5
 8006d94:	d420      	bmi.n	8006dd8 <_malloc_r+0xd0>
 8006d96:	2a0b      	cmp	r2, #11
 8006d98:	d917      	bls.n	8006dca <_malloc_r+0xc2>
 8006d9a:	1961      	adds	r1, r4, r5
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	6025      	str	r5, [r4, #0]
 8006da0:	bf18      	it	ne
 8006da2:	6059      	strne	r1, [r3, #4]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	bf08      	it	eq
 8006da8:	f8c8 1000 	streq.w	r1, [r8]
 8006dac:	5162      	str	r2, [r4, r5]
 8006dae:	604b      	str	r3, [r1, #4]
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 fa67 	bl	8007284 <__malloc_unlock>
 8006db6:	f104 000b 	add.w	r0, r4, #11
 8006dba:	1d23      	adds	r3, r4, #4
 8006dbc:	f020 0007 	bic.w	r0, r0, #7
 8006dc0:	1ac2      	subs	r2, r0, r3
 8006dc2:	bf1c      	itt	ne
 8006dc4:	1a1b      	subne	r3, r3, r0
 8006dc6:	50a3      	strne	r3, [r4, r2]
 8006dc8:	e7af      	b.n	8006d2a <_malloc_r+0x22>
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	bf0c      	ite	eq
 8006dd0:	f8c8 2000 	streq.w	r2, [r8]
 8006dd4:	605a      	strne	r2, [r3, #4]
 8006dd6:	e7eb      	b.n	8006db0 <_malloc_r+0xa8>
 8006dd8:	4623      	mov	r3, r4
 8006dda:	6864      	ldr	r4, [r4, #4]
 8006ddc:	e7ae      	b.n	8006d3c <_malloc_r+0x34>
 8006dde:	463c      	mov	r4, r7
 8006de0:	687f      	ldr	r7, [r7, #4]
 8006de2:	e7b6      	b.n	8006d52 <_malloc_r+0x4a>
 8006de4:	461a      	mov	r2, r3
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d1fb      	bne.n	8006de4 <_malloc_r+0xdc>
 8006dec:	2300      	movs	r3, #0
 8006dee:	6053      	str	r3, [r2, #4]
 8006df0:	e7de      	b.n	8006db0 <_malloc_r+0xa8>
 8006df2:	230c      	movs	r3, #12
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	4630      	mov	r0, r6
 8006df8:	f000 fa44 	bl	8007284 <__malloc_unlock>
 8006dfc:	e794      	b.n	8006d28 <_malloc_r+0x20>
 8006dfe:	6005      	str	r5, [r0, #0]
 8006e00:	e7d6      	b.n	8006db0 <_malloc_r+0xa8>
 8006e02:	bf00      	nop
 8006e04:	20040348 	.word	0x20040348

08006e08 <_printf_common>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	4698      	mov	r8, r3
 8006e10:	688a      	ldr	r2, [r1, #8]
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bfb8      	it	lt
 8006e1c:	4613      	movlt	r3, r2
 8006e1e:	6033      	str	r3, [r6, #0]
 8006e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e24:	4607      	mov	r7, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b10a      	cbz	r2, 8006e2e <_printf_common+0x26>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	0699      	lsls	r1, r3, #26
 8006e32:	bf42      	ittt	mi
 8006e34:	6833      	ldrmi	r3, [r6, #0]
 8006e36:	3302      	addmi	r3, #2
 8006e38:	6033      	strmi	r3, [r6, #0]
 8006e3a:	6825      	ldr	r5, [r4, #0]
 8006e3c:	f015 0506 	ands.w	r5, r5, #6
 8006e40:	d106      	bne.n	8006e50 <_printf_common+0x48>
 8006e42:	f104 0a19 	add.w	sl, r4, #25
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	6832      	ldr	r2, [r6, #0]
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dc26      	bgt.n	8006e9e <_printf_common+0x96>
 8006e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	3b00      	subs	r3, #0
 8006e58:	bf18      	it	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	0692      	lsls	r2, r2, #26
 8006e5e:	d42b      	bmi.n	8006eb8 <_printf_common+0xb0>
 8006e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e64:	4641      	mov	r1, r8
 8006e66:	4638      	mov	r0, r7
 8006e68:	47c8      	blx	r9
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d01e      	beq.n	8006eac <_printf_common+0xa4>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	6922      	ldr	r2, [r4, #16]
 8006e72:	f003 0306 	and.w	r3, r3, #6
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	bf02      	ittt	eq
 8006e7a:	68e5      	ldreq	r5, [r4, #12]
 8006e7c:	6833      	ldreq	r3, [r6, #0]
 8006e7e:	1aed      	subeq	r5, r5, r3
 8006e80:	68a3      	ldr	r3, [r4, #8]
 8006e82:	bf0c      	ite	eq
 8006e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e88:	2500      	movne	r5, #0
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bfc4      	itt	gt
 8006e8e:	1a9b      	subgt	r3, r3, r2
 8006e90:	18ed      	addgt	r5, r5, r3
 8006e92:	2600      	movs	r6, #0
 8006e94:	341a      	adds	r4, #26
 8006e96:	42b5      	cmp	r5, r6
 8006e98:	d11a      	bne.n	8006ed0 <_printf_common+0xc8>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e008      	b.n	8006eb0 <_printf_common+0xa8>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	47c8      	blx	r9
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d103      	bne.n	8006eb4 <_printf_common+0xac>
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	e7c6      	b.n	8006e46 <_printf_common+0x3e>
 8006eb8:	18e1      	adds	r1, r4, r3
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	2030      	movs	r0, #48	@ 0x30
 8006ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ec2:	4422      	add	r2, r4
 8006ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ecc:	3302      	adds	r3, #2
 8006ece:	e7c7      	b.n	8006e60 <_printf_common+0x58>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c8      	blx	r9
 8006eda:	3001      	adds	r0, #1
 8006edc:	d0e6      	beq.n	8006eac <_printf_common+0xa4>
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7d9      	b.n	8006e96 <_printf_common+0x8e>
	...

08006ee4 <_printf_i>:
 8006ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	7e0f      	ldrb	r7, [r1, #24]
 8006eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006eec:	2f78      	cmp	r7, #120	@ 0x78
 8006eee:	4691      	mov	r9, r2
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	469a      	mov	sl, r3
 8006ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006efa:	d807      	bhi.n	8006f0c <_printf_i+0x28>
 8006efc:	2f62      	cmp	r7, #98	@ 0x62
 8006efe:	d80a      	bhi.n	8006f16 <_printf_i+0x32>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	f000 80d1 	beq.w	80070a8 <_printf_i+0x1c4>
 8006f06:	2f58      	cmp	r7, #88	@ 0x58
 8006f08:	f000 80b8 	beq.w	800707c <_printf_i+0x198>
 8006f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f14:	e03a      	b.n	8006f8c <_printf_i+0xa8>
 8006f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f1a:	2b15      	cmp	r3, #21
 8006f1c:	d8f6      	bhi.n	8006f0c <_printf_i+0x28>
 8006f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f24 <_printf_i+0x40>)
 8006f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f0d 	.word	0x08006f0d
 8006f30:	08006f0d 	.word	0x08006f0d
 8006f34:	08006f0d 	.word	0x08006f0d
 8006f38:	08006f0d 	.word	0x08006f0d
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006f0d 	.word	0x08006f0d
 8006f44:	08006f0d 	.word	0x08006f0d
 8006f48:	08006f0d 	.word	0x08006f0d
 8006f4c:	08006f0d 	.word	0x08006f0d
 8006f50:	0800708f 	.word	0x0800708f
 8006f54:	08006fbb 	.word	0x08006fbb
 8006f58:	08007049 	.word	0x08007049
 8006f5c:	08006f0d 	.word	0x08006f0d
 8006f60:	08006f0d 	.word	0x08006f0d
 8006f64:	080070b1 	.word	0x080070b1
 8006f68:	08006f0d 	.word	0x08006f0d
 8006f6c:	08006fbb 	.word	0x08006fbb
 8006f70:	08006f0d 	.word	0x08006f0d
 8006f74:	08006f0d 	.word	0x08006f0d
 8006f78:	08007051 	.word	0x08007051
 8006f7c:	6833      	ldr	r3, [r6, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6032      	str	r2, [r6, #0]
 8006f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e09c      	b.n	80070ca <_printf_i+0x1e6>
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1d19      	adds	r1, r3, #4
 8006f96:	6031      	str	r1, [r6, #0]
 8006f98:	0606      	lsls	r6, r0, #24
 8006f9a:	d501      	bpl.n	8006fa0 <_printf_i+0xbc>
 8006f9c:	681d      	ldr	r5, [r3, #0]
 8006f9e:	e003      	b.n	8006fa8 <_printf_i+0xc4>
 8006fa0:	0645      	lsls	r5, r0, #25
 8006fa2:	d5fb      	bpl.n	8006f9c <_printf_i+0xb8>
 8006fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	da03      	bge.n	8006fb4 <_printf_i+0xd0>
 8006fac:	232d      	movs	r3, #45	@ 0x2d
 8006fae:	426d      	negs	r5, r5
 8006fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fb4:	4858      	ldr	r0, [pc, #352]	@ (8007118 <_printf_i+0x234>)
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e011      	b.n	8006fde <_printf_i+0xfa>
 8006fba:	6821      	ldr	r1, [r4, #0]
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	0608      	lsls	r0, r1, #24
 8006fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fc4:	d402      	bmi.n	8006fcc <_printf_i+0xe8>
 8006fc6:	0649      	lsls	r1, r1, #25
 8006fc8:	bf48      	it	mi
 8006fca:	b2ad      	uxthmi	r5, r5
 8006fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fce:	4852      	ldr	r0, [pc, #328]	@ (8007118 <_printf_i+0x234>)
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	bf14      	ite	ne
 8006fd4:	230a      	movne	r3, #10
 8006fd6:	2308      	moveq	r3, #8
 8006fd8:	2100      	movs	r1, #0
 8006fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fde:	6866      	ldr	r6, [r4, #4]
 8006fe0:	60a6      	str	r6, [r4, #8]
 8006fe2:	2e00      	cmp	r6, #0
 8006fe4:	db05      	blt.n	8006ff2 <_printf_i+0x10e>
 8006fe6:	6821      	ldr	r1, [r4, #0]
 8006fe8:	432e      	orrs	r6, r5
 8006fea:	f021 0104 	bic.w	r1, r1, #4
 8006fee:	6021      	str	r1, [r4, #0]
 8006ff0:	d04b      	beq.n	800708a <_printf_i+0x1a6>
 8006ff2:	4616      	mov	r6, r2
 8006ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8006ffc:	5dc7      	ldrb	r7, [r0, r7]
 8006ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007002:	462f      	mov	r7, r5
 8007004:	42bb      	cmp	r3, r7
 8007006:	460d      	mov	r5, r1
 8007008:	d9f4      	bls.n	8006ff4 <_printf_i+0x110>
 800700a:	2b08      	cmp	r3, #8
 800700c:	d10b      	bne.n	8007026 <_printf_i+0x142>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	07df      	lsls	r7, r3, #31
 8007012:	d508      	bpl.n	8007026 <_printf_i+0x142>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	6861      	ldr	r1, [r4, #4]
 8007018:	4299      	cmp	r1, r3
 800701a:	bfde      	ittt	le
 800701c:	2330      	movle	r3, #48	@ 0x30
 800701e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007022:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007026:	1b92      	subs	r2, r2, r6
 8007028:	6122      	str	r2, [r4, #16]
 800702a:	f8cd a000 	str.w	sl, [sp]
 800702e:	464b      	mov	r3, r9
 8007030:	aa03      	add	r2, sp, #12
 8007032:	4621      	mov	r1, r4
 8007034:	4640      	mov	r0, r8
 8007036:	f7ff fee7 	bl	8006e08 <_printf_common>
 800703a:	3001      	adds	r0, #1
 800703c:	d14a      	bne.n	80070d4 <_printf_i+0x1f0>
 800703e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007042:	b004      	add	sp, #16
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	f043 0320 	orr.w	r3, r3, #32
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	4832      	ldr	r0, [pc, #200]	@ (800711c <_printf_i+0x238>)
 8007052:	2778      	movs	r7, #120	@ 0x78
 8007054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	6831      	ldr	r1, [r6, #0]
 800705c:	061f      	lsls	r7, r3, #24
 800705e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007062:	d402      	bmi.n	800706a <_printf_i+0x186>
 8007064:	065f      	lsls	r7, r3, #25
 8007066:	bf48      	it	mi
 8007068:	b2ad      	uxthmi	r5, r5
 800706a:	6031      	str	r1, [r6, #0]
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	bf44      	itt	mi
 8007070:	f043 0320 	orrmi.w	r3, r3, #32
 8007074:	6023      	strmi	r3, [r4, #0]
 8007076:	b11d      	cbz	r5, 8007080 <_printf_i+0x19c>
 8007078:	2310      	movs	r3, #16
 800707a:	e7ad      	b.n	8006fd8 <_printf_i+0xf4>
 800707c:	4826      	ldr	r0, [pc, #152]	@ (8007118 <_printf_i+0x234>)
 800707e:	e7e9      	b.n	8007054 <_printf_i+0x170>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	f023 0320 	bic.w	r3, r3, #32
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	e7f6      	b.n	8007078 <_printf_i+0x194>
 800708a:	4616      	mov	r6, r2
 800708c:	e7bd      	b.n	800700a <_printf_i+0x126>
 800708e:	6833      	ldr	r3, [r6, #0]
 8007090:	6825      	ldr	r5, [r4, #0]
 8007092:	6961      	ldr	r1, [r4, #20]
 8007094:	1d18      	adds	r0, r3, #4
 8007096:	6030      	str	r0, [r6, #0]
 8007098:	062e      	lsls	r6, r5, #24
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	d501      	bpl.n	80070a2 <_printf_i+0x1be>
 800709e:	6019      	str	r1, [r3, #0]
 80070a0:	e002      	b.n	80070a8 <_printf_i+0x1c4>
 80070a2:	0668      	lsls	r0, r5, #25
 80070a4:	d5fb      	bpl.n	800709e <_printf_i+0x1ba>
 80070a6:	8019      	strh	r1, [r3, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	4616      	mov	r6, r2
 80070ae:	e7bc      	b.n	800702a <_printf_i+0x146>
 80070b0:	6833      	ldr	r3, [r6, #0]
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	6032      	str	r2, [r6, #0]
 80070b6:	681e      	ldr	r6, [r3, #0]
 80070b8:	6862      	ldr	r2, [r4, #4]
 80070ba:	2100      	movs	r1, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	f7f9 f89f 	bl	8000200 <memchr>
 80070c2:	b108      	cbz	r0, 80070c8 <_printf_i+0x1e4>
 80070c4:	1b80      	subs	r0, r0, r6
 80070c6:	6060      	str	r0, [r4, #4]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	2300      	movs	r3, #0
 80070ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d2:	e7aa      	b.n	800702a <_printf_i+0x146>
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	4632      	mov	r2, r6
 80070d8:	4649      	mov	r1, r9
 80070da:	4640      	mov	r0, r8
 80070dc:	47d0      	blx	sl
 80070de:	3001      	adds	r0, #1
 80070e0:	d0ad      	beq.n	800703e <_printf_i+0x15a>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	079b      	lsls	r3, r3, #30
 80070e6:	d413      	bmi.n	8007110 <_printf_i+0x22c>
 80070e8:	68e0      	ldr	r0, [r4, #12]
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	4298      	cmp	r0, r3
 80070ee:	bfb8      	it	lt
 80070f0:	4618      	movlt	r0, r3
 80070f2:	e7a6      	b.n	8007042 <_printf_i+0x15e>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4632      	mov	r2, r6
 80070f8:	4649      	mov	r1, r9
 80070fa:	4640      	mov	r0, r8
 80070fc:	47d0      	blx	sl
 80070fe:	3001      	adds	r0, #1
 8007100:	d09d      	beq.n	800703e <_printf_i+0x15a>
 8007102:	3501      	adds	r5, #1
 8007104:	68e3      	ldr	r3, [r4, #12]
 8007106:	9903      	ldr	r1, [sp, #12]
 8007108:	1a5b      	subs	r3, r3, r1
 800710a:	42ab      	cmp	r3, r5
 800710c:	dcf2      	bgt.n	80070f4 <_printf_i+0x210>
 800710e:	e7eb      	b.n	80070e8 <_printf_i+0x204>
 8007110:	2500      	movs	r5, #0
 8007112:	f104 0619 	add.w	r6, r4, #25
 8007116:	e7f5      	b.n	8007104 <_printf_i+0x220>
 8007118:	080087e1 	.word	0x080087e1
 800711c:	080087f2 	.word	0x080087f2

08007120 <__sflush_r>:
 8007120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	0716      	lsls	r6, r2, #28
 800712a:	4605      	mov	r5, r0
 800712c:	460c      	mov	r4, r1
 800712e:	d454      	bmi.n	80071da <__sflush_r+0xba>
 8007130:	684b      	ldr	r3, [r1, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dc02      	bgt.n	800713c <__sflush_r+0x1c>
 8007136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd48      	ble.n	80071ce <__sflush_r+0xae>
 800713c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800713e:	2e00      	cmp	r6, #0
 8007140:	d045      	beq.n	80071ce <__sflush_r+0xae>
 8007142:	2300      	movs	r3, #0
 8007144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007148:	682f      	ldr	r7, [r5, #0]
 800714a:	6a21      	ldr	r1, [r4, #32]
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	d030      	beq.n	80071b2 <__sflush_r+0x92>
 8007150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	0759      	lsls	r1, r3, #29
 8007156:	d505      	bpl.n	8007164 <__sflush_r+0x44>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800715e:	b10b      	cbz	r3, 8007164 <__sflush_r+0x44>
 8007160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007168:	6a21      	ldr	r1, [r4, #32]
 800716a:	4628      	mov	r0, r5
 800716c:	47b0      	blx	r6
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	d106      	bne.n	8007182 <__sflush_r+0x62>
 8007174:	6829      	ldr	r1, [r5, #0]
 8007176:	291d      	cmp	r1, #29
 8007178:	d82b      	bhi.n	80071d2 <__sflush_r+0xb2>
 800717a:	4a2a      	ldr	r2, [pc, #168]	@ (8007224 <__sflush_r+0x104>)
 800717c:	40ca      	lsrs	r2, r1
 800717e:	07d6      	lsls	r6, r2, #31
 8007180:	d527      	bpl.n	80071d2 <__sflush_r+0xb2>
 8007182:	2200      	movs	r2, #0
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	04d9      	lsls	r1, r3, #19
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	d504      	bpl.n	8007198 <__sflush_r+0x78>
 800718e:	1c42      	adds	r2, r0, #1
 8007190:	d101      	bne.n	8007196 <__sflush_r+0x76>
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	b903      	cbnz	r3, 8007198 <__sflush_r+0x78>
 8007196:	6560      	str	r0, [r4, #84]	@ 0x54
 8007198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800719a:	602f      	str	r7, [r5, #0]
 800719c:	b1b9      	cbz	r1, 80071ce <__sflush_r+0xae>
 800719e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071a2:	4299      	cmp	r1, r3
 80071a4:	d002      	beq.n	80071ac <__sflush_r+0x8c>
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 fa24 	bl	80075f4 <_free_r>
 80071ac:	2300      	movs	r3, #0
 80071ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80071b0:	e00d      	b.n	80071ce <__sflush_r+0xae>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b0      	blx	r6
 80071b8:	4602      	mov	r2, r0
 80071ba:	1c50      	adds	r0, r2, #1
 80071bc:	d1c9      	bne.n	8007152 <__sflush_r+0x32>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0c6      	beq.n	8007152 <__sflush_r+0x32>
 80071c4:	2b1d      	cmp	r3, #29
 80071c6:	d001      	beq.n	80071cc <__sflush_r+0xac>
 80071c8:	2b16      	cmp	r3, #22
 80071ca:	d11e      	bne.n	800720a <__sflush_r+0xea>
 80071cc:	602f      	str	r7, [r5, #0]
 80071ce:	2000      	movs	r0, #0
 80071d0:	e022      	b.n	8007218 <__sflush_r+0xf8>
 80071d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071d6:	b21b      	sxth	r3, r3
 80071d8:	e01b      	b.n	8007212 <__sflush_r+0xf2>
 80071da:	690f      	ldr	r7, [r1, #16]
 80071dc:	2f00      	cmp	r7, #0
 80071de:	d0f6      	beq.n	80071ce <__sflush_r+0xae>
 80071e0:	0793      	lsls	r3, r2, #30
 80071e2:	680e      	ldr	r6, [r1, #0]
 80071e4:	bf08      	it	eq
 80071e6:	694b      	ldreq	r3, [r1, #20]
 80071e8:	600f      	str	r7, [r1, #0]
 80071ea:	bf18      	it	ne
 80071ec:	2300      	movne	r3, #0
 80071ee:	eba6 0807 	sub.w	r8, r6, r7
 80071f2:	608b      	str	r3, [r1, #8]
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	dde9      	ble.n	80071ce <__sflush_r+0xae>
 80071fa:	6a21      	ldr	r1, [r4, #32]
 80071fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80071fe:	4643      	mov	r3, r8
 8007200:	463a      	mov	r2, r7
 8007202:	4628      	mov	r0, r5
 8007204:	47b0      	blx	r6
 8007206:	2800      	cmp	r0, #0
 8007208:	dc08      	bgt.n	800721c <__sflush_r+0xfc>
 800720a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	4407      	add	r7, r0
 800721e:	eba8 0800 	sub.w	r8, r8, r0
 8007222:	e7e7      	b.n	80071f4 <__sflush_r+0xd4>
 8007224:	20400001 	.word	0x20400001

08007228 <_fflush_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	690b      	ldr	r3, [r1, #16]
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b913      	cbnz	r3, 8007238 <_fflush_r+0x10>
 8007232:	2500      	movs	r5, #0
 8007234:	4628      	mov	r0, r5
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	b118      	cbz	r0, 8007242 <_fflush_r+0x1a>
 800723a:	6a03      	ldr	r3, [r0, #32]
 800723c:	b90b      	cbnz	r3, 8007242 <_fflush_r+0x1a>
 800723e:	f7ff fb83 	bl	8006948 <__sinit>
 8007242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f3      	beq.n	8007232 <_fflush_r+0xa>
 800724a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800724c:	07d0      	lsls	r0, r2, #31
 800724e:	d404      	bmi.n	800725a <_fflush_r+0x32>
 8007250:	0599      	lsls	r1, r3, #22
 8007252:	d402      	bmi.n	800725a <_fflush_r+0x32>
 8007254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007256:	f7ff fbf2 	bl	8006a3e <__retarget_lock_acquire_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	4621      	mov	r1, r4
 800725e:	f7ff ff5f 	bl	8007120 <__sflush_r>
 8007262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007264:	07da      	lsls	r2, r3, #31
 8007266:	4605      	mov	r5, r0
 8007268:	d4e4      	bmi.n	8007234 <_fflush_r+0xc>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	059b      	lsls	r3, r3, #22
 800726e:	d4e1      	bmi.n	8007234 <_fflush_r+0xc>
 8007270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007272:	f7ff fbe5 	bl	8006a40 <__retarget_lock_release_recursive>
 8007276:	e7dd      	b.n	8007234 <_fflush_r+0xc>

08007278 <__malloc_lock>:
 8007278:	4801      	ldr	r0, [pc, #4]	@ (8007280 <__malloc_lock+0x8>)
 800727a:	f7ff bbe0 	b.w	8006a3e <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	20040340 	.word	0x20040340

08007284 <__malloc_unlock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_unlock+0x8>)
 8007286:	f7ff bbdb 	b.w	8006a40 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	20040340 	.word	0x20040340

08007290 <__sread>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	f000 f956 	bl	8007548 <_read_r>
 800729c:	2800      	cmp	r0, #0
 800729e:	bfab      	itete	ge
 80072a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072a2:	89a3      	ldrhlt	r3, [r4, #12]
 80072a4:	181b      	addge	r3, r3, r0
 80072a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072aa:	bfac      	ite	ge
 80072ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072ae:	81a3      	strhlt	r3, [r4, #12]
 80072b0:	bd10      	pop	{r4, pc}

080072b2 <__swrite>:
 80072b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b6:	461f      	mov	r7, r3
 80072b8:	898b      	ldrh	r3, [r1, #12]
 80072ba:	05db      	lsls	r3, r3, #23
 80072bc:	4605      	mov	r5, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	4616      	mov	r6, r2
 80072c2:	d505      	bpl.n	80072d0 <__swrite+0x1e>
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	2302      	movs	r3, #2
 80072ca:	2200      	movs	r2, #0
 80072cc:	f000 f92a 	bl	8007524 <_lseek_r>
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	4632      	mov	r2, r6
 80072de:	463b      	mov	r3, r7
 80072e0:	4628      	mov	r0, r5
 80072e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	f000 b951 	b.w	800758c <_write_r>

080072ea <__sseek>:
 80072ea:	b510      	push	{r4, lr}
 80072ec:	460c      	mov	r4, r1
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 f917 	bl	8007524 <_lseek_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	bf15      	itete	ne
 80072fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007302:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007306:	81a3      	strheq	r3, [r4, #12]
 8007308:	bf18      	it	ne
 800730a:	81a3      	strhne	r3, [r4, #12]
 800730c:	bd10      	pop	{r4, pc}

0800730e <__sclose>:
 800730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007312:	f000 b94d 	b.w	80075b0 <_close_r>

08007316 <__swbuf_r>:
 8007316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007318:	460e      	mov	r6, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4605      	mov	r5, r0
 800731e:	b118      	cbz	r0, 8007328 <__swbuf_r+0x12>
 8007320:	6a03      	ldr	r3, [r0, #32]
 8007322:	b90b      	cbnz	r3, 8007328 <__swbuf_r+0x12>
 8007324:	f7ff fb10 	bl	8006948 <__sinit>
 8007328:	69a3      	ldr	r3, [r4, #24]
 800732a:	60a3      	str	r3, [r4, #8]
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	071a      	lsls	r2, r3, #28
 8007330:	d501      	bpl.n	8007336 <__swbuf_r+0x20>
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	b943      	cbnz	r3, 8007348 <__swbuf_r+0x32>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	f000 f82b 	bl	8007394 <__swsetup_r>
 800733e:	b118      	cbz	r0, 8007348 <__swbuf_r+0x32>
 8007340:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007344:	4638      	mov	r0, r7
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	6922      	ldr	r2, [r4, #16]
 800734c:	1a98      	subs	r0, r3, r2
 800734e:	6963      	ldr	r3, [r4, #20]
 8007350:	b2f6      	uxtb	r6, r6
 8007352:	4283      	cmp	r3, r0
 8007354:	4637      	mov	r7, r6
 8007356:	dc05      	bgt.n	8007364 <__swbuf_r+0x4e>
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff ff64 	bl	8007228 <_fflush_r>
 8007360:	2800      	cmp	r0, #0
 8007362:	d1ed      	bne.n	8007340 <__swbuf_r+0x2a>
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	3b01      	subs	r3, #1
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	6022      	str	r2, [r4, #0]
 8007370:	701e      	strb	r6, [r3, #0]
 8007372:	6962      	ldr	r2, [r4, #20]
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	429a      	cmp	r2, r3
 8007378:	d004      	beq.n	8007384 <__swbuf_r+0x6e>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	07db      	lsls	r3, r3, #31
 800737e:	d5e1      	bpl.n	8007344 <__swbuf_r+0x2e>
 8007380:	2e0a      	cmp	r6, #10
 8007382:	d1df      	bne.n	8007344 <__swbuf_r+0x2e>
 8007384:	4621      	mov	r1, r4
 8007386:	4628      	mov	r0, r5
 8007388:	f7ff ff4e 	bl	8007228 <_fflush_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	d0d9      	beq.n	8007344 <__swbuf_r+0x2e>
 8007390:	e7d6      	b.n	8007340 <__swbuf_r+0x2a>
	...

08007394 <__swsetup_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4b29      	ldr	r3, [pc, #164]	@ (800743c <__swsetup_r+0xa8>)
 8007398:	4605      	mov	r5, r0
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	460c      	mov	r4, r1
 800739e:	b118      	cbz	r0, 80073a8 <__swsetup_r+0x14>
 80073a0:	6a03      	ldr	r3, [r0, #32]
 80073a2:	b90b      	cbnz	r3, 80073a8 <__swsetup_r+0x14>
 80073a4:	f7ff fad0 	bl	8006948 <__sinit>
 80073a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ac:	0719      	lsls	r1, r3, #28
 80073ae:	d422      	bmi.n	80073f6 <__swsetup_r+0x62>
 80073b0:	06da      	lsls	r2, r3, #27
 80073b2:	d407      	bmi.n	80073c4 <__swsetup_r+0x30>
 80073b4:	2209      	movs	r2, #9
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c2:	e033      	b.n	800742c <__swsetup_r+0x98>
 80073c4:	0758      	lsls	r0, r3, #29
 80073c6:	d512      	bpl.n	80073ee <__swsetup_r+0x5a>
 80073c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073ca:	b141      	cbz	r1, 80073de <__swsetup_r+0x4a>
 80073cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073d0:	4299      	cmp	r1, r3
 80073d2:	d002      	beq.n	80073da <__swsetup_r+0x46>
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f90d 	bl	80075f4 <_free_r>
 80073da:	2300      	movs	r3, #0
 80073dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	2300      	movs	r3, #0
 80073e8:	6063      	str	r3, [r4, #4]
 80073ea:	6923      	ldr	r3, [r4, #16]
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f043 0308 	orr.w	r3, r3, #8
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	b94b      	cbnz	r3, 800740e <__swsetup_r+0x7a>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007404:	d003      	beq.n	800740e <__swsetup_r+0x7a>
 8007406:	4621      	mov	r1, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f83f 	bl	800748c <__smakebuf_r>
 800740e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007412:	f013 0201 	ands.w	r2, r3, #1
 8007416:	d00a      	beq.n	800742e <__swsetup_r+0x9a>
 8007418:	2200      	movs	r2, #0
 800741a:	60a2      	str	r2, [r4, #8]
 800741c:	6962      	ldr	r2, [r4, #20]
 800741e:	4252      	negs	r2, r2
 8007420:	61a2      	str	r2, [r4, #24]
 8007422:	6922      	ldr	r2, [r4, #16]
 8007424:	b942      	cbnz	r2, 8007438 <__swsetup_r+0xa4>
 8007426:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800742a:	d1c5      	bne.n	80073b8 <__swsetup_r+0x24>
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	0799      	lsls	r1, r3, #30
 8007430:	bf58      	it	pl
 8007432:	6962      	ldrpl	r2, [r4, #20]
 8007434:	60a2      	str	r2, [r4, #8]
 8007436:	e7f4      	b.n	8007422 <__swsetup_r+0x8e>
 8007438:	2000      	movs	r0, #0
 800743a:	e7f7      	b.n	800742c <__swsetup_r+0x98>
 800743c:	20040018 	.word	0x20040018

08007440 <__swhatbuf_r>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	460c      	mov	r4, r1
 8007444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007448:	2900      	cmp	r1, #0
 800744a:	b096      	sub	sp, #88	@ 0x58
 800744c:	4615      	mov	r5, r2
 800744e:	461e      	mov	r6, r3
 8007450:	da0d      	bge.n	800746e <__swhatbuf_r+0x2e>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007458:	f04f 0100 	mov.w	r1, #0
 800745c:	bf14      	ite	ne
 800745e:	2340      	movne	r3, #64	@ 0x40
 8007460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007464:	2000      	movs	r0, #0
 8007466:	6031      	str	r1, [r6, #0]
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	b016      	add	sp, #88	@ 0x58
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	466a      	mov	r2, sp
 8007470:	f000 f8ae 	bl	80075d0 <_fstat_r>
 8007474:	2800      	cmp	r0, #0
 8007476:	dbec      	blt.n	8007452 <__swhatbuf_r+0x12>
 8007478:	9901      	ldr	r1, [sp, #4]
 800747a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800747e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007482:	4259      	negs	r1, r3
 8007484:	4159      	adcs	r1, r3
 8007486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800748a:	e7eb      	b.n	8007464 <__swhatbuf_r+0x24>

0800748c <__smakebuf_r>:
 800748c:	898b      	ldrh	r3, [r1, #12]
 800748e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007490:	079d      	lsls	r5, r3, #30
 8007492:	4606      	mov	r6, r0
 8007494:	460c      	mov	r4, r1
 8007496:	d507      	bpl.n	80074a8 <__smakebuf_r+0x1c>
 8007498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	2301      	movs	r3, #1
 80074a2:	6163      	str	r3, [r4, #20]
 80074a4:	b003      	add	sp, #12
 80074a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a8:	ab01      	add	r3, sp, #4
 80074aa:	466a      	mov	r2, sp
 80074ac:	f7ff ffc8 	bl	8007440 <__swhatbuf_r>
 80074b0:	9f00      	ldr	r7, [sp, #0]
 80074b2:	4605      	mov	r5, r0
 80074b4:	4639      	mov	r1, r7
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff fc26 	bl	8006d08 <_malloc_r>
 80074bc:	b948      	cbnz	r0, 80074d2 <__smakebuf_r+0x46>
 80074be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c2:	059a      	lsls	r2, r3, #22
 80074c4:	d4ee      	bmi.n	80074a4 <__smakebuf_r+0x18>
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	e7e2      	b.n	8007498 <__smakebuf_r+0xc>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	6020      	str	r0, [r4, #0]
 80074d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074e2:	b15b      	cbz	r3, 80074fc <__smakebuf_r+0x70>
 80074e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e8:	4630      	mov	r0, r6
 80074ea:	f000 f80b 	bl	8007504 <_isatty_r>
 80074ee:	b128      	cbz	r0, 80074fc <__smakebuf_r+0x70>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	431d      	orrs	r5, r3
 8007500:	81a5      	strh	r5, [r4, #12]
 8007502:	e7cf      	b.n	80074a4 <__smakebuf_r+0x18>

08007504 <_isatty_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d06      	ldr	r5, [pc, #24]	@ (8007520 <_isatty_r+0x1c>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fa fb63 	bl	8001bda <_isatty>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_isatty_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_isatty_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	2004034c 	.word	0x2004034c

08007524 <_lseek_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d07      	ldr	r5, [pc, #28]	@ (8007544 <_lseek_r+0x20>)
 8007528:	4604      	mov	r4, r0
 800752a:	4608      	mov	r0, r1
 800752c:	4611      	mov	r1, r2
 800752e:	2200      	movs	r2, #0
 8007530:	602a      	str	r2, [r5, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	f7fa fb5c 	bl	8001bf0 <_lseek>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_lseek_r+0x1e>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_lseek_r+0x1e>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	2004034c 	.word	0x2004034c

08007548 <_read_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	@ (8007568 <_read_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fa faea 	bl	8001b30 <_read>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_read_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_read_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	2004034c 	.word	0x2004034c

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	@ (8007588 <_sbrk_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7fa fb48 	bl	8001c0c <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	2004034c 	.word	0x2004034c

0800758c <_write_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	@ (80075ac <_write_r+0x20>)
 8007590:	4604      	mov	r4, r0
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	2200      	movs	r2, #0
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fa fae5 	bl	8001b6a <_write>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_write_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_write_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	2004034c 	.word	0x2004034c

080075b0 <_close_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d06      	ldr	r5, [pc, #24]	@ (80075cc <_close_r+0x1c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7fa faf1 	bl	8001ba2 <_close>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_close_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_close_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	2004034c 	.word	0x2004034c

080075d0 <_fstat_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_fstat_r+0x20>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	f7fa faec 	bl	8001bba <_fstat>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	d102      	bne.n	80075ec <_fstat_r+0x1c>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	b103      	cbz	r3, 80075ec <_fstat_r+0x1c>
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	2004034c 	.word	0x2004034c

080075f4 <_free_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4605      	mov	r5, r0
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d041      	beq.n	8007680 <_free_r+0x8c>
 80075fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007600:	1f0c      	subs	r4, r1, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	bfb8      	it	lt
 8007606:	18e4      	addlt	r4, r4, r3
 8007608:	f7ff fe36 	bl	8007278 <__malloc_lock>
 800760c:	4a1d      	ldr	r2, [pc, #116]	@ (8007684 <_free_r+0x90>)
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	b933      	cbnz	r3, 8007620 <_free_r+0x2c>
 8007612:	6063      	str	r3, [r4, #4]
 8007614:	6014      	str	r4, [r2, #0]
 8007616:	4628      	mov	r0, r5
 8007618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800761c:	f7ff be32 	b.w	8007284 <__malloc_unlock>
 8007620:	42a3      	cmp	r3, r4
 8007622:	d908      	bls.n	8007636 <_free_r+0x42>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	1821      	adds	r1, r4, r0
 8007628:	428b      	cmp	r3, r1
 800762a:	bf01      	itttt	eq
 800762c:	6819      	ldreq	r1, [r3, #0]
 800762e:	685b      	ldreq	r3, [r3, #4]
 8007630:	1809      	addeq	r1, r1, r0
 8007632:	6021      	streq	r1, [r4, #0]
 8007634:	e7ed      	b.n	8007612 <_free_r+0x1e>
 8007636:	461a      	mov	r2, r3
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b10b      	cbz	r3, 8007640 <_free_r+0x4c>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d9fa      	bls.n	8007636 <_free_r+0x42>
 8007640:	6811      	ldr	r1, [r2, #0]
 8007642:	1850      	adds	r0, r2, r1
 8007644:	42a0      	cmp	r0, r4
 8007646:	d10b      	bne.n	8007660 <_free_r+0x6c>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	4401      	add	r1, r0
 800764c:	1850      	adds	r0, r2, r1
 800764e:	4283      	cmp	r3, r0
 8007650:	6011      	str	r1, [r2, #0]
 8007652:	d1e0      	bne.n	8007616 <_free_r+0x22>
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	6053      	str	r3, [r2, #4]
 800765a:	4408      	add	r0, r1
 800765c:	6010      	str	r0, [r2, #0]
 800765e:	e7da      	b.n	8007616 <_free_r+0x22>
 8007660:	d902      	bls.n	8007668 <_free_r+0x74>
 8007662:	230c      	movs	r3, #12
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	e7d6      	b.n	8007616 <_free_r+0x22>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	1821      	adds	r1, r4, r0
 800766c:	428b      	cmp	r3, r1
 800766e:	bf04      	itt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	bf04      	itt	eq
 8007678:	1809      	addeq	r1, r1, r0
 800767a:	6021      	streq	r1, [r4, #0]
 800767c:	6054      	str	r4, [r2, #4]
 800767e:	e7ca      	b.n	8007616 <_free_r+0x22>
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	20040348 	.word	0x20040348

08007688 <cos>:
 8007688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800768a:	ec53 2b10 	vmov	r2, r3, d0
 800768e:	4826      	ldr	r0, [pc, #152]	@ (8007728 <cos+0xa0>)
 8007690:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007694:	4281      	cmp	r1, r0
 8007696:	d806      	bhi.n	80076a6 <cos+0x1e>
 8007698:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007720 <cos+0x98>
 800769c:	b005      	add	sp, #20
 800769e:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a2:	f000 bd91 	b.w	80081c8 <__kernel_cos>
 80076a6:	4821      	ldr	r0, [pc, #132]	@ (800772c <cos+0xa4>)
 80076a8:	4281      	cmp	r1, r0
 80076aa:	d908      	bls.n	80076be <cos+0x36>
 80076ac:	4610      	mov	r0, r2
 80076ae:	4619      	mov	r1, r3
 80076b0:	f7f8 fdfa 	bl	80002a8 <__aeabi_dsub>
 80076b4:	ec41 0b10 	vmov	d0, r0, r1
 80076b8:	b005      	add	sp, #20
 80076ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80076be:	4668      	mov	r0, sp
 80076c0:	f000 f836 	bl	8007730 <__ieee754_rem_pio2>
 80076c4:	f000 0003 	and.w	r0, r0, #3
 80076c8:	2801      	cmp	r0, #1
 80076ca:	d00b      	beq.n	80076e4 <cos+0x5c>
 80076cc:	2802      	cmp	r0, #2
 80076ce:	d015      	beq.n	80076fc <cos+0x74>
 80076d0:	b9d8      	cbnz	r0, 800770a <cos+0x82>
 80076d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076d6:	ed9d 0b00 	vldr	d0, [sp]
 80076da:	f000 fd75 	bl	80081c8 <__kernel_cos>
 80076de:	ec51 0b10 	vmov	r0, r1, d0
 80076e2:	e7e7      	b.n	80076b4 <cos+0x2c>
 80076e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076e8:	ed9d 0b00 	vldr	d0, [sp]
 80076ec:	f000 fe34 	bl	8008358 <__kernel_sin>
 80076f0:	ec53 2b10 	vmov	r2, r3, d0
 80076f4:	4610      	mov	r0, r2
 80076f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80076fa:	e7db      	b.n	80076b4 <cos+0x2c>
 80076fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007700:	ed9d 0b00 	vldr	d0, [sp]
 8007704:	f000 fd60 	bl	80081c8 <__kernel_cos>
 8007708:	e7f2      	b.n	80076f0 <cos+0x68>
 800770a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800770e:	ed9d 0b00 	vldr	d0, [sp]
 8007712:	2001      	movs	r0, #1
 8007714:	f000 fe20 	bl	8008358 <__kernel_sin>
 8007718:	e7e1      	b.n	80076de <cos+0x56>
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
	...
 8007728:	3fe921fb 	.word	0x3fe921fb
 800772c:	7fefffff 	.word	0x7fefffff

08007730 <__ieee754_rem_pio2>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	ec57 6b10 	vmov	r6, r7, d0
 8007738:	4bc5      	ldr	r3, [pc, #788]	@ (8007a50 <__ieee754_rem_pio2+0x320>)
 800773a:	b08d      	sub	sp, #52	@ 0x34
 800773c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007740:	4598      	cmp	r8, r3
 8007742:	4604      	mov	r4, r0
 8007744:	9704      	str	r7, [sp, #16]
 8007746:	d807      	bhi.n	8007758 <__ieee754_rem_pio2+0x28>
 8007748:	2200      	movs	r2, #0
 800774a:	2300      	movs	r3, #0
 800774c:	ed80 0b00 	vstr	d0, [r0]
 8007750:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007754:	2500      	movs	r5, #0
 8007756:	e028      	b.n	80077aa <__ieee754_rem_pio2+0x7a>
 8007758:	4bbe      	ldr	r3, [pc, #760]	@ (8007a54 <__ieee754_rem_pio2+0x324>)
 800775a:	4598      	cmp	r8, r3
 800775c:	d878      	bhi.n	8007850 <__ieee754_rem_pio2+0x120>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	4dbd      	ldr	r5, [pc, #756]	@ (8007a58 <__ieee754_rem_pio2+0x328>)
 8007762:	2b00      	cmp	r3, #0
 8007764:	4630      	mov	r0, r6
 8007766:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007a18 <__ieee754_rem_pio2+0x2e8>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	4639      	mov	r1, r7
 800776e:	dd38      	ble.n	80077e2 <__ieee754_rem_pio2+0xb2>
 8007770:	f7f8 fd9a 	bl	80002a8 <__aeabi_dsub>
 8007774:	45a8      	cmp	r8, r5
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	d01a      	beq.n	80077b2 <__ieee754_rem_pio2+0x82>
 800777c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x2f0>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f7f8 fd91 	bl	80002a8 <__aeabi_dsub>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4680      	mov	r8, r0
 800778c:	4689      	mov	r9, r1
 800778e:	4630      	mov	r0, r6
 8007790:	4639      	mov	r1, r7
 8007792:	f7f8 fd89 	bl	80002a8 <__aeabi_dsub>
 8007796:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x2f0>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd84 	bl	80002a8 <__aeabi_dsub>
 80077a0:	e9c4 8900 	strd	r8, r9, [r4]
 80077a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077a8:	2501      	movs	r5, #1
 80077aa:	4628      	mov	r0, r5
 80077ac:	b00d      	add	sp, #52	@ 0x34
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8007a28 <__ieee754_rem_pio2+0x2f8>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f7f8 fd76 	bl	80002a8 <__aeabi_dsub>
 80077bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8007a30 <__ieee754_rem_pio2+0x300>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	f7f8 fd6f 	bl	80002a8 <__aeabi_dsub>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4680      	mov	r8, r0
 80077d0:	4689      	mov	r9, r1
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 fd67 	bl	80002a8 <__aeabi_dsub>
 80077da:	a395      	add	r3, pc, #596	@ (adr r3, 8007a30 <__ieee754_rem_pio2+0x300>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	e7dc      	b.n	800779c <__ieee754_rem_pio2+0x6c>
 80077e2:	f7f8 fd63 	bl	80002ac <__adddf3>
 80077e6:	45a8      	cmp	r8, r5
 80077e8:	4606      	mov	r6, r0
 80077ea:	460f      	mov	r7, r1
 80077ec:	d018      	beq.n	8007820 <__ieee754_rem_pio2+0xf0>
 80077ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x2f0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fd5a 	bl	80002ac <__adddf3>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4680      	mov	r8, r0
 80077fe:	4689      	mov	r9, r1
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fd50 	bl	80002a8 <__aeabi_dsub>
 8007808:	a385      	add	r3, pc, #532	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x2f0>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fd4d 	bl	80002ac <__adddf3>
 8007812:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007816:	e9c4 8900 	strd	r8, r9, [r4]
 800781a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800781e:	e7c4      	b.n	80077aa <__ieee754_rem_pio2+0x7a>
 8007820:	a381      	add	r3, pc, #516	@ (adr r3, 8007a28 <__ieee754_rem_pio2+0x2f8>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fd41 	bl	80002ac <__adddf3>
 800782a:	a381      	add	r3, pc, #516	@ (adr r3, 8007a30 <__ieee754_rem_pio2+0x300>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	f7f8 fd3a 	bl	80002ac <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f8 fd30 	bl	80002a8 <__aeabi_dsub>
 8007848:	a379      	add	r3, pc, #484	@ (adr r3, 8007a30 <__ieee754_rem_pio2+0x300>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	e7de      	b.n	800780e <__ieee754_rem_pio2+0xde>
 8007850:	4b82      	ldr	r3, [pc, #520]	@ (8007a5c <__ieee754_rem_pio2+0x32c>)
 8007852:	4598      	cmp	r8, r3
 8007854:	f200 80d1 	bhi.w	80079fa <__ieee754_rem_pio2+0x2ca>
 8007858:	f000 fe38 	bl	80084cc <fabs>
 800785c:	ec57 6b10 	vmov	r6, r7, d0
 8007860:	a375      	add	r3, pc, #468	@ (adr r3, 8007a38 <__ieee754_rem_pio2+0x308>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	4630      	mov	r0, r6
 8007868:	4639      	mov	r1, r7
 800786a:	f7f8 fed5 	bl	8000618 <__aeabi_dmul>
 800786e:	4b7c      	ldr	r3, [pc, #496]	@ (8007a60 <__ieee754_rem_pio2+0x330>)
 8007870:	2200      	movs	r2, #0
 8007872:	f7f8 fd1b 	bl	80002ac <__adddf3>
 8007876:	f7f9 f969 	bl	8000b4c <__aeabi_d2iz>
 800787a:	4605      	mov	r5, r0
 800787c:	f7f8 fe62 	bl	8000544 <__aeabi_i2d>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007888:	a363      	add	r3, pc, #396	@ (adr r3, 8007a18 <__ieee754_rem_pio2+0x2e8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fec3 	bl	8000618 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fd05 	bl	80002a8 <__aeabi_dsub>
 800789e:	a360      	add	r3, pc, #384	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x2f0>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	4682      	mov	sl, r0
 80078a6:	468b      	mov	fp, r1
 80078a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ac:	f7f8 feb4 	bl	8000618 <__aeabi_dmul>
 80078b0:	2d1f      	cmp	r5, #31
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	dc0c      	bgt.n	80078d2 <__ieee754_rem_pio2+0x1a2>
 80078b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007a64 <__ieee754_rem_pio2+0x334>)
 80078ba:	1e6a      	subs	r2, r5, #1
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	4543      	cmp	r3, r8
 80078c2:	d006      	beq.n	80078d2 <__ieee754_rem_pio2+0x1a2>
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	4650      	mov	r0, sl
 80078ca:	4659      	mov	r1, fp
 80078cc:	f7f8 fcec 	bl	80002a8 <__aeabi_dsub>
 80078d0:	e00e      	b.n	80078f0 <__ieee754_rem_pio2+0x1c0>
 80078d2:	463b      	mov	r3, r7
 80078d4:	4632      	mov	r2, r6
 80078d6:	4650      	mov	r0, sl
 80078d8:	4659      	mov	r1, fp
 80078da:	f7f8 fce5 	bl	80002a8 <__aeabi_dsub>
 80078de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	dc02      	bgt.n	80078f6 <__ieee754_rem_pio2+0x1c6>
 80078f0:	e9c4 0100 	strd	r0, r1, [r4]
 80078f4:	e039      	b.n	800796a <__ieee754_rem_pio2+0x23a>
 80078f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8007a28 <__ieee754_rem_pio2+0x2f8>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007900:	f7f8 fe8a 	bl	8000618 <__aeabi_dmul>
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4650      	mov	r0, sl
 800790e:	4659      	mov	r1, fp
 8007910:	f7f8 fcca 	bl	80002a8 <__aeabi_dsub>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	4650      	mov	r0, sl
 800791e:	4659      	mov	r1, fp
 8007920:	f7f8 fcc2 	bl	80002a8 <__aeabi_dsub>
 8007924:	4632      	mov	r2, r6
 8007926:	463b      	mov	r3, r7
 8007928:	f7f8 fcbe 	bl	80002a8 <__aeabi_dsub>
 800792c:	a340      	add	r3, pc, #256	@ (adr r3, 8007a30 <__ieee754_rem_pio2+0x300>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	f7f8 fe6d 	bl	8000618 <__aeabi_dmul>
 800793e:	4632      	mov	r2, r6
 8007940:	463b      	mov	r3, r7
 8007942:	f7f8 fcb1 	bl	80002a8 <__aeabi_dsub>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4606      	mov	r6, r0
 800794c:	460f      	mov	r7, r1
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f8 fca9 	bl	80002a8 <__aeabi_dsub>
 8007956:	9a05      	ldr	r2, [sp, #20]
 8007958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b31      	cmp	r3, #49	@ 0x31
 8007960:	dc20      	bgt.n	80079a4 <__ieee754_rem_pio2+0x274>
 8007962:	e9c4 0100 	strd	r0, r1, [r4]
 8007966:	46c2      	mov	sl, r8
 8007968:	46cb      	mov	fp, r9
 800796a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800796e:	4650      	mov	r0, sl
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 fc97 	bl	80002a8 <__aeabi_dsub>
 800797a:	463b      	mov	r3, r7
 800797c:	4632      	mov	r2, r6
 800797e:	f7f8 fc93 	bl	80002a8 <__aeabi_dsub>
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800798a:	f6bf af0e 	bge.w	80077aa <__ieee754_rem_pio2+0x7a>
 800798e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007992:	6063      	str	r3, [r4, #4]
 8007994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007998:	f8c4 8000 	str.w	r8, [r4]
 800799c:	60a0      	str	r0, [r4, #8]
 800799e:	60e3      	str	r3, [r4, #12]
 80079a0:	426d      	negs	r5, r5
 80079a2:	e702      	b.n	80077aa <__ieee754_rem_pio2+0x7a>
 80079a4:	a326      	add	r3, pc, #152	@ (adr r3, 8007a40 <__ieee754_rem_pio2+0x310>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ae:	f7f8 fe33 	bl	8000618 <__aeabi_dmul>
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fc73 	bl	80002a8 <__aeabi_dsub>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4682      	mov	sl, r0
 80079c8:	468b      	mov	fp, r1
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fc6b 	bl	80002a8 <__aeabi_dsub>
 80079d2:	4632      	mov	r2, r6
 80079d4:	463b      	mov	r3, r7
 80079d6:	f7f8 fc67 	bl	80002a8 <__aeabi_dsub>
 80079da:	a31b      	add	r3, pc, #108	@ (adr r3, 8007a48 <__ieee754_rem_pio2+0x318>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e8:	f7f8 fe16 	bl	8000618 <__aeabi_dmul>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	f7f8 fc5a 	bl	80002a8 <__aeabi_dsub>
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	e764      	b.n	80078c4 <__ieee754_rem_pio2+0x194>
 80079fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007a68 <__ieee754_rem_pio2+0x338>)
 80079fc:	4598      	cmp	r8, r3
 80079fe:	d935      	bls.n	8007a6c <__ieee754_rem_pio2+0x33c>
 8007a00:	4632      	mov	r2, r6
 8007a02:	463b      	mov	r3, r7
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fc4e 	bl	80002a8 <__aeabi_dsub>
 8007a0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a10:	e9c4 0100 	strd	r0, r1, [r4]
 8007a14:	e69e      	b.n	8007754 <__ieee754_rem_pio2+0x24>
 8007a16:	bf00      	nop
 8007a18:	54400000 	.word	0x54400000
 8007a1c:	3ff921fb 	.word	0x3ff921fb
 8007a20:	1a626331 	.word	0x1a626331
 8007a24:	3dd0b461 	.word	0x3dd0b461
 8007a28:	1a600000 	.word	0x1a600000
 8007a2c:	3dd0b461 	.word	0x3dd0b461
 8007a30:	2e037073 	.word	0x2e037073
 8007a34:	3ba3198a 	.word	0x3ba3198a
 8007a38:	6dc9c883 	.word	0x6dc9c883
 8007a3c:	3fe45f30 	.word	0x3fe45f30
 8007a40:	2e000000 	.word	0x2e000000
 8007a44:	3ba3198a 	.word	0x3ba3198a
 8007a48:	252049c1 	.word	0x252049c1
 8007a4c:	397b839a 	.word	0x397b839a
 8007a50:	3fe921fb 	.word	0x3fe921fb
 8007a54:	4002d97b 	.word	0x4002d97b
 8007a58:	3ff921fb 	.word	0x3ff921fb
 8007a5c:	413921fb 	.word	0x413921fb
 8007a60:	3fe00000 	.word	0x3fe00000
 8007a64:	08008804 	.word	0x08008804
 8007a68:	7fefffff 	.word	0x7fefffff
 8007a6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007a70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007a74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007a78:	4630      	mov	r0, r6
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f7f9 f866 	bl	8000b4c <__aeabi_d2iz>
 8007a80:	f7f8 fd60 	bl	8000544 <__aeabi_i2d>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a90:	f7f8 fc0a 	bl	80002a8 <__aeabi_dsub>
 8007a94:	4b22      	ldr	r3, [pc, #136]	@ (8007b20 <__ieee754_rem_pio2+0x3f0>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	f7f8 fdbe 	bl	8000618 <__aeabi_dmul>
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	f7f9 f854 	bl	8000b4c <__aeabi_d2iz>
 8007aa4:	f7f8 fd4e 	bl	8000544 <__aeabi_i2d>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4630      	mov	r0, r6
 8007aae:	4639      	mov	r1, r7
 8007ab0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ab4:	f7f8 fbf8 	bl	80002a8 <__aeabi_dsub>
 8007ab8:	4b19      	ldr	r3, [pc, #100]	@ (8007b20 <__ieee754_rem_pio2+0x3f0>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fdac 	bl	8000618 <__aeabi_dmul>
 8007ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007ac4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007ac8:	f04f 0803 	mov.w	r8, #3
 8007acc:	2600      	movs	r6, #0
 8007ace:	2700      	movs	r7, #0
 8007ad0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	46c2      	mov	sl, r8
 8007ada:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ade:	f7f9 f803 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d1f4      	bne.n	8007ad0 <__ieee754_rem_pio2+0x3a0>
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <__ieee754_rem_pio2+0x3f4>)
 8007ae8:	9301      	str	r3, [sp, #4]
 8007aea:	2302      	movs	r3, #2
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	462a      	mov	r2, r5
 8007af0:	4653      	mov	r3, sl
 8007af2:	4621      	mov	r1, r4
 8007af4:	a806      	add	r0, sp, #24
 8007af6:	f000 f817 	bl	8007b28 <__kernel_rem_pio2>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	4605      	mov	r5, r0
 8007b00:	f6bf ae53 	bge.w	80077aa <__ieee754_rem_pio2+0x7a>
 8007b04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007b08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8007b10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007b1c:	e740      	b.n	80079a0 <__ieee754_rem_pio2+0x270>
 8007b1e:	bf00      	nop
 8007b20:	41700000 	.word	0x41700000
 8007b24:	08008884 	.word	0x08008884

08007b28 <__kernel_rem_pio2>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b02 	vpush	{d8}
 8007b30:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007b34:	f112 0f14 	cmn.w	r2, #20
 8007b38:	9306      	str	r3, [sp, #24]
 8007b3a:	9104      	str	r1, [sp, #16]
 8007b3c:	4bc2      	ldr	r3, [pc, #776]	@ (8007e48 <__kernel_rem_pio2+0x320>)
 8007b3e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007b40:	9008      	str	r0, [sp, #32]
 8007b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007b4e:	bfa8      	it	ge
 8007b50:	1ed4      	subge	r4, r2, #3
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	bfb2      	itee	lt
 8007b56:	2400      	movlt	r4, #0
 8007b58:	2318      	movge	r3, #24
 8007b5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b5e:	f06f 0317 	mvn.w	r3, #23
 8007b62:	fb04 3303 	mla	r3, r4, r3, r3
 8007b66:	eb03 0b02 	add.w	fp, r3, r2
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	9a05      	ldr	r2, [sp, #20]
 8007b6e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8007e38 <__kernel_rem_pio2+0x310>
 8007b72:	eb03 0802 	add.w	r8, r3, r2
 8007b76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007b78:	1aa7      	subs	r7, r4, r2
 8007b7a:	ae20      	add	r6, sp, #128	@ 0x80
 8007b7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b80:	2500      	movs	r5, #0
 8007b82:	4545      	cmp	r5, r8
 8007b84:	dd12      	ble.n	8007bac <__kernel_rem_pio2+0x84>
 8007b86:	9b06      	ldr	r3, [sp, #24]
 8007b88:	aa20      	add	r2, sp, #128	@ 0x80
 8007b8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007b8e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007b92:	2700      	movs	r7, #0
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	429f      	cmp	r7, r3
 8007b98:	dc2e      	bgt.n	8007bf8 <__kernel_rem_pio2+0xd0>
 8007b9a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8007e38 <__kernel_rem_pio2+0x310>
 8007b9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ba6:	46a8      	mov	r8, r5
 8007ba8:	2600      	movs	r6, #0
 8007baa:	e01b      	b.n	8007be4 <__kernel_rem_pio2+0xbc>
 8007bac:	42ef      	cmn	r7, r5
 8007bae:	d407      	bmi.n	8007bc0 <__kernel_rem_pio2+0x98>
 8007bb0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007bb4:	f7f8 fcc6 	bl	8000544 <__aeabi_i2d>
 8007bb8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	e7e0      	b.n	8007b82 <__kernel_rem_pio2+0x5a>
 8007bc0:	ec51 0b18 	vmov	r0, r1, d8
 8007bc4:	e7f8      	b.n	8007bb8 <__kernel_rem_pio2+0x90>
 8007bc6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8007bca:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007bce:	f7f8 fd23 	bl	8000618 <__aeabi_dmul>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bda:	f7f8 fb67 	bl	80002ac <__adddf3>
 8007bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be2:	3601      	adds	r6, #1
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	429e      	cmp	r6, r3
 8007be8:	dded      	ble.n	8007bc6 <__kernel_rem_pio2+0x9e>
 8007bea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bee:	3701      	adds	r7, #1
 8007bf0:	ecaa 7b02 	vstmia	sl!, {d7}
 8007bf4:	3508      	adds	r5, #8
 8007bf6:	e7cd      	b.n	8007b94 <__kernel_rem_pio2+0x6c>
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	f8dd 8000 	ldr.w	r8, [sp]
 8007bfe:	aa0c      	add	r2, sp, #48	@ 0x30
 8007c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c04:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c06:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007c08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c14:	ab98      	add	r3, sp, #608	@ 0x260
 8007c16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c1a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007c1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c22:	ac0c      	add	r4, sp, #48	@ 0x30
 8007c24:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007c26:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007c2a:	46a1      	mov	r9, r4
 8007c2c:	46c2      	mov	sl, r8
 8007c2e:	f1ba 0f00 	cmp.w	sl, #0
 8007c32:	dc77      	bgt.n	8007d24 <__kernel_rem_pio2+0x1fc>
 8007c34:	4658      	mov	r0, fp
 8007c36:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007c3a:	f000 fc51 	bl	80084e0 <scalbn>
 8007c3e:	ec57 6b10 	vmov	r6, r7, d0
 8007c42:	2200      	movs	r2, #0
 8007c44:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f7f8 fce4 	bl	8000618 <__aeabi_dmul>
 8007c50:	ec41 0b10 	vmov	d0, r0, r1
 8007c54:	f000 fcc0 	bl	80085d8 <floor>
 8007c58:	4b7c      	ldr	r3, [pc, #496]	@ (8007e4c <__kernel_rem_pio2+0x324>)
 8007c5a:	ec51 0b10 	vmov	r0, r1, d0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f7f8 fcda 	bl	8000618 <__aeabi_dmul>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 fb1c 	bl	80002a8 <__aeabi_dsub>
 8007c70:	460f      	mov	r7, r1
 8007c72:	4606      	mov	r6, r0
 8007c74:	f7f8 ff6a 	bl	8000b4c <__aeabi_d2iz>
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	f7f8 fc63 	bl	8000544 <__aeabi_i2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 fb0f 	bl	80002a8 <__aeabi_dsub>
 8007c8a:	f1bb 0f00 	cmp.w	fp, #0
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	dd6c      	ble.n	8007d6e <__kernel_rem_pio2+0x246>
 8007c94:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007c98:	ab0c      	add	r3, sp, #48	@ 0x30
 8007c9a:	9d02      	ldr	r5, [sp, #8]
 8007c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ca0:	f1cb 0018 	rsb	r0, fp, #24
 8007ca4:	fa43 f200 	asr.w	r2, r3, r0
 8007ca8:	4415      	add	r5, r2
 8007caa:	4082      	lsls	r2, r0
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	aa0c      	add	r2, sp, #48	@ 0x30
 8007cb0:	9502      	str	r5, [sp, #8]
 8007cb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007cb6:	f1cb 0217 	rsb	r2, fp, #23
 8007cba:	fa43 f902 	asr.w	r9, r3, r2
 8007cbe:	f1b9 0f00 	cmp.w	r9, #0
 8007cc2:	dd64      	ble.n	8007d8e <__kernel_rem_pio2+0x266>
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	3301      	adds	r3, #1
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	4615      	mov	r5, r2
 8007cce:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007cd2:	4590      	cmp	r8, r2
 8007cd4:	f300 80a1 	bgt.w	8007e1a <__kernel_rem_pio2+0x2f2>
 8007cd8:	f1bb 0f00 	cmp.w	fp, #0
 8007cdc:	dd07      	ble.n	8007cee <__kernel_rem_pio2+0x1c6>
 8007cde:	f1bb 0f01 	cmp.w	fp, #1
 8007ce2:	f000 80c1 	beq.w	8007e68 <__kernel_rem_pio2+0x340>
 8007ce6:	f1bb 0f02 	cmp.w	fp, #2
 8007cea:	f000 80c8 	beq.w	8007e7e <__kernel_rem_pio2+0x356>
 8007cee:	f1b9 0f02 	cmp.w	r9, #2
 8007cf2:	d14c      	bne.n	8007d8e <__kernel_rem_pio2+0x266>
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	4955      	ldr	r1, [pc, #340]	@ (8007e50 <__kernel_rem_pio2+0x328>)
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f7f8 fad4 	bl	80002a8 <__aeabi_dsub>
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	d042      	beq.n	8007d8e <__kernel_rem_pio2+0x266>
 8007d08:	4658      	mov	r0, fp
 8007d0a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8007e40 <__kernel_rem_pio2+0x318>
 8007d0e:	f000 fbe7 	bl	80084e0 <scalbn>
 8007d12:	4630      	mov	r0, r6
 8007d14:	4639      	mov	r1, r7
 8007d16:	ec53 2b10 	vmov	r2, r3, d0
 8007d1a:	f7f8 fac5 	bl	80002a8 <__aeabi_dsub>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	e034      	b.n	8007d8e <__kernel_rem_pio2+0x266>
 8007d24:	4b4b      	ldr	r3, [pc, #300]	@ (8007e54 <__kernel_rem_pio2+0x32c>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2c:	f7f8 fc74 	bl	8000618 <__aeabi_dmul>
 8007d30:	f7f8 ff0c 	bl	8000b4c <__aeabi_d2iz>
 8007d34:	f7f8 fc06 	bl	8000544 <__aeabi_i2d>
 8007d38:	4b47      	ldr	r3, [pc, #284]	@ (8007e58 <__kernel_rem_pio2+0x330>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	460f      	mov	r7, r1
 8007d40:	f7f8 fc6a 	bl	8000618 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4c:	f7f8 faac 	bl	80002a8 <__aeabi_dsub>
 8007d50:	f7f8 fefc 	bl	8000b4c <__aeabi_d2iz>
 8007d54:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007d58:	f849 0b04 	str.w	r0, [r9], #4
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7f8 faa4 	bl	80002ac <__adddf3>
 8007d64:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6c:	e75f      	b.n	8007c2e <__kernel_rem_pio2+0x106>
 8007d6e:	d107      	bne.n	8007d80 <__kernel_rem_pio2+0x258>
 8007d70:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007d74:	aa0c      	add	r2, sp, #48	@ 0x30
 8007d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d7a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007d7e:	e79e      	b.n	8007cbe <__kernel_rem_pio2+0x196>
 8007d80:	4b36      	ldr	r3, [pc, #216]	@ (8007e5c <__kernel_rem_pio2+0x334>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	f7f8 fece 	bl	8000b24 <__aeabi_dcmpge>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d143      	bne.n	8007e14 <__kernel_rem_pio2+0x2ec>
 8007d8c:	4681      	mov	r9, r0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4630      	mov	r0, r6
 8007d94:	4639      	mov	r1, r7
 8007d96:	f7f8 fea7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	f000 80c1 	beq.w	8007f22 <__kernel_rem_pio2+0x3fa>
 8007da0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007da4:	2200      	movs	r2, #0
 8007da6:	9900      	ldr	r1, [sp, #0]
 8007da8:	428b      	cmp	r3, r1
 8007daa:	da70      	bge.n	8007e8e <__kernel_rem_pio2+0x366>
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	f000 808b 	beq.w	8007ec8 <__kernel_rem_pio2+0x3a0>
 8007db2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007db6:	ab0c      	add	r3, sp, #48	@ 0x30
 8007db8:	f1ab 0b18 	sub.w	fp, fp, #24
 8007dbc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f6      	beq.n	8007db2 <__kernel_rem_pio2+0x28a>
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8007e40 <__kernel_rem_pio2+0x318>
 8007dca:	f000 fb89 	bl	80084e0 <scalbn>
 8007dce:	f108 0301 	add.w	r3, r8, #1
 8007dd2:	00da      	lsls	r2, r3, #3
 8007dd4:	9205      	str	r2, [sp, #20]
 8007dd6:	ec55 4b10 	vmov	r4, r5, d0
 8007dda:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007ddc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8007e54 <__kernel_rem_pio2+0x32c>
 8007de0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007de4:	4646      	mov	r6, r8
 8007de6:	f04f 0a00 	mov.w	sl, #0
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	f280 80d1 	bge.w	8007f92 <__kernel_rem_pio2+0x46a>
 8007df0:	4644      	mov	r4, r8
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	f2c0 80ff 	blt.w	8007ff6 <__kernel_rem_pio2+0x4ce>
 8007df8:	4b19      	ldr	r3, [pc, #100]	@ (8007e60 <__kernel_rem_pio2+0x338>)
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007dfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e02:	9306      	str	r3, [sp, #24]
 8007e04:	f04f 0a00 	mov.w	sl, #0
 8007e08:	f04f 0b00 	mov.w	fp, #0
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	eba8 0504 	sub.w	r5, r8, r4
 8007e12:	e0e4      	b.n	8007fde <__kernel_rem_pio2+0x4b6>
 8007e14:	f04f 0902 	mov.w	r9, #2
 8007e18:	e754      	b.n	8007cc4 <__kernel_rem_pio2+0x19c>
 8007e1a:	f854 3b04 	ldr.w	r3, [r4], #4
 8007e1e:	bb0d      	cbnz	r5, 8007e64 <__kernel_rem_pio2+0x33c>
 8007e20:	b123      	cbz	r3, 8007e2c <__kernel_rem_pio2+0x304>
 8007e22:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	3201      	adds	r2, #1
 8007e2e:	461d      	mov	r5, r3
 8007e30:	e74f      	b.n	8007cd2 <__kernel_rem_pio2+0x1aa>
 8007e32:	bf00      	nop
 8007e34:	f3af 8000 	nop.w
	...
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	080089d0 	.word	0x080089d0
 8007e4c:	40200000 	.word	0x40200000
 8007e50:	3ff00000 	.word	0x3ff00000
 8007e54:	3e700000 	.word	0x3e700000
 8007e58:	41700000 	.word	0x41700000
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	08008990 	.word	0x08008990
 8007e64:	1acb      	subs	r3, r1, r3
 8007e66:	e7de      	b.n	8007e26 <__kernel_rem_pio2+0x2fe>
 8007e68:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007e6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e76:	a90c      	add	r1, sp, #48	@ 0x30
 8007e78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e7c:	e737      	b.n	8007cee <__kernel_rem_pio2+0x1c6>
 8007e7e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007e82:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e8c:	e7f3      	b.n	8007e76 <__kernel_rem_pio2+0x34e>
 8007e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8007e90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	430a      	orrs	r2, r1
 8007e98:	e785      	b.n	8007da6 <__kernel_rem_pio2+0x27e>
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d0fa      	beq.n	8007e9a <__kernel_rem_pio2+0x372>
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ea6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007eaa:	eb0d 0503 	add.w	r5, sp, r3
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	aa20      	add	r2, sp, #128	@ 0x80
 8007eb2:	4443      	add	r3, r8
 8007eb4:	f108 0701 	add.w	r7, r8, #1
 8007eb8:	3d98      	subs	r5, #152	@ 0x98
 8007eba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007ebe:	4444      	add	r4, r8
 8007ec0:	42bc      	cmp	r4, r7
 8007ec2:	da04      	bge.n	8007ece <__kernel_rem_pio2+0x3a6>
 8007ec4:	46a0      	mov	r8, r4
 8007ec6:	e6a2      	b.n	8007c0e <__kernel_rem_pio2+0xe6>
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eca:	2401      	movs	r4, #1
 8007ecc:	e7e6      	b.n	8007e9c <__kernel_rem_pio2+0x374>
 8007ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007ed4:	f7f8 fb36 	bl	8000544 <__aeabi_i2d>
 8007ed8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8008198 <__kernel_rem_pio2+0x670>
 8007edc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ee0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ee8:	46b2      	mov	sl, r6
 8007eea:	f04f 0800 	mov.w	r8, #0
 8007eee:	9b05      	ldr	r3, [sp, #20]
 8007ef0:	4598      	cmp	r8, r3
 8007ef2:	dd05      	ble.n	8007f00 <__kernel_rem_pio2+0x3d8>
 8007ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ef8:	3701      	adds	r7, #1
 8007efa:	eca5 7b02 	vstmia	r5!, {d7}
 8007efe:	e7df      	b.n	8007ec0 <__kernel_rem_pio2+0x398>
 8007f00:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007f04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f08:	f7f8 fb86 	bl	8000618 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f14:	f7f8 f9ca 	bl	80002ac <__adddf3>
 8007f18:	f108 0801 	add.w	r8, r8, #1
 8007f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f20:	e7e5      	b.n	8007eee <__kernel_rem_pio2+0x3c6>
 8007f22:	f1cb 0000 	rsb	r0, fp, #0
 8007f26:	ec47 6b10 	vmov	d0, r6, r7
 8007f2a:	f000 fad9 	bl	80084e0 <scalbn>
 8007f2e:	ec55 4b10 	vmov	r4, r5, d0
 8007f32:	4b9b      	ldr	r3, [pc, #620]	@ (80081a0 <__kernel_rem_pio2+0x678>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fdf3 	bl	8000b24 <__aeabi_dcmpge>
 8007f3e:	b300      	cbz	r0, 8007f82 <__kernel_rem_pio2+0x45a>
 8007f40:	4b98      	ldr	r3, [pc, #608]	@ (80081a4 <__kernel_rem_pio2+0x67c>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fb66 	bl	8000618 <__aeabi_dmul>
 8007f4c:	f7f8 fdfe 	bl	8000b4c <__aeabi_d2iz>
 8007f50:	4606      	mov	r6, r0
 8007f52:	f7f8 faf7 	bl	8000544 <__aeabi_i2d>
 8007f56:	4b92      	ldr	r3, [pc, #584]	@ (80081a0 <__kernel_rem_pio2+0x678>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f7f8 fb5d 	bl	8000618 <__aeabi_dmul>
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4602      	mov	r2, r0
 8007f62:	4629      	mov	r1, r5
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7f8 f99f 	bl	80002a8 <__aeabi_dsub>
 8007f6a:	f7f8 fdef 	bl	8000b4c <__aeabi_d2iz>
 8007f6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f70:	f10b 0b18 	add.w	fp, fp, #24
 8007f74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007f78:	f108 0801 	add.w	r8, r8, #1
 8007f7c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007f80:	e720      	b.n	8007dc4 <__kernel_rem_pio2+0x29c>
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fde1 	bl	8000b4c <__aeabi_d2iz>
 8007f8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007f90:	e718      	b.n	8007dc4 <__kernel_rem_pio2+0x29c>
 8007f92:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f98:	f7f8 fad4 	bl	8000544 <__aeabi_i2d>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f7f8 fb3a 	bl	8000618 <__aeabi_dmul>
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007faa:	465b      	mov	r3, fp
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 fb32 	bl	8000618 <__aeabi_dmul>
 8007fb4:	3e01      	subs	r6, #1
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	460d      	mov	r5, r1
 8007fba:	e716      	b.n	8007dea <__kernel_rem_pio2+0x2c2>
 8007fbc:	9906      	ldr	r1, [sp, #24]
 8007fbe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007fc2:	9106      	str	r1, [sp, #24]
 8007fc4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007fc8:	f7f8 fb26 	bl	8000618 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 f96a 	bl	80002ac <__adddf3>
 8007fd8:	3601      	adds	r6, #1
 8007fda:	4682      	mov	sl, r0
 8007fdc:	468b      	mov	fp, r1
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	429e      	cmp	r6, r3
 8007fe2:	dc01      	bgt.n	8007fe8 <__kernel_rem_pio2+0x4c0>
 8007fe4:	42ae      	cmp	r6, r5
 8007fe6:	dde9      	ble.n	8007fbc <__kernel_rem_pio2+0x494>
 8007fe8:	ab48      	add	r3, sp, #288	@ 0x120
 8007fea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007fee:	e9c5 ab00 	strd	sl, fp, [r5]
 8007ff2:	3c01      	subs	r4, #1
 8007ff4:	e6fd      	b.n	8007df2 <__kernel_rem_pio2+0x2ca>
 8007ff6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	dc0b      	bgt.n	8008014 <__kernel_rem_pio2+0x4ec>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc35      	bgt.n	800806c <__kernel_rem_pio2+0x544>
 8008000:	d059      	beq.n	80080b6 <__kernel_rem_pio2+0x58e>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	f003 0007 	and.w	r0, r3, #7
 8008008:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800800c:	ecbd 8b02 	vpop	{d8}
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008016:	2b03      	cmp	r3, #3
 8008018:	d1f3      	bne.n	8008002 <__kernel_rem_pio2+0x4da>
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008020:	eb0d 0403 	add.w	r4, sp, r3
 8008024:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008028:	4625      	mov	r5, r4
 800802a:	46c2      	mov	sl, r8
 800802c:	f1ba 0f00 	cmp.w	sl, #0
 8008030:	dc69      	bgt.n	8008106 <__kernel_rem_pio2+0x5de>
 8008032:	4645      	mov	r5, r8
 8008034:	2d01      	cmp	r5, #1
 8008036:	f300 8087 	bgt.w	8008148 <__kernel_rem_pio2+0x620>
 800803a:	9c05      	ldr	r4, [sp, #20]
 800803c:	ab48      	add	r3, sp, #288	@ 0x120
 800803e:	441c      	add	r4, r3
 8008040:	2000      	movs	r0, #0
 8008042:	2100      	movs	r1, #0
 8008044:	f1b8 0f01 	cmp.w	r8, #1
 8008048:	f300 809c 	bgt.w	8008184 <__kernel_rem_pio2+0x65c>
 800804c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8008050:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	f040 80a6 	bne.w	80081a8 <__kernel_rem_pio2+0x680>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	e9c3 5600 	strd	r5, r6, [r3]
 8008062:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008066:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800806a:	e7ca      	b.n	8008002 <__kernel_rem_pio2+0x4da>
 800806c:	9d05      	ldr	r5, [sp, #20]
 800806e:	ab48      	add	r3, sp, #288	@ 0x120
 8008070:	441d      	add	r5, r3
 8008072:	4644      	mov	r4, r8
 8008074:	2000      	movs	r0, #0
 8008076:	2100      	movs	r1, #0
 8008078:	2c00      	cmp	r4, #0
 800807a:	da35      	bge.n	80080e8 <__kernel_rem_pio2+0x5c0>
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	d038      	beq.n	80080f4 <__kernel_rem_pio2+0x5cc>
 8008082:	4602      	mov	r2, r0
 8008084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008088:	9c04      	ldr	r4, [sp, #16]
 800808a:	e9c4 2300 	strd	r2, r3, [r4]
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008096:	f7f8 f907 	bl	80002a8 <__aeabi_dsub>
 800809a:	ad4a      	add	r5, sp, #296	@ 0x128
 800809c:	2401      	movs	r4, #1
 800809e:	45a0      	cmp	r8, r4
 80080a0:	da2b      	bge.n	80080fa <__kernel_rem_pio2+0x5d2>
 80080a2:	f1b9 0f00 	cmp.w	r9, #0
 80080a6:	d002      	beq.n	80080ae <__kernel_rem_pio2+0x586>
 80080a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080ac:	4619      	mov	r1, r3
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080b4:	e7a5      	b.n	8008002 <__kernel_rem_pio2+0x4da>
 80080b6:	9c05      	ldr	r4, [sp, #20]
 80080b8:	ab48      	add	r3, sp, #288	@ 0x120
 80080ba:	441c      	add	r4, r3
 80080bc:	2000      	movs	r0, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	da09      	bge.n	80080da <__kernel_rem_pio2+0x5b2>
 80080c6:	f1b9 0f00 	cmp.w	r9, #0
 80080ca:	d002      	beq.n	80080d2 <__kernel_rem_pio2+0x5aa>
 80080cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080d0:	4619      	mov	r1, r3
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	e9c3 0100 	strd	r0, r1, [r3]
 80080d8:	e793      	b.n	8008002 <__kernel_rem_pio2+0x4da>
 80080da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080de:	f7f8 f8e5 	bl	80002ac <__adddf3>
 80080e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80080e6:	e7eb      	b.n	80080c0 <__kernel_rem_pio2+0x598>
 80080e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80080ec:	f7f8 f8de 	bl	80002ac <__adddf3>
 80080f0:	3c01      	subs	r4, #1
 80080f2:	e7c1      	b.n	8008078 <__kernel_rem_pio2+0x550>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	e7c6      	b.n	8008088 <__kernel_rem_pio2+0x560>
 80080fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80080fe:	f7f8 f8d5 	bl	80002ac <__adddf3>
 8008102:	3401      	adds	r4, #1
 8008104:	e7cb      	b.n	800809e <__kernel_rem_pio2+0x576>
 8008106:	ed35 7b02 	vldmdb	r5!, {d7}
 800810a:	ed8d 7b00 	vstr	d7, [sp]
 800810e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008112:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008116:	ec53 2b17 	vmov	r2, r3, d7
 800811a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800811e:	f7f8 f8c5 	bl	80002ac <__adddf3>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4606      	mov	r6, r0
 8008128:	460f      	mov	r7, r1
 800812a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800812e:	f7f8 f8bb 	bl	80002a8 <__aeabi_dsub>
 8008132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008136:	f7f8 f8b9 	bl	80002ac <__adddf3>
 800813a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800813e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008142:	e9c5 6700 	strd	r6, r7, [r5]
 8008146:	e771      	b.n	800802c <__kernel_rem_pio2+0x504>
 8008148:	ed34 7b02 	vldmdb	r4!, {d7}
 800814c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008150:	ec51 0b17 	vmov	r0, r1, d7
 8008154:	4652      	mov	r2, sl
 8008156:	465b      	mov	r3, fp
 8008158:	ed8d 7b00 	vstr	d7, [sp]
 800815c:	f7f8 f8a6 	bl	80002ac <__adddf3>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4606      	mov	r6, r0
 8008166:	460f      	mov	r7, r1
 8008168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800816c:	f7f8 f89c 	bl	80002a8 <__aeabi_dsub>
 8008170:	4652      	mov	r2, sl
 8008172:	465b      	mov	r3, fp
 8008174:	f7f8 f89a 	bl	80002ac <__adddf3>
 8008178:	3d01      	subs	r5, #1
 800817a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800817e:	e9c4 6700 	strd	r6, r7, [r4]
 8008182:	e757      	b.n	8008034 <__kernel_rem_pio2+0x50c>
 8008184:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008188:	f7f8 f890 	bl	80002ac <__adddf3>
 800818c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008190:	e758      	b.n	8008044 <__kernel_rem_pio2+0x51c>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
	...
 80081a0:	41700000 	.word	0x41700000
 80081a4:	3e700000 	.word	0x3e700000
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	601d      	str	r5, [r3, #0]
 80081ae:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80081b2:	605c      	str	r4, [r3, #4]
 80081b4:	609f      	str	r7, [r3, #8]
 80081b6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80081ba:	60d3      	str	r3, [r2, #12]
 80081bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081c0:	6110      	str	r0, [r2, #16]
 80081c2:	6153      	str	r3, [r2, #20]
 80081c4:	e71d      	b.n	8008002 <__kernel_rem_pio2+0x4da>
 80081c6:	bf00      	nop

080081c8 <__kernel_cos>:
 80081c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	ec57 6b10 	vmov	r6, r7, d0
 80081d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80081d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80081d8:	ed8d 1b00 	vstr	d1, [sp]
 80081dc:	d206      	bcs.n	80081ec <__kernel_cos+0x24>
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	f7f8 fcb3 	bl	8000b4c <__aeabi_d2iz>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f000 8088 	beq.w	80082fc <__kernel_cos+0x134>
 80081ec:	4632      	mov	r2, r6
 80081ee:	463b      	mov	r3, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 fa10 	bl	8000618 <__aeabi_dmul>
 80081f8:	4b51      	ldr	r3, [pc, #324]	@ (8008340 <__kernel_cos+0x178>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	4604      	mov	r4, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	f7f8 fa0a 	bl	8000618 <__aeabi_dmul>
 8008204:	a340      	add	r3, pc, #256	@ (adr r3, 8008308 <__kernel_cos+0x140>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	4682      	mov	sl, r0
 800820c:	468b      	mov	fp, r1
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 fa01 	bl	8000618 <__aeabi_dmul>
 8008216:	a33e      	add	r3, pc, #248	@ (adr r3, 8008310 <__kernel_cos+0x148>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f846 	bl	80002ac <__adddf3>
 8008220:	4622      	mov	r2, r4
 8008222:	462b      	mov	r3, r5
 8008224:	f7f8 f9f8 	bl	8000618 <__aeabi_dmul>
 8008228:	a33b      	add	r3, pc, #236	@ (adr r3, 8008318 <__kernel_cos+0x150>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 f83b 	bl	80002a8 <__aeabi_dsub>
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	f7f8 f9ef 	bl	8000618 <__aeabi_dmul>
 800823a:	a339      	add	r3, pc, #228	@ (adr r3, 8008320 <__kernel_cos+0x158>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f7f8 f834 	bl	80002ac <__adddf3>
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	f7f8 f9e6 	bl	8000618 <__aeabi_dmul>
 800824c:	a336      	add	r3, pc, #216	@ (adr r3, 8008328 <__kernel_cos+0x160>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f829 	bl	80002a8 <__aeabi_dsub>
 8008256:	4622      	mov	r2, r4
 8008258:	462b      	mov	r3, r5
 800825a:	f7f8 f9dd 	bl	8000618 <__aeabi_dmul>
 800825e:	a334      	add	r3, pc, #208	@ (adr r3, 8008330 <__kernel_cos+0x168>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f822 	bl	80002ac <__adddf3>
 8008268:	4622      	mov	r2, r4
 800826a:	462b      	mov	r3, r5
 800826c:	f7f8 f9d4 	bl	8000618 <__aeabi_dmul>
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	f7f8 f9d0 	bl	8000618 <__aeabi_dmul>
 8008278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f8 f9c8 	bl	8000618 <__aeabi_dmul>
 8008288:	460b      	mov	r3, r1
 800828a:	4602      	mov	r2, r0
 800828c:	4629      	mov	r1, r5
 800828e:	4620      	mov	r0, r4
 8008290:	f7f8 f80a 	bl	80002a8 <__aeabi_dsub>
 8008294:	4b2b      	ldr	r3, [pc, #172]	@ (8008344 <__kernel_cos+0x17c>)
 8008296:	4598      	cmp	r8, r3
 8008298:	4606      	mov	r6, r0
 800829a:	460f      	mov	r7, r1
 800829c:	d810      	bhi.n	80082c0 <__kernel_cos+0xf8>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4650      	mov	r0, sl
 80082a4:	4659      	mov	r1, fp
 80082a6:	f7f7 ffff 	bl	80002a8 <__aeabi_dsub>
 80082aa:	460b      	mov	r3, r1
 80082ac:	4926      	ldr	r1, [pc, #152]	@ (8008348 <__kernel_cos+0x180>)
 80082ae:	4602      	mov	r2, r0
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7f7 fff9 	bl	80002a8 <__aeabi_dsub>
 80082b6:	ec41 0b10 	vmov	d0, r0, r1
 80082ba:	b003      	add	sp, #12
 80082bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	4b22      	ldr	r3, [pc, #136]	@ (800834c <__kernel_cos+0x184>)
 80082c2:	4921      	ldr	r1, [pc, #132]	@ (8008348 <__kernel_cos+0x180>)
 80082c4:	4598      	cmp	r8, r3
 80082c6:	bf8c      	ite	hi
 80082c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8008350 <__kernel_cos+0x188>)
 80082ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80082ce:	2400      	movs	r4, #0
 80082d0:	4622      	mov	r2, r4
 80082d2:	462b      	mov	r3, r5
 80082d4:	2000      	movs	r0, #0
 80082d6:	f7f7 ffe7 	bl	80002a8 <__aeabi_dsub>
 80082da:	4622      	mov	r2, r4
 80082dc:	4680      	mov	r8, r0
 80082de:	4689      	mov	r9, r1
 80082e0:	462b      	mov	r3, r5
 80082e2:	4650      	mov	r0, sl
 80082e4:	4659      	mov	r1, fp
 80082e6:	f7f7 ffdf 	bl	80002a8 <__aeabi_dsub>
 80082ea:	4632      	mov	r2, r6
 80082ec:	463b      	mov	r3, r7
 80082ee:	f7f7 ffdb 	bl	80002a8 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	e7da      	b.n	80082b2 <__kernel_cos+0xea>
 80082fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008338 <__kernel_cos+0x170>
 8008300:	e7db      	b.n	80082ba <__kernel_cos+0xf2>
 8008302:	bf00      	nop
 8008304:	f3af 8000 	nop.w
 8008308:	be8838d4 	.word	0xbe8838d4
 800830c:	bda8fae9 	.word	0xbda8fae9
 8008310:	bdb4b1c4 	.word	0xbdb4b1c4
 8008314:	3e21ee9e 	.word	0x3e21ee9e
 8008318:	809c52ad 	.word	0x809c52ad
 800831c:	3e927e4f 	.word	0x3e927e4f
 8008320:	19cb1590 	.word	0x19cb1590
 8008324:	3efa01a0 	.word	0x3efa01a0
 8008328:	16c15177 	.word	0x16c15177
 800832c:	3f56c16c 	.word	0x3f56c16c
 8008330:	5555554c 	.word	0x5555554c
 8008334:	3fa55555 	.word	0x3fa55555
 8008338:	00000000 	.word	0x00000000
 800833c:	3ff00000 	.word	0x3ff00000
 8008340:	3fe00000 	.word	0x3fe00000
 8008344:	3fd33332 	.word	0x3fd33332
 8008348:	3ff00000 	.word	0x3ff00000
 800834c:	3fe90000 	.word	0x3fe90000
 8008350:	3fd20000 	.word	0x3fd20000
 8008354:	00000000 	.word	0x00000000

08008358 <__kernel_sin>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	ec55 4b10 	vmov	r4, r5, d0
 8008360:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008364:	b085      	sub	sp, #20
 8008366:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800836a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800836e:	4680      	mov	r8, r0
 8008370:	d205      	bcs.n	800837e <__kernel_sin+0x26>
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 fbe9 	bl	8000b4c <__aeabi_d2iz>
 800837a:	2800      	cmp	r0, #0
 800837c:	d052      	beq.n	8008424 <__kernel_sin+0xcc>
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	f7f8 f947 	bl	8000618 <__aeabi_dmul>
 800838a:	4682      	mov	sl, r0
 800838c:	468b      	mov	fp, r1
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 f93f 	bl	8000618 <__aeabi_dmul>
 800839a:	a342      	add	r3, pc, #264	@ (adr r3, 80084a4 <__kernel_sin+0x14c>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	e9cd 0100 	strd	r0, r1, [sp]
 80083a4:	4650      	mov	r0, sl
 80083a6:	4659      	mov	r1, fp
 80083a8:	f7f8 f936 	bl	8000618 <__aeabi_dmul>
 80083ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80084ac <__kernel_sin+0x154>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	f7f7 ff79 	bl	80002a8 <__aeabi_dsub>
 80083b6:	4652      	mov	r2, sl
 80083b8:	465b      	mov	r3, fp
 80083ba:	f7f8 f92d 	bl	8000618 <__aeabi_dmul>
 80083be:	a33d      	add	r3, pc, #244	@ (adr r3, 80084b4 <__kernel_sin+0x15c>)
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	f7f7 ff72 	bl	80002ac <__adddf3>
 80083c8:	4652      	mov	r2, sl
 80083ca:	465b      	mov	r3, fp
 80083cc:	f7f8 f924 	bl	8000618 <__aeabi_dmul>
 80083d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80084bc <__kernel_sin+0x164>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff67 	bl	80002a8 <__aeabi_dsub>
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	f7f8 f91b 	bl	8000618 <__aeabi_dmul>
 80083e2:	a338      	add	r3, pc, #224	@ (adr r3, 80084c4 <__kernel_sin+0x16c>)
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f7f7 ff60 	bl	80002ac <__adddf3>
 80083ec:	4606      	mov	r6, r0
 80083ee:	460f      	mov	r7, r1
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	d11b      	bne.n	800842e <__kernel_sin+0xd6>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	f7f8 f90b 	bl	8000618 <__aeabi_dmul>
 8008402:	a325      	add	r3, pc, #148	@ (adr r3, 8008498 <__kernel_sin+0x140>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f7 ff4e 	bl	80002a8 <__aeabi_dsub>
 800840c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008410:	f7f8 f902 	bl	8000618 <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4620      	mov	r0, r4
 800841a:	4629      	mov	r1, r5
 800841c:	f7f7 ff46 	bl	80002ac <__adddf3>
 8008420:	4604      	mov	r4, r0
 8008422:	460d      	mov	r5, r1
 8008424:	ec45 4b10 	vmov	d0, r4, r5
 8008428:	b005      	add	sp, #20
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008432:	4b1b      	ldr	r3, [pc, #108]	@ (80084a0 <__kernel_sin+0x148>)
 8008434:	2200      	movs	r2, #0
 8008436:	f7f8 f8ef 	bl	8000618 <__aeabi_dmul>
 800843a:	4632      	mov	r2, r6
 800843c:	4680      	mov	r8, r0
 800843e:	4689      	mov	r9, r1
 8008440:	463b      	mov	r3, r7
 8008442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008446:	f7f8 f8e7 	bl	8000618 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4640      	mov	r0, r8
 8008450:	4649      	mov	r1, r9
 8008452:	f7f7 ff29 	bl	80002a8 <__aeabi_dsub>
 8008456:	4652      	mov	r2, sl
 8008458:	465b      	mov	r3, fp
 800845a:	f7f8 f8dd 	bl	8000618 <__aeabi_dmul>
 800845e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008462:	f7f7 ff21 	bl	80002a8 <__aeabi_dsub>
 8008466:	a30c      	add	r3, pc, #48	@ (adr r3, 8008498 <__kernel_sin+0x140>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008474:	f7f8 f8d0 	bl	8000618 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 ff14 	bl	80002ac <__adddf3>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f7 ff0c 	bl	80002a8 <__aeabi_dsub>
 8008490:	e7c6      	b.n	8008420 <__kernel_sin+0xc8>
 8008492:	bf00      	nop
 8008494:	f3af 8000 	nop.w
 8008498:	55555549 	.word	0x55555549
 800849c:	3fc55555 	.word	0x3fc55555
 80084a0:	3fe00000 	.word	0x3fe00000
 80084a4:	5acfd57c 	.word	0x5acfd57c
 80084a8:	3de5d93a 	.word	0x3de5d93a
 80084ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80084b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80084b4:	57b1fe7d 	.word	0x57b1fe7d
 80084b8:	3ec71de3 	.word	0x3ec71de3
 80084bc:	19c161d5 	.word	0x19c161d5
 80084c0:	3f2a01a0 	.word	0x3f2a01a0
 80084c4:	1110f8a6 	.word	0x1110f8a6
 80084c8:	3f811111 	.word	0x3f811111

080084cc <fabs>:
 80084cc:	ec51 0b10 	vmov	r0, r1, d0
 80084d0:	4602      	mov	r2, r0
 80084d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084d6:	ec43 2b10 	vmov	d0, r2, r3
 80084da:	4770      	bx	lr
 80084dc:	0000      	movs	r0, r0
	...

080084e0 <scalbn>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	ec55 4b10 	vmov	r4, r5, d0
 80084e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80084ea:	4606      	mov	r6, r0
 80084ec:	462b      	mov	r3, r5
 80084ee:	b991      	cbnz	r1, 8008516 <scalbn+0x36>
 80084f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80084f4:	4323      	orrs	r3, r4
 80084f6:	d03b      	beq.n	8008570 <scalbn+0x90>
 80084f8:	4b33      	ldr	r3, [pc, #204]	@ (80085c8 <scalbn+0xe8>)
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	2200      	movs	r2, #0
 8008500:	f7f8 f88a 	bl	8000618 <__aeabi_dmul>
 8008504:	4b31      	ldr	r3, [pc, #196]	@ (80085cc <scalbn+0xec>)
 8008506:	429e      	cmp	r6, r3
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	da0f      	bge.n	800852e <scalbn+0x4e>
 800850e:	a326      	add	r3, pc, #152	@ (adr r3, 80085a8 <scalbn+0xc8>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	e01e      	b.n	8008554 <scalbn+0x74>
 8008516:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800851a:	4291      	cmp	r1, r2
 800851c:	d10b      	bne.n	8008536 <scalbn+0x56>
 800851e:	4622      	mov	r2, r4
 8008520:	4620      	mov	r0, r4
 8008522:	4629      	mov	r1, r5
 8008524:	f7f7 fec2 	bl	80002ac <__adddf3>
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	e020      	b.n	8008570 <scalbn+0x90>
 800852e:	460b      	mov	r3, r1
 8008530:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008534:	3936      	subs	r1, #54	@ 0x36
 8008536:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800853a:	4296      	cmp	r6, r2
 800853c:	dd0d      	ble.n	800855a <scalbn+0x7a>
 800853e:	2d00      	cmp	r5, #0
 8008540:	a11b      	add	r1, pc, #108	@ (adr r1, 80085b0 <scalbn+0xd0>)
 8008542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008546:	da02      	bge.n	800854e <scalbn+0x6e>
 8008548:	a11b      	add	r1, pc, #108	@ (adr r1, 80085b8 <scalbn+0xd8>)
 800854a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800854e:	a318      	add	r3, pc, #96	@ (adr r3, 80085b0 <scalbn+0xd0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f8 f860 	bl	8000618 <__aeabi_dmul>
 8008558:	e7e6      	b.n	8008528 <scalbn+0x48>
 800855a:	1872      	adds	r2, r6, r1
 800855c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008560:	428a      	cmp	r2, r1
 8008562:	dcec      	bgt.n	800853e <scalbn+0x5e>
 8008564:	2a00      	cmp	r2, #0
 8008566:	dd06      	ble.n	8008576 <scalbn+0x96>
 8008568:	f36f 531e 	bfc	r3, #20, #11
 800856c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008570:	ec45 4b10 	vmov	d0, r4, r5
 8008574:	bd70      	pop	{r4, r5, r6, pc}
 8008576:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800857a:	da08      	bge.n	800858e <scalbn+0xae>
 800857c:	2d00      	cmp	r5, #0
 800857e:	a10a      	add	r1, pc, #40	@ (adr r1, 80085a8 <scalbn+0xc8>)
 8008580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008584:	dac3      	bge.n	800850e <scalbn+0x2e>
 8008586:	a10e      	add	r1, pc, #56	@ (adr r1, 80085c0 <scalbn+0xe0>)
 8008588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858c:	e7bf      	b.n	800850e <scalbn+0x2e>
 800858e:	3236      	adds	r2, #54	@ 0x36
 8008590:	f36f 531e 	bfc	r3, #20, #11
 8008594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008598:	4620      	mov	r0, r4
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <scalbn+0xf0>)
 800859c:	4629      	mov	r1, r5
 800859e:	2200      	movs	r2, #0
 80085a0:	e7d8      	b.n	8008554 <scalbn+0x74>
 80085a2:	bf00      	nop
 80085a4:	f3af 8000 	nop.w
 80085a8:	c2f8f359 	.word	0xc2f8f359
 80085ac:	01a56e1f 	.word	0x01a56e1f
 80085b0:	8800759c 	.word	0x8800759c
 80085b4:	7e37e43c 	.word	0x7e37e43c
 80085b8:	8800759c 	.word	0x8800759c
 80085bc:	fe37e43c 	.word	0xfe37e43c
 80085c0:	c2f8f359 	.word	0xc2f8f359
 80085c4:	81a56e1f 	.word	0x81a56e1f
 80085c8:	43500000 	.word	0x43500000
 80085cc:	ffff3cb0 	.word	0xffff3cb0
 80085d0:	3c900000 	.word	0x3c900000
 80085d4:	00000000 	.word	0x00000000

080085d8 <floor>:
 80085d8:	ec51 0b10 	vmov	r0, r1, d0
 80085dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80085e8:	2e13      	cmp	r6, #19
 80085ea:	460c      	mov	r4, r1
 80085ec:	4605      	mov	r5, r0
 80085ee:	4680      	mov	r8, r0
 80085f0:	dc34      	bgt.n	800865c <floor+0x84>
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	da17      	bge.n	8008626 <floor+0x4e>
 80085f6:	a332      	add	r3, pc, #200	@ (adr r3, 80086c0 <floor+0xe8>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 fe56 	bl	80002ac <__adddf3>
 8008600:	2200      	movs	r2, #0
 8008602:	2300      	movs	r3, #0
 8008604:	f7f8 fa98 	bl	8000b38 <__aeabi_dcmpgt>
 8008608:	b150      	cbz	r0, 8008620 <floor+0x48>
 800860a:	2c00      	cmp	r4, #0
 800860c:	da55      	bge.n	80086ba <floor+0xe2>
 800860e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008612:	432c      	orrs	r4, r5
 8008614:	2500      	movs	r5, #0
 8008616:	42ac      	cmp	r4, r5
 8008618:	4c2b      	ldr	r4, [pc, #172]	@ (80086c8 <floor+0xf0>)
 800861a:	bf08      	it	eq
 800861c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	e023      	b.n	800866e <floor+0x96>
 8008626:	4f29      	ldr	r7, [pc, #164]	@ (80086cc <floor+0xf4>)
 8008628:	4137      	asrs	r7, r6
 800862a:	ea01 0307 	and.w	r3, r1, r7
 800862e:	4303      	orrs	r3, r0
 8008630:	d01d      	beq.n	800866e <floor+0x96>
 8008632:	a323      	add	r3, pc, #140	@ (adr r3, 80086c0 <floor+0xe8>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe38 	bl	80002ac <__adddf3>
 800863c:	2200      	movs	r2, #0
 800863e:	2300      	movs	r3, #0
 8008640:	f7f8 fa7a 	bl	8000b38 <__aeabi_dcmpgt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d0eb      	beq.n	8008620 <floor+0x48>
 8008648:	2c00      	cmp	r4, #0
 800864a:	bfbe      	ittt	lt
 800864c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008650:	4133      	asrlt	r3, r6
 8008652:	18e4      	addlt	r4, r4, r3
 8008654:	ea24 0407 	bic.w	r4, r4, r7
 8008658:	2500      	movs	r5, #0
 800865a:	e7e1      	b.n	8008620 <floor+0x48>
 800865c:	2e33      	cmp	r6, #51	@ 0x33
 800865e:	dd0a      	ble.n	8008676 <floor+0x9e>
 8008660:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008664:	d103      	bne.n	800866e <floor+0x96>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	f7f7 fe1f 	bl	80002ac <__adddf3>
 800866e:	ec41 0b10 	vmov	d0, r0, r1
 8008672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008676:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800867a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800867e:	40df      	lsrs	r7, r3
 8008680:	4207      	tst	r7, r0
 8008682:	d0f4      	beq.n	800866e <floor+0x96>
 8008684:	a30e      	add	r3, pc, #56	@ (adr r3, 80086c0 <floor+0xe8>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fe0f 	bl	80002ac <__adddf3>
 800868e:	2200      	movs	r2, #0
 8008690:	2300      	movs	r3, #0
 8008692:	f7f8 fa51 	bl	8000b38 <__aeabi_dcmpgt>
 8008696:	2800      	cmp	r0, #0
 8008698:	d0c2      	beq.n	8008620 <floor+0x48>
 800869a:	2c00      	cmp	r4, #0
 800869c:	da0a      	bge.n	80086b4 <floor+0xdc>
 800869e:	2e14      	cmp	r6, #20
 80086a0:	d101      	bne.n	80086a6 <floor+0xce>
 80086a2:	3401      	adds	r4, #1
 80086a4:	e006      	b.n	80086b4 <floor+0xdc>
 80086a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80086aa:	2301      	movs	r3, #1
 80086ac:	40b3      	lsls	r3, r6
 80086ae:	441d      	add	r5, r3
 80086b0:	4545      	cmp	r5, r8
 80086b2:	d3f6      	bcc.n	80086a2 <floor+0xca>
 80086b4:	ea25 0507 	bic.w	r5, r5, r7
 80086b8:	e7b2      	b.n	8008620 <floor+0x48>
 80086ba:	2500      	movs	r5, #0
 80086bc:	462c      	mov	r4, r5
 80086be:	e7af      	b.n	8008620 <floor+0x48>
 80086c0:	8800759c 	.word	0x8800759c
 80086c4:	7e37e43c 	.word	0x7e37e43c
 80086c8:	bff00000 	.word	0xbff00000
 80086cc:	000fffff 	.word	0x000fffff

080086d0 <_init>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr

080086dc <_fini>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr
