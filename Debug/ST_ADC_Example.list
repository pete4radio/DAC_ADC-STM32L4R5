
ST_ADC_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d98  08006d98  00007d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  08006da8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20040068  08006e10  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040350  08006e10  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013160  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0001b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c14  00000000  00000000  0001ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7ab  00000000  00000000  0001f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2a  00000000  00000000  0004bdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ecc  00000000  00000000  0005dc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  00170b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  001754a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040068 	.word	0x20040068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006c78 	.word	0x08006c78

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004006c 	.word	0x2004006c
 80001fc:	08006c78 	.word	0x08006c78

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
	{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 10);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	230a      	movs	r3, #10
 80005d8:	2201      	movs	r2, #1
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <__io_putchar+0x24>)
 80005dc:	f004 fd74 	bl	80050c8 <HAL_UART_Transmit>
	HAL_Delay(10);		// Slow Printing
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fef1 	bl	80013c8 <HAL_Delay>
	return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
	}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20040160 	.word	0x20040160

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fe71 	bl	80012de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f84a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f99c 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 f970 	bl	80008e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000608:	f000 f88a 	bl	8000720 <MX_ADC1_Init>
  MX_DAC1_Init();
 800060c:	f000 f8ec 	bl	80007e8 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000610:	f000 f91e 	bl	8000850 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // https://wiki.st.com/stm32mcu/wiki/Getting_started_with_ADC#Configure_ADC
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000614:	2110      	movs	r1, #16
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <main+0x88>)
 8000618:	f002 fa7b 	bl	8002b12 <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800061c:	217f      	movs	r1, #127	@ 0x7f
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <main+0x8c>)
 8000620:	f002 f8e4 	bl	80027ec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 8000624:	2201      	movs	r2, #1
 8000626:	4917      	ldr	r1, [pc, #92]	@ (8000684 <main+0x90>)
 8000628:	4815      	ldr	r0, [pc, #84]	@ (8000680 <main+0x8c>)
 800062a:	f001 fa9b 	bl	8001b64 <HAL_ADC_Start_DMA>
  while (1)
  	{
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  	  printf("Hello Analog World!  ");
 800062e:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0x94>)
 8000630:	f005 fcb8 	bl	8005fa4 <iprintf>
	  	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <main+0x98>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0x88>)
 800063e:	f002 faba 	bl	8002bb6 <HAL_DAC_SetValue>
	  	  value_dac++;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <main+0x98>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a10      	ldr	r2, [pc, #64]	@ (800068c <main+0x98>)
 800064a:	6013      	str	r3, [r2, #0]
	  	  if(value_dac>4095) {
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <main+0x98>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000654:	d302      	bcc.n	800065c <main+0x68>
	  	    value_dac=0;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <main+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
	  	  	}
	  	  HAL_ADC_Start(&hadc1);
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <main+0x8c>)
 800065e:	f001 fa1d 	bl	8001a9c <HAL_ADC_Start>
	  	  HAL_Delay(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f000 feb0 	bl	80013c8 <HAL_Delay>
	 //I google-searched "printf how to print uint32_t?"
	  	  printf("DAC1 OUT2 PA5 set to uint32_t: %" PRIu32 " and ADC1 IN6 PA1 reads uint32_t: %" PRIu32 "\n\r", value_dac, value_adc);
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <main+0x98>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <main+0x90>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <main+0x9c>)
 8000674:	f005 fc96 	bl	8005fa4 <iprintf>
	  	  printf("Hello Analog World!  ");
 8000678:	e7d9      	b.n	800062e <main+0x3a>
 800067a:	bf00      	nop
 800067c:	2004014c 	.word	0x2004014c
 8000680:	20040084 	.word	0x20040084
 8000684:	200401f4 	.word	0x200401f4
 8000688:	08006c90 	.word	0x08006c90
 800068c:	200401f8 	.word	0x200401f8
 8000690:	08006ca8 	.word	0x08006ca8

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	@ 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fc90 	bl	8005fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	f003 f811 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 fb58 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c8:	2310      	movs	r3, #16
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f8b1 	bl	8003848 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fb44 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fcb7 	bl	800407c <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000714:	f000 fb30 	bl	8000d78 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	@ 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000738:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <MX_ADC1_Init+0xc0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800073c:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800073e:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000758:	2204      	movs	r2, #4
 800075a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000764:	2201      	movs	r2, #1
 8000766:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	4810      	ldr	r0, [pc, #64]	@ (80007dc <MX_ADC1_Init+0xbc>)
 800079a:	f001 f839 	bl	8001810 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007a4:	f000 fae8 	bl	8000d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_ADC1_Init+0xc4>)
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2306      	movs	r3, #6
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007b0:	2305      	movs	r3, #5
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b4:	237f      	movs	r3, #127	@ 0x7f
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b8:	2304      	movs	r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_ADC1_Init+0xbc>)
 80007c6:	f001 fa6f 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007d0:	f000 fad2 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20040084 	.word	0x20040084
 80007e0:	50040000 	.word	0x50040000
 80007e4:	19200040 	.word	0x19200040

080007e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2228      	movs	r2, #40	@ 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fbe7 	bl	8005fc8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_DAC1_Init+0x60>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_DAC1_Init+0x64>)
 80007fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	@ (8000848 <MX_DAC1_Init+0x60>)
 8000802:	f002 f964 	bl	8002ace <HAL_DAC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800080c:	f000 fab4 	bl	8000d78 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2210      	movs	r2, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <MX_DAC1_Init+0x60>)
 8000830:	f002 f9e6 	bl	8002c00 <HAL_DAC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800083a:	f000 fa9d 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	@ 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2004014c 	.word	0x2004014c
 800084c:	40007400 	.word	0x40007400

08000850 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <MX_LPUART1_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800089a:	f004 fbc5 	bl	8005028 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 fa68 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	f005 f9ee 	bl	8005c8c <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 fa5f 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008be:	f005 fa23 	bl	8005d08 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 fa56 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	f005 f9a4 	bl	8005c1a <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 fa4e 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20040160 	.word	0x20040160
 80008e4:	40008000 	.word	0x40008000

080008e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_DMA_Init+0x50>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f2:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <MX_DMA_Init+0x50>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_DMA_Init+0x50>)
 80008fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_DMA_Init+0x50>)
 8000908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090a:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <MX_DMA_Init+0x50>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6493      	str	r3, [r2, #72]	@ 0x48
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_DMA_Init+0x50>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	200b      	movs	r0, #11
 8000924:	f002 f89d 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000928:	200b      	movs	r0, #11
 800092a:	f002 f8b6 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4bb1      	ldr	r3, [pc, #708]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4ab0      	ldr	r2, [pc, #704]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4bae      	ldr	r3, [pc, #696]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	623b      	str	r3, [r7, #32]
 8000968:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4bab      	ldr	r3, [pc, #684]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4aaa      	ldr	r2, [pc, #680]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4ba8      	ldr	r3, [pc, #672]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4ba5      	ldr	r3, [pc, #660]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4aa4      	ldr	r2, [pc, #656]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4ba2      	ldr	r3, [pc, #648]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4b9f      	ldr	r3, [pc, #636]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a9e      	ldr	r2, [pc, #632]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b9c      	ldr	r3, [pc, #624]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b99      	ldr	r3, [pc, #612]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a98      	ldr	r2, [pc, #608]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b96      	ldr	r3, [pc, #600]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b93      	ldr	r3, [pc, #588]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a92      	ldr	r2, [pc, #584]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b90      	ldr	r3, [pc, #576]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4b8d      	ldr	r3, [pc, #564]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a8c      	ldr	r2, [pc, #560]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b8a      	ldr	r3, [pc, #552]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fa:	4b87      	ldr	r3, [pc, #540]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a86      	ldr	r2, [pc, #536]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b84      	ldr	r3, [pc, #528]	@ (8000c18 <MX_GPIO_Init+0x2dc>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a12:	f002 ff09 	bl	8003828 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a16:	230c      	movs	r3, #12
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a26:	230d      	movs	r3, #13
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	487a      	ldr	r0, [pc, #488]	@ (8000c1c <MX_GPIO_Init+0x2e0>)
 8000a32:	f002 fca3 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a46:	2304      	movs	r3, #4
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4873      	ldr	r0, [pc, #460]	@ (8000c20 <MX_GPIO_Init+0x2e4>)
 8000a52:	f002 fc93 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a56:	2380      	movs	r3, #128	@ 0x80
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a66:	230d      	movs	r3, #13
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	486b      	ldr	r0, [pc, #428]	@ (8000c20 <MX_GPIO_Init+0x2e4>)
 8000a72:	f002 fc83 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a86:	2301      	movs	r3, #1
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a94:	f002 fc72 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000a98:	23d0      	movs	r3, #208	@ 0xd0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f002 fc61 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aba:	2301      	movs	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aca:	2302      	movs	r3, #2
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4853      	ldr	r0, [pc, #332]	@ (8000c24 <MX_GPIO_Init+0x2e8>)
 8000ad6:	f002 fc51 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ada:	2344      	movs	r3, #68	@ 0x44
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	484d      	ldr	r0, [pc, #308]	@ (8000c24 <MX_GPIO_Init+0x2e8>)
 8000aee:	f002 fc45 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000af2:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4843      	ldr	r0, [pc, #268]	@ (8000c1c <MX_GPIO_Init+0x2e0>)
 8000b10:	f002 fc34 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b14:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000b26:	2303      	movs	r3, #3
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	483a      	ldr	r0, [pc, #232]	@ (8000c1c <MX_GPIO_Init+0x2e0>)
 8000b32:	f002 fc23 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4834      	ldr	r0, [pc, #208]	@ (8000c24 <MX_GPIO_Init+0x2e8>)
 8000b54:	f002 fc12 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b58:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b6a:	230d      	movs	r3, #13
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	482b      	ldr	r0, [pc, #172]	@ (8000c24 <MX_GPIO_Init+0x2e8>)
 8000b76:	f002 fc01 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b8c:	230e      	movs	r3, #14
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_GPIO_Init+0x2e8>)
 8000b98:	f002 fbf0 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <MX_GPIO_Init+0x2ec>)
 8000bba:	f002 fbdf 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bbe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_GPIO_Init+0x2ec>)
 8000bdc:	f002 fbce 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000be0:	2340      	movs	r3, #64	@ 0x40
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bf0:	230d      	movs	r3, #13
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <MX_GPIO_Init+0x2f0>)
 8000bfc:	f002 fbbe 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c10:	2302      	movs	r3, #2
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e00c      	b.n	8000c30 <MX_GPIO_Init+0x2f4>
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48001000 	.word	0x48001000
 8000c20:	48001400 	.word	0x48001400
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000c00 	.word	0x48000c00
 8000c2c:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	484c      	ldr	r0, [pc, #304]	@ (8000d68 <MX_GPIO_Init+0x42c>)
 8000c38:	f002 fba0 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c3c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4843      	ldr	r0, [pc, #268]	@ (8000d68 <MX_GPIO_Init+0x42c>)
 8000c5a:	f002 fb8f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000c5e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c70:	230a      	movs	r3, #10
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7e:	f002 fb7d 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f002 fb6f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cae:	2309      	movs	r3, #9
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482c      	ldr	r0, [pc, #176]	@ (8000d6c <MX_GPIO_Init+0x430>)
 8000cba:	f002 fb5f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <MX_GPIO_Init+0x430>)
 8000cda:	f002 fb4f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cde:	2378      	movs	r3, #120	@ 0x78
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481c      	ldr	r0, [pc, #112]	@ (8000d6c <MX_GPIO_Init+0x430>)
 8000cfa:	f002 fb3f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cfe:	2338      	movs	r3, #56	@ 0x38
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4815      	ldr	r0, [pc, #84]	@ (8000d70 <MX_GPIO_Init+0x434>)
 8000d1a:	f002 fb2f 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d24:	2312      	movs	r3, #18
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d30:	2304      	movs	r3, #4
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <MX_GPIO_Init+0x434>)
 8000d3c:	f002 fb1e 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d50:	2302      	movs	r3, #2
 8000d52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <MX_GPIO_Init+0x438>)
 8000d5c:	f002 fb0e 	bl	800337c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	@ 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000c00 	.word	0x48000c00
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48001000 	.word	0x48001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0b0      	sub	sp, #192	@ 0xc0
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2294      	movs	r2, #148	@ 0x94
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 f8eb 	bl	8005fc8 <memset>
  if(hadc->Instance==ADC1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a58      	ldr	r2, [pc, #352]	@ (8000f58 <HAL_ADC_MspInit+0x18c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	f040 80a9 	bne.w	8000f50 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fbe2 	bl	80045f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000e3a:	f7ff ff9d 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e3e:	4b47      	ldr	r3, [pc, #284]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a46      	ldr	r2, [pc, #280]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b44      	ldr	r3, [pc, #272]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	4b41      	ldr	r3, [pc, #260]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	4a40      	ldr	r2, [pc, #256]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e62:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a34      	ldr	r2, [pc, #208]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b32      	ldr	r3, [pc, #200]	@ (8000f5c <HAL_ADC_MspInit+0x190>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e9e:	233f      	movs	r3, #63	@ 0x3f
 8000ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	482a      	ldr	r0, [pc, #168]	@ (8000f60 <HAL_ADC_MspInit+0x194>)
 8000eb8:	f002 fa60 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f002 fa50 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481b      	ldr	r0, [pc, #108]	@ (8000f64 <HAL_ADC_MspInit+0x198>)
 8000ef6:	f002 fa41 	bl	800337c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000efc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <HAL_ADC_MspInit+0x1a0>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f02:	2205      	movs	r2, #5
 8000f04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f14:	2280      	movs	r2, #128	@ 0x80
 8000f16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f36:	f001 ffaf 	bl	8002e98 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000f40:	f7ff ff1a 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f48:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f4a:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_ADC_MspInit+0x19c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f50:	bf00      	nop
 8000f52:	37c0      	adds	r7, #192	@ 0xc0
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	50040000 	.word	0x50040000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000400 	.word	0x48000400
 8000f68:	200400ec 	.word	0x200400ec
 8000f6c:	40020008 	.word	0x40020008

08000f70 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <HAL_DAC_MspInit+0x74>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d124      	bne.n	8000fdc <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_DAC_MspInit+0x78>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f002 f9d0 	bl	800337c <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40007400 	.word	0x40007400
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0ae      	sub	sp, #184	@ 0xb8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2294      	movs	r2, #148	@ 0x94
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f004 ffdb 	bl	8005fc8 <memset>
  if(huart->Instance==LPUART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a22      	ldr	r2, [pc, #136]	@ (80010a0 <HAL_UART_MspInit+0xb4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d13d      	bne.n	8001098 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800101c:	2320      	movs	r3, #32
 800101e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fae5 	bl	80045f8 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fea0 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 800103a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103c:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 8001046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 8001056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_UART_MspInit+0xb8>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001068:	f002 fbde 	bl	8003828 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800106c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001086:	2308      	movs	r3, #8
 8001088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <HAL_UART_MspInit+0xbc>)
 8001094:	f002 f972 	bl	800337c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001098:	bf00      	nop
 800109a:	37b8      	adds	r7, #184	@ 0xb8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40008000 	.word	0x40008000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48001800 	.word	0x48001800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f941 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <DMA1_Channel1_IRQHandler+0x10>)
 8001112:	f001 ffe4 	bl	80030de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200400ec 	.word	0x200400ec

08001120 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
  }

  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e009      	b.n	8001180 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fa29 	bl	80005cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf1      	blt.n	800116c <_write+0x12>
  }
  return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_close>:

int _close(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ba:	605a      	str	r2, [r3, #4]
  return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_isatty>:

int _isatty(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f004 fed4 	bl	8005fd8 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200a0000 	.word	0x200a0000
 800125c:	00000400 	.word	0x00000400
 8001260:	200401fc 	.word	0x200401fc
 8001264:	20040350 	.word	0x20040350

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 fe93 	bl	8005fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff f999 	bl	80005f4 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012c8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80012cc:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 80012d0:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 80012d4:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 80012d8:	20040350 	.word	0x20040350

080012dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_IRQHandler>

080012de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f001 fbaf 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f80e 	bl	8001310 <HAL_InitTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e001      	b.n	8001304 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001300:	f7ff fd40 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_InitTick+0x6c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d023      	beq.n	800136c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_InitTick+0x70>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_InitTick+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fbbb 	bl	8002ab6 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10f      	bne.n	8001366 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d809      	bhi.n	8001360 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001354:	f001 fb85 	bl	8002a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001358:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_InitTick+0x74>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e007      	b.n	8001370 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e004      	b.n	8001370 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e001      	b.n	8001370 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20040008 	.word	0x20040008
 8001380:	20040000 	.word	0x20040000
 8001384:	20040004 	.word	0x20040004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20040008 	.word	0x20040008
 80013ac:	20040200 	.word	0x20040200

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20040200 	.word	0x20040200

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20040008 	.word	0x20040008

08001410 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3360      	adds	r3, #96	@ 0x60
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <LL_ADC_SetOffset+0x44>)
 800149a:	4013      	ands	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	03fff000 	.word	0x03fff000

080014c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3360      	adds	r3, #96	@ 0x60
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3360      	adds	r3, #96	@ 0x60
 80014fc:	461a      	mov	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	615a      	str	r2, [r3, #20]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800156e:	b480      	push	{r7}
 8001570:	b087      	sub	sp, #28
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3330      	adds	r3, #48	@ 0x30
 800157e:	461a      	mov	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	211f      	movs	r1, #31
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	401a      	ands	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0e9b      	lsrs	r3, r3, #26
 80015a6:	f003 011f 	and.w	r1, r3, #31
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	431a      	orrs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3314      	adds	r3, #20
 80015d6:	461a      	mov	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0e5b      	lsrs	r3, r3, #25
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0d1b      	lsrs	r3, r3, #20
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	2107      	movs	r1, #7
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	0d1b      	lsrs	r3, r3, #20
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	43db      	mvns	r3, r3
 8001636:	401a      	ands	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0318 	and.w	r3, r3, #24
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001640:	40d9      	lsrs	r1, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	400b      	ands	r3, r1
 8001646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164a:	431a      	orrs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	0007ffff 	.word	0x0007ffff

08001664 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6093      	str	r3, [r2, #8]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <LL_ADC_IsEnabled+0x18>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <LL_ADC_IsEnabled+0x1a>
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d101      	bne.n	800178e <LL_ADC_IsDisableOngoing+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsDisableOngoing+0x1a>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017b0:	f043 0204 	orr.w	r2, r3, #4
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d101      	bne.n	80017dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d101      	bne.n	8001802 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e129      	b.n	8001a7e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fac7 	bl	8000dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff19 	bl	8001688 <LL_ADC_IsDeepPowerDownEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff feff 	bl	8001664 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff34 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff18 	bl	80016b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001880:	4b81      	ldr	r3, [pc, #516]	@ (8001a88 <HAL_ADC_Init+0x278>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	4a81      	ldr	r2, [pc, #516]	@ (8001a8c <HAL_ADC_Init+0x27c>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	3301      	adds	r3, #1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001894:	e002      	b.n	800189c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3b01      	subs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff16 	bl	80016d8 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff76 	bl	80017c4 <LL_ADC_REG_IsConversionOngoing>
 80018d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 80c2 	bne.w	8001a6c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 80be 	bne.w	8001a6c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff23 	bl	8001750 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10b      	bne.n	8001928 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001910:	485f      	ldr	r0, [pc, #380]	@ (8001a90 <HAL_ADC_Init+0x280>)
 8001912:	f7ff ff1d 	bl	8001750 <LL_ADC_IsEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	485c      	ldr	r0, [pc, #368]	@ (8001a94 <HAL_ADC_Init+0x284>)
 8001924:	f7ff fd74 	bl	8001410 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e5b      	ldrb	r3, [r3, #25]
 800192c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001932:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001938:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800193e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001946:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	045b      	lsls	r3, r3, #17
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <HAL_ADC_Init+0x288>)
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	430b      	orrs	r3, r1
 8001992:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff26 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 800199e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d140      	bne.n	8001a28 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13d      	bne.n	8001a28 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019ce:	f023 0306 	bic.w	r3, r3, #6
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	430b      	orrs	r3, r1
 80019da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d118      	bne.n	8001a18 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	e007      	b.n	8001a28 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10c      	bne.n	8001a4a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f023 010f 	bic.w	r1, r3, #15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a48:	e007      	b.n	8001a5a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020f 	bic.w	r2, r2, #15
 8001a58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a6a:	e007      	b.n	8001a7c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	f043 0210 	orr.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20040000 	.word	0x20040000
 8001a8c:	053e2d63 	.word	0x053e2d63
 8001a90:	50040000 	.word	0x50040000
 8001a94:	50040300 	.word	0x50040300
 8001a98:	fff0c007 	.word	0xfff0c007

08001a9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fe8b 	bl	80017c4 <LL_ADC_REG_IsConversionOngoing>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d14f      	bne.n	8001b54 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Start+0x26>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e04b      	b.n	8001b5a <HAL_ADC_Start+0xbe>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fce8 	bl	80024a0 <ADC_Enable>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d137      	bne.n	8001b4a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afa:	d106      	bne.n	8001b0a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	f023 0206 	bic.w	r2, r3, #6
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	221c      	movs	r2, #28
 8001b16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe2a 	bl	800179c <LL_ADC_REG_StartConversion>
 8001b48:	e006      	b.n	8001b58 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001b52:	e001      	b.n	8001b58 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
 8001b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe25 	bl	80017c4 <LL_ADC_REG_IsConversionOngoing>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d167      	bne.n	8001c50 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Start_DMA+0x2a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e063      	b.n	8001c56 <HAL_ADC_Start_DMA+0xf2>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fc82 	bl	80024a0 <ADC_Enable>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d14f      	bne.n	8001c46 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	f023 0206 	bic.w	r2, r3, #6
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bde:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <HAL_ADC_Start_DMA+0xfc>)
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c64 <HAL_ADC_Start_DMA+0x100>)
 8001be8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <HAL_ADC_Start_DMA+0x104>)
 8001bf0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	221c      	movs	r2, #28
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0210 	orr.w	r2, r2, #16
 8001c10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3340      	adds	r3, #64	@ 0x40
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f001 f9d9 	bl	8002fe8 <HAL_DMA_Start_IT>
 8001c36:	4603      	mov	r3, r0
 8001c38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fdac 	bl	800179c <LL_ADC_REG_StartConversion>
 8001c44:	e006      	b.n	8001c54 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001c4e:	e001      	b.n	8001c54 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
 8001c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800266b 	.word	0x0800266b
 8001c64:	08002743 	.word	0x08002743
 8001c68:	0800275f 	.word	0x0800275f

08001c6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0b6      	sub	sp, #216	@ 0xd8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x22>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e3d5      	b.n	8002476 <HAL_ADC_ConfigChannel+0x7ce>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd74 	bl	80017c4 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 83ba 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d824      	bhi.n	8001d3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	3b02      	subs	r3, #2
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d81b      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x8e>
 8001cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001d04 <HAL_ADC_ConfigChannel+0x5c>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d1d 	.word	0x08001d1d
 8001d0c:	08001d25 	.word	0x08001d25
 8001d10:	08001d2d 	.word	0x08001d2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d14:	230c      	movs	r3, #12
 8001d16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d1a:	e010      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d22:	e00c      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d24:	2318      	movs	r3, #24
 8001d26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d2a:	e008      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d34:	e003      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d36:	2306      	movs	r3, #6
 8001d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d4c:	f7ff fc0f 	bl	800156e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd35 	bl	80017c4 <LL_ADC_REG_IsConversionOngoing>
 8001d5a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fd41 	bl	80017ea <LL_ADC_INJ_IsConversionOngoing>
 8001d68:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 81bf 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 81ba 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d88:	d10f      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7ff fc16 	bl	80015c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fbbd 	bl	8001522 <LL_ADC_SetSamplingTimeCommonConfig>
 8001da8:	e00e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f7ff fc05 	bl	80015c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fbad 	bl	8001522 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d00a      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dfa:	f7ff fb3d 	bl	8001478 <LL_ADC_SetOffset>
 8001dfe:	e179      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb5a 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x184>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb4f 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	e01e      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1c2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fb44 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e004      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x1da>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	e018      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x20c>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e004      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fb13 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff faf7 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x24a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff faec 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	e01e      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x288>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fae1 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2a0>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	e018      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x2d2>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e004      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fab0 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fa94 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x310>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fa89 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e01e      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x34e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fa7e 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x366>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e014      	b.n	8002038 <HAL_ADC_ConfigChannel+0x390>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800201c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800201e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002022:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e004      	b.n	8002038 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800202e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fa51 	bl	80014ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2103      	movs	r1, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fa35 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x3ce>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2103      	movs	r1, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fa2a 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	e017      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x3fe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2103      	movs	r1, #3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fa1f 	bl	80014c0 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800208e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002090:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800209c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_ConfigChannel+0x416>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	e011      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x43a>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80020da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2103      	movs	r1, #3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f9fc 	bl	80014ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fb29 	bl	8001750 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 813f 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	461a      	mov	r2, r3
 8002114:	f7ff fa82 	bl	800161c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a8e      	ldr	r2, [pc, #568]	@ (8002358 <HAL_ADC_ConfigChannel+0x6b0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	f040 8130 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_ADC_ConfigChannel+0x4a4>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2b09      	cmp	r3, #9
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e019      	b.n	8002180 <HAL_ADC_ConfigChannel+0x4d8>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800215a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800215e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b09      	cmp	r3, #9
 8002178:	bf94      	ite	ls
 800217a:	2301      	movls	r3, #1
 800217c:	2300      	movhi	r3, #0
 800217e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002180:	2b00      	cmp	r3, #0
 8002182:	d079      	beq.n	8002278 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x4f8>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0e9b      	lsrs	r3, r3, #26
 8002196:	3301      	adds	r3, #1
 8002198:	069b      	lsls	r3, r3, #26
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800219e:	e015      	b.n	80021cc <HAL_ADC_ConfigChannel+0x524>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80021bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	069b      	lsls	r3, r3, #26
 80021c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x544>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	e017      	b.n	800221c <HAL_ADC_ConfigChannel+0x574>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e003      	b.n	8002210 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3301      	adds	r3, #1
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x59a>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	051b      	lsls	r3, r3, #20
 8002240:	e018      	b.n	8002274 <HAL_ADC_ConfigChannel+0x5cc>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	430b      	orrs	r3, r1
 8002276:	e080      	b.n	800237a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x5ec>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	069b      	lsls	r3, r3, #26
 800228e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002292:	e015      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x618>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e003      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	069b      	lsls	r3, r3, #26
 80022bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x638>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	e017      	b.n	8002310 <HAL_ADC_ConfigChannel+0x668>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	61bb      	str	r3, [r7, #24]
  return result;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_ADC_ConfigChannel+0x694>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	3b1e      	subs	r3, #30
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800233a:	e01d      	b.n	8002378 <HAL_ADC_ConfigChannel+0x6d0>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	60fb      	str	r3, [r7, #12]
  return result;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e005      	b.n	8002364 <HAL_ADC_ConfigChannel+0x6bc>
 8002358:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002378:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237e:	4619      	mov	r1, r3
 8002380:	f7ff f921 	bl	80015c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_ADC_ConfigChannel+0x7d8>)
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06c      	beq.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002390:	483c      	ldr	r0, [pc, #240]	@ (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002392:	f7ff f863 	bl	800145c <LL_ADC_GetCommonPathInternalCh>
 8002396:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <HAL_ADC_ConfigChannel+0x7e0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d127      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d121      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a35      	ldr	r2, [pc, #212]	@ (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d157      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023c2:	4619      	mov	r1, r3
 80023c4:	482f      	ldr	r0, [pc, #188]	@ (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 80023c6:	f7ff f836 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ca:	4b31      	ldr	r3, [pc, #196]	@ (8002490 <HAL_ADC_ConfigChannel+0x7e8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <HAL_ADC_ConfigChannel+0x7ec>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f2:	e03a      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a27      	ldr	r2, [pc, #156]	@ (8002498 <HAL_ADC_ConfigChannel+0x7f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d113      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d12a      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241c:	4619      	mov	r1, r3
 800241e:	4819      	ldr	r0, [pc, #100]	@ (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002420:	f7ff f809 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002424:	e021      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_ADC_ConfigChannel+0x7f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d11c      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d116      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	@ (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800244a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002452:	f7fe fff0 	bl	8001436 <LL_ADC_SetCommonPathInternalCh>
 8002456:	e008      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002472:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002476:	4618      	mov	r0, r3
 8002478:	37d8      	adds	r7, #216	@ 0xd8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	80080000 	.word	0x80080000
 8002484:	50040300 	.word	0x50040300
 8002488:	c7520000 	.word	0xc7520000
 800248c:	50040000 	.word	0x50040000
 8002490:	20040000 	.word	0x20040000
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	cb840000 	.word	0xcb840000
 800249c:	80000001 	.word	0x80000001

080024a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f94d 	bl	8001750 <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d169      	bne.n	8002590 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b36      	ldr	r3, [pc, #216]	@ (800259c <ADC_Enable+0xfc>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e055      	b.n	8002592 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f908 	bl	8001700 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024f0:	482b      	ldr	r0, [pc, #172]	@ (80025a0 <ADC_Enable+0x100>)
 80024f2:	f7fe ffb3 	bl	800145c <LL_ADC_GetCommonPathInternalCh>
 80024f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <ADC_Enable+0x104>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	4a28      	ldr	r2, [pc, #160]	@ (80025a8 <ADC_Enable+0x108>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800251a:	e002      	b.n	8002522 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3b01      	subs	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f9      	bne.n	800251c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002528:	f7fe ff42 	bl	80013b0 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800252e:	e028      	b.n	8002582 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f90b 	bl	8001750 <LL_ADC_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f8db 	bl	8001700 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800254a:	f7fe ff31 	bl	80013b0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d914      	bls.n	8002582 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d00d      	beq.n	8002582 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d1cf      	bne.n	8002530 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	8000003f 	.word	0x8000003f
 80025a0:	50040300 	.word	0x50040300
 80025a4:	20040000 	.word	0x20040000
 80025a8:	053e2d63 	.word	0x053e2d63

080025ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f8dc 	bl	8001776 <LL_ADC_IsDisableOngoing>
 80025be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f8c3 	bl	8001750 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d047      	beq.n	8002660 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d144      	bne.n	8002660 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030d 	and.w	r3, r3, #13
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10c      	bne.n	80025fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff f89d 	bl	8001728 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2203      	movs	r2, #3
 80025f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fedb 	bl	80013b0 <HAL_GetTick>
 80025fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025fc:	e029      	b.n	8002652 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e023      	b.n	8002662 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261a:	f7fe fec9 	bl	80013b0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d914      	bls.n	8002652 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1dc      	bne.n	800261a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d14b      	bne.n	800271c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d021      	beq.n	80026e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe ff50 	bl	8001548 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d032      	beq.n	8002714 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12b      	bne.n	8002714 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11f      	bne.n	8002714 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58
 80026e0:	e018      	b.n	8002714 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff faa9 	bl	8001c6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800271a:	e00e      	b.n	800273a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fab3 	bl	8001c94 <HAL_ADC_ErrorCallback>
}
 800272e:	e004      	b.n	800273a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fa95 	bl	8001c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fa85 	bl	8001c94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <LL_ADC_StartCalibration>:
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80027a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027d8:	d101      	bne.n	80027de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADCEx_Calibration_Start+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e04d      	b.n	80028a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fecb 	bl	80025ac <ADC_Disable>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d136      	bne.n	800288e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ffa9 	bl	8002792 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002840:	e014      	b.n	800286c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800284e:	d30d      	bcc.n	800286c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f023 0312 	bic.w	r3, r3, #18
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e01b      	b.n	80028a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ffa7 	bl	80027c4 <LL_ADC_IsCalibrationOnGoing>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e2      	bne.n	8002842 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f023 0303 	bic.w	r3, r3, #3
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
 800288c:	e005      	b.n	800289a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff3e 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff31 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e014      	b.n	8002b0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fa3d 	bl	8000f70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	795b      	ldrb	r3, [r3, #5]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_DAC_Start+0x16>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e040      	b.n	8002baa <HAL_DAC_Start+0x98>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d11d      	bne.n	8002b9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	e014      	b.n	8002b9c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2102      	movs	r1, #2
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0202 	orr.w	r2, r2, #2
 8002b9a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3308      	adds	r3, #8
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3314      	adds	r3, #20
 8002be8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	461a      	mov	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	795b      	ldrb	r3, [r3, #5]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_DAC_ConfigChannel+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e137      	b.n	8002e8c <HAL_DAC_ConfigChannel+0x28c>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2202      	movs	r2, #2
 8002c26:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	f040 8081 	bne.w	8002d34 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c32:	f7fe fbbd 	bl	80013b0 <HAL_GetTick>
 8002c36:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d140      	bne.n	8002cc0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c3e:	e018      	b.n	8002c72 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c40:	f7fe fbb6 	bl	80013b0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d911      	bls.n	8002c72 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f043 0208 	orr.w	r2, r3, #8
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e10c      	b.n	8002e8c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1df      	bne.n	8002c40 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7fe fba1 	bl	80013c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	69d2      	ldr	r2, [r2, #28]
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c90:	e023      	b.n	8002cda <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c92:	f7fe fb8d 	bl	80013b0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d90f      	bls.n	8002cc0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0a      	bge.n	8002cc0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f043 0208 	orr.w	r2, r3, #8
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0e5      	b.n	8002e8c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dbe3      	blt.n	8002c92 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fe fb7c 	bl	80013c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	69d2      	ldr	r2, [r2, #28]
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	ea02 0103 	and.w	r1, r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	21ff      	movs	r1, #255	@ 0xff
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	ea02 0103 	and.w	r1, r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11d      	bne.n	8002d78 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2207      	movs	r2, #7
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	400a      	ands	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e1c:	d104      	bne.n	8002e28 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e018      	b.n	8002e5a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e00f      	b.n	8002e5a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e3a:	f001 fae5 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8002e3e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <HAL_DAC_ConfigChannel+0x294>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d904      	bls.n	8002e52 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e003      	b.n	8002e5a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e58:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	22c0      	movs	r2, #192	@ 0xc0
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	04c4b400 	.word	0x04c4b400

08002e98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e08d      	b.n	8002fc6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <HAL_DMA_Init+0x138>)
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d80f      	bhi.n	8002ed6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b45      	ldr	r3, [pc, #276]	@ (8002fd4 <HAL_DMA_Init+0x13c>)
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a45      	ldr	r2, [pc, #276]	@ (8002fd8 <HAL_DMA_Init+0x140>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	009a      	lsls	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a42      	ldr	r2, [pc, #264]	@ (8002fdc <HAL_DMA_Init+0x144>)
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ed4:	e00e      	b.n	8002ef4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <HAL_DMA_Init+0x148>)
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd8 <HAL_DMA_Init+0x140>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	009a      	lsls	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fe4 <HAL_DMA_Init+0x14c>)
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9b6 	bl	80032b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f54:	d102      	bne.n	8002f5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HAL_DMA_Init+0x104>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d80c      	bhi.n	8002f9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9d6 	bl	8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	e008      	b.n	8002fae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40020407 	.word	0x40020407
 8002fd4:	bffdfff8 	.word	0xbffdfff8
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	bffdfbf8 	.word	0xbffdfbf8
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Start_IT+0x20>
 8003004:	2302      	movs	r3, #2
 8003006:	e066      	b.n	80030d6 <HAL_DMA_Start_IT+0xee>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d155      	bne.n	80030c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8fb 	bl	800323c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 020e 	orr.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00f      	b.n	8003080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 020a 	orr.w	r2, r2, #10
 800307e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e005      	b.n	80030d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f003 031c 	and.w	r3, r3, #28
 80030fe:	2204      	movs	r2, #4
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d026      	beq.n	8003158 <HAL_DMA_IRQHandler+0x7a>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d021      	beq.n	8003158 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0204 	bic.w	r2, r2, #4
 8003130:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f003 021c 	and.w	r2, r3, #28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2104      	movs	r1, #4
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	2b00      	cmp	r3, #0
 800314c:	d071      	beq.n	8003232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003156:	e06c      	b.n	8003232 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f003 031c 	and.w	r3, r3, #28
 8003160:	2202      	movs	r2, #2
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02e      	beq.n	80031ca <HAL_DMA_IRQHandler+0xec>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d029      	beq.n	80031ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020a 	bic.w	r2, r2, #10
 8003192:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	f003 021c 	and.w	r2, r3, #28
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	2102      	movs	r1, #2
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d038      	beq.n	8003232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031c8:	e033      	b.n	8003232 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f003 031c 	and.w	r3, r3, #28
 80031d2:	2208      	movs	r2, #8
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x156>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d025      	beq.n	8003234 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 020e 	bic.w	r2, r2, #14
 80031f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	f003 021c 	and.w	r2, r3, #28
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003232:	bf00      	nop
 8003234:	bf00      	nop
}
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003252:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003264:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f003 021c 	and.w	r2, r3, #28
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	2101      	movs	r1, #1
 8003274:	fa01 f202 	lsl.w	r2, r1, r2
 8003278:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d108      	bne.n	800329c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800329a:	e007      	b.n	80032ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d80a      	bhi.n	80032e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6493      	str	r3, [r2, #72]	@ 0x48
 80032e0:	e007      	b.n	80032f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032ec:	4413      	add	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3b08      	subs	r3, #8
 80032fa:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003308:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40020407 	.word	0x40020407
 8003328:	4002081c 	.word	0x4002081c
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020880 	.word	0x40020880

08003334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a08      	ldr	r2, [pc, #32]	@ (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003356:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	1000823f 	.word	0x1000823f
 8003378:	40020940 	.word	0x40020940

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338a:	e166      	b.n	800365a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8158 	beq.w	8003654 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d005      	beq.n	80033bc <HAL_GPIO_Init+0x40>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d130      	bne.n	800341e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f2:	2201      	movs	r2, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0201 	and.w	r2, r3, #1
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d017      	beq.n	800345a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d123      	bne.n	80034ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	6939      	ldr	r1, [r7, #16]
 80034aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0203 	and.w	r2, r3, #3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80b2 	beq.w	8003654 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f0:	4b61      	ldr	r3, [pc, #388]	@ (8003678 <HAL_GPIO_Init+0x2fc>)
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	4a60      	ldr	r2, [pc, #384]	@ (8003678 <HAL_GPIO_Init+0x2fc>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80034fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003678 <HAL_GPIO_Init+0x2fc>)
 80034fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003508:	4a5c      	ldr	r2, [pc, #368]	@ (800367c <HAL_GPIO_Init+0x300>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	220f      	movs	r2, #15
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003532:	d02b      	beq.n	800358c <HAL_GPIO_Init+0x210>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_GPIO_Init+0x304>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d025      	beq.n	8003588 <HAL_GPIO_Init+0x20c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_GPIO_Init+0x308>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01f      	beq.n	8003584 <HAL_GPIO_Init+0x208>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a50      	ldr	r2, [pc, #320]	@ (8003688 <HAL_GPIO_Init+0x30c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d019      	beq.n	8003580 <HAL_GPIO_Init+0x204>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_GPIO_Init+0x310>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <HAL_GPIO_Init+0x200>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a4e      	ldr	r2, [pc, #312]	@ (8003690 <HAL_GPIO_Init+0x314>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00d      	beq.n	8003578 <HAL_GPIO_Init+0x1fc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a4d      	ldr	r2, [pc, #308]	@ (8003694 <HAL_GPIO_Init+0x318>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <HAL_GPIO_Init+0x1f8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_GPIO_Init+0x31c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_GPIO_Init+0x1f4>
 800356c:	2307      	movs	r3, #7
 800356e:	e00e      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003570:	2308      	movs	r3, #8
 8003572:	e00c      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003574:	2306      	movs	r3, #6
 8003576:	e00a      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003578:	2305      	movs	r3, #5
 800357a:	e008      	b.n	800358e <HAL_GPIO_Init+0x212>
 800357c:	2304      	movs	r3, #4
 800357e:	e006      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003580:	2303      	movs	r3, #3
 8003582:	e004      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003584:	2302      	movs	r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x212>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_GPIO_Init+0x212>
 800358c:	2300      	movs	r3, #0
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	f002 0203 	and.w	r2, r2, #3
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	4093      	lsls	r3, r2
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800359e:	4937      	ldr	r1, [pc, #220]	@ (800367c <HAL_GPIO_Init+0x300>)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ac:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <HAL_GPIO_Init+0x320>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d0:	4a32      	ldr	r2, [pc, #200]	@ (800369c <HAL_GPIO_Init+0x320>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035d6:	4b31      	ldr	r3, [pc, #196]	@ (800369c <HAL_GPIO_Init+0x320>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035fa:	4a28      	ldr	r2, [pc, #160]	@ (800369c <HAL_GPIO_Init+0x320>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003600:	4b26      	ldr	r3, [pc, #152]	@ (800369c <HAL_GPIO_Init+0x320>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_GPIO_Init+0x320>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800362a:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <HAL_GPIO_Init+0x320>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800364e:	4a13      	ldr	r2, [pc, #76]	@ (800369c <HAL_GPIO_Init+0x320>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f ae91 	bne.w	800338c <HAL_GPIO_Init+0x10>
  }
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40021000 	.word	0x40021000
 800367c:	40010000 	.word	0x40010000
 8003680:	48000400 	.word	0x48000400
 8003684:	48000800 	.word	0x48000800
 8003688:	48000c00 	.word	0x48000c00
 800368c:	48001000 	.word	0x48001000
 8003690:	48001400 	.word	0x48001400
 8003694:	48001800 	.word	0x48001800
 8003698:	48001c00 	.word	0x48001c00
 800369c:	40010400 	.word	0x40010400

080036a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b0:	d102      	bne.n	80036b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80036b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036b6:	e00b      	b.n	80036d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d102      	bne.n	80036ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80036c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036cc:	e000      	b.n	80036d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80036ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d141      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b4b      	ldr	r3, [pc, #300]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fa:	d131      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036fc:	4b47      	ldr	r3, [pc, #284]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003702:	4a46      	ldr	r2, [pc, #280]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	4b43      	ldr	r3, [pc, #268]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003714:	4a41      	ldr	r2, [pc, #260]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800371c:	4b40      	ldr	r3, [pc, #256]	@ (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2232      	movs	r2, #50	@ 0x32
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a3f      	ldr	r2, [pc, #252]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	e002      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373a:	4b38      	ldr	r3, [pc, #224]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003746:	d102      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374e:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375a:	d158      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e057      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003760:	4b2e      	ldr	r3, [pc, #184]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003766:	4a2d      	ldr	r2, [pc, #180]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003770:	e04d      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003778:	d141      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800377a:	4b28      	ldr	r3, [pc, #160]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003786:	d131      	bne.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003788:	4b24      	ldr	r3, [pc, #144]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378e:	4a23      	ldr	r2, [pc, #140]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003798:	4b20      	ldr	r3, [pc, #128]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037a0:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2232      	movs	r2, #50	@ 0x32
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9b      	lsrs	r3, r3, #18
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037be:	e002      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d2:	d102      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f2      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e6:	d112      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e011      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f2:	4a0a      	ldr	r2, [pc, #40]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037fc:	e007      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003806:	4a05      	ldr	r2, [pc, #20]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800380c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40007000 	.word	0x40007000
 8003820:	20040000 	.word	0x20040000
 8003824:	431bde83 	.word	0x431bde83

08003828 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_PWREx_EnableVddIO2+0x1c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003836:	6053      	str	r3, [r2, #4]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f000 bc08 	b.w	800406c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385c:	4b96      	ldr	r3, [pc, #600]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003866:	4b94      	ldr	r3, [pc, #592]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80e4 	beq.w	8003a46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_RCC_OscConfig+0x4c>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	f040 808b 	bne.w	80039a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	f040 8087 	bne.w	80039a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003894:	4b88      	ldr	r3, [pc, #544]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_OscConfig+0x64>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e3df      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	4b81      	ldr	r3, [pc, #516]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RCC_OscConfig+0x7e>
 80038bc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c4:	e005      	b.n	80038d2 <HAL_RCC_OscConfig+0x8a>
 80038c6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d223      	bcs.n	800391e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fdcc 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e3c0      	b.n	800406c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ea:	4b73      	ldr	r3, [pc, #460]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a72      	ldr	r2, [pc, #456]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	496d      	ldr	r1, [pc, #436]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003908:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4968      	ldr	r1, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
 800391c:	e025      	b.n	800396a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391e:	4b66      	ldr	r3, [pc, #408]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a65      	ldr	r2, [pc, #404]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b63      	ldr	r3, [pc, #396]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4960      	ldr	r1, [pc, #384]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	495b      	ldr	r1, [pc, #364]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fd8c 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e380      	b.n	800406c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800396a:	f000 fcc1 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4950      	ldr	r1, [pc, #320]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac0 <HAL_RCC_OscConfig+0x278>)
 8003988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800398a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fcbe 	bl	8001310 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d052      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	e364      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d032      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039aa:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a42      	ldr	r2, [pc, #264]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b6:	f7fd fcfb 	bl	80013b0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039be:	f7fd fcf7 	bl	80013b0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e34d      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4930      	ldr	r1, [pc, #192]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fa:	4b2f      	ldr	r3, [pc, #188]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	492b      	ldr	r1, [pc, #172]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
 8003a0e:	e01a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a10:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a28      	ldr	r2, [pc, #160]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fcc8 	bl	80013b0 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a24:	f7fd fcc4 	bl	80013b0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e31a      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1dc>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d073      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_OscConfig+0x21c>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d10e      	bne.n	8003a7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d063      	beq.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15f      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e2f7      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x24c>
 8003a86:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e025      	b.n	8003ae0 <HAL_RCC_OscConfig+0x298>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a9c:	d114      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x280>
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a05      	ldr	r2, [pc, #20]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a02      	ldr	r2, [pc, #8]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e013      	b.n	8003ae0 <HAL_RCC_OscConfig+0x298>
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08006cf4 	.word	0x08006cf4
 8003ac0:	20040000 	.word	0x20040000
 8003ac4:	20040004 	.word	0x20040004
 8003ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a9f      	ldr	r2, [pc, #636]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a9c      	ldr	r2, [pc, #624]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fc62 	bl	80013b0 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fc5e 	bl	80013b0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e2b4      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b02:	4b92      	ldr	r3, [pc, #584]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2a8>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fc4e 	bl	80013b0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fd fc4a 	bl	80013b0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e2a0      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2a:	4b88      	ldr	r3, [pc, #544]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2d0>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d060      	beq.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x310>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d119      	bne.n	8003b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d116      	bne.n	8003b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b58:	4b7c      	ldr	r3, [pc, #496]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_OscConfig+0x328>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e27d      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b76      	ldr	r3, [pc, #472]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	4973      	ldr	r1, [pc, #460]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b84:	e040      	b.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d023      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6e      	ldr	r2, [pc, #440]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fd fc09 	bl	80013b0 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fc05 	bl	80013b0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e25b      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc0:	4b62      	ldr	r3, [pc, #392]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	495f      	ldr	r1, [pc, #380]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	e018      	b.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5c      	ldr	r2, [pc, #368]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fd fbe5 	bl	80013b0 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fd fbe1 	bl	80013b0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e237      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfc:	4b53      	ldr	r3, [pc, #332]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03c      	beq.n	8003c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c22:	4a4a      	ldr	r2, [pc, #296]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd fbc0 	bl	80013b0 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fd fbbc 	bl	80013b0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e212      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c46:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ef      	beq.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
 8003c54:	e01b      	b.n	8003c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c56:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fd fba3 	bl	80013b0 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fd fb9f 	bl	80013b0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1f5      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c80:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ef      	bne.n	8003c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80a6 	beq.w	8003de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x508>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d118      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d50 <HAL_RCC_OscConfig+0x508>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <HAL_RCC_OscConfig+0x508>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fb66 	bl	80013b0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fd fb62 	bl	80013b0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1b8      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfa:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <HAL_RCC_OscConfig+0x508>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4d8>
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d14:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d1e:	e029      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d115      	bne.n	8003d54 <HAL_RCC_OscConfig+0x50c>
 8003d28:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	4a07      	ldr	r2, [pc, #28]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d38:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	4a03      	ldr	r2, [pc, #12]	@ (8003d4c <HAL_RCC_OscConfig+0x504>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d48:	e014      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
 8003d54:	4b9d      	ldr	r3, [pc, #628]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a9c      	ldr	r2, [pc, #624]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d64:	4b99      	ldr	r3, [pc, #612]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	4a98      	ldr	r2, [pc, #608]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d016      	beq.n	8003daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fd fb18 	bl	80013b0 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fd fb14 	bl	80013b0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e168      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ed      	beq.n	8003d84 <HAL_RCC_OscConfig+0x53c>
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fd fb01 	bl	80013b0 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fafd 	bl	80013b0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e151      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc8:	4b80      	ldr	r3, [pc, #512]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ed      	bne.n	8003db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03c      	beq.n	8003e6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01c      	beq.n	8003e36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dfc:	4b73      	ldr	r3, [pc, #460]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e02:	4a72      	ldr	r2, [pc, #456]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fad0 	bl	80013b0 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e14:	f7fd facc 	bl	80013b0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e122      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e26:	4b69      	ldr	r3, [pc, #420]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <HAL_RCC_OscConfig+0x5cc>
 8003e34:	e01b      	b.n	8003e6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e36:	4b65      	ldr	r3, [pc, #404]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e3c:	4a63      	ldr	r2, [pc, #396]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd fab3 	bl	80013b0 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e4e:	f7fd faaf 	bl	80013b0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e105      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e60:	4b5a      	ldr	r3, [pc, #360]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ef      	bne.n	8003e4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80f9 	beq.w	800406a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f040 80cf 	bne.w	8004020 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e82:	4b52      	ldr	r3, [pc, #328]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0203 	and.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d12c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d123      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d113      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d071      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d068      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ef6:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f02:	4b32      	ldr	r3, [pc, #200]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0ac      	b.n	800406c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f12:	4b2e      	ldr	r3, [pc, #184]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2d      	ldr	r2, [pc, #180]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f1e:	f7fd fa47 	bl	80013b0 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd fa43 	bl	80013b0 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e099      	b.n	800406c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b21      	ldr	r3, [pc, #132]	@ (8003fd0 <HAL_RCC_OscConfig+0x788>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f5e:	0212      	lsls	r2, r2, #8
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0552      	lsls	r2, r2, #21
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0652      	lsls	r2, r2, #25
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f7e:	06d2      	lsls	r2, r2, #27
 8003f80:	430a      	orrs	r2, r1
 8003f82:	4912      	ldr	r1, [pc, #72]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f88:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a0c      	ldr	r2, [pc, #48]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa0:	f7fd fa06 	bl	80013b0 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fa02 	bl	80013b0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e058      	b.n	800406c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <HAL_RCC_OscConfig+0x784>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc6:	e050      	b.n	800406a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e04f      	b.n	800406c <HAL_RCC_OscConfig+0x824>
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d144      	bne.n	800406a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ff8:	f7fd f9da 	bl	80013b0 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f9d6 	bl	80013b0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e02c      	b.n	800406c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	4b18      	ldr	r3, [pc, #96]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x7b8>
 800401e:	e024      	b.n	800406a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d01f      	beq.n	8004066 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 800402c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd f9bd 	bl	80013b0 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fd f9b9 	bl	80013b0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e00f      	b.n	800406c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	4b09      	ldr	r3, [pc, #36]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4905      	ldr	r1, [pc, #20]	@ (8004074 <HAL_RCC_OscConfig+0x82c>)
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <HAL_RCC_OscConfig+0x830>)
 8004060:	4013      	ands	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
 8004064:	e001      	b.n	800406a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	feeefffc 	.word	0xfeeefffc

0800407c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e11d      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b90      	ldr	r3, [pc, #576]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b8d      	ldr	r3, [pc, #564]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 020f 	bic.w	r2, r3, #15
 80040aa:	498b      	ldr	r1, [pc, #556]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b89      	ldr	r3, [pc, #548]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e105      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040dc:	429a      	cmp	r2, r3
 80040de:	d908      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b7e      	ldr	r3, [pc, #504]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	497b      	ldr	r1, [pc, #492]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d079      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d11e      	bne.n	8004144 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b75      	ldr	r3, [pc, #468]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0dc      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004116:	f000 fa09 	bl	800452c <RCC_GetSysClockFreqFromPLLSource>
 800411a:	4603      	mov	r3, r0
 800411c:	4a70      	ldr	r2, [pc, #448]	@ (80042e0 <HAL_RCC_ClockConfig+0x264>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d946      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004122:	4b6e      	ldr	r3, [pc, #440]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d140      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800412e:	4b6b      	ldr	r3, [pc, #428]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004136:	4a69      	ldr	r2, [pc, #420]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e035      	b.n	80041b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d107      	bne.n	800415c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414c:	4b63      	ldr	r3, [pc, #396]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d115      	bne.n	8004184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b9      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d107      	bne.n	8004174 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004164:	4b5d      	ldr	r3, [pc, #372]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0ad      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0a5      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004184:	f000 f8b4 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 8004188:	4603      	mov	r3, r0
 800418a:	4a55      	ldr	r2, [pc, #340]	@ (80042e0 <HAL_RCC_ClockConfig+0x264>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d90f      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004190:	4b52      	ldr	r3, [pc, #328]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800419c:	4b4f      	ldr	r3, [pc, #316]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a4:	4a4d      	ldr	r2, [pc, #308]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b0:	4b4a      	ldr	r3, [pc, #296]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 0203 	bic.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4947      	ldr	r1, [pc, #284]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c2:	f7fd f8f5 	bl	80013b0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ca:	f7fd f8f1 	bl	80013b0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e077      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e0:	4b3e      	ldr	r3, [pc, #248]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 020c 	and.w	r2, r3, #12
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d1eb      	bne.n	80041ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041f8:	4b38      	ldr	r3, [pc, #224]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a37      	ldr	r2, [pc, #220]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004202:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800421c:	429a      	cmp	r2, r3
 800421e:	d208      	bcs.n	8004232 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	492b      	ldr	r1, [pc, #172]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004232:	4b29      	ldr	r3, [pc, #164]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d210      	bcs.n	8004262 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 020f 	bic.w	r2, r3, #15
 8004248:	4923      	ldr	r1, [pc, #140]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004250:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d001      	beq.n	8004262 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e036      	b.n	80042d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426e:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4918      	ldr	r1, [pc, #96]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428c:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4910      	ldr	r1, [pc, #64]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042a0:	f000 f826 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	490c      	ldr	r1, [pc, #48]	@ (80042e4 <HAL_RCC_ClockConfig+0x268>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <HAL_RCC_ClockConfig+0x26c>)
 80042be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042c0:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <HAL_RCC_ClockConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd f823 	bl	8001310 <HAL_InitTick>
 80042ca:	4603      	mov	r3, r0
 80042cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	04c4b400 	.word	0x04c4b400
 80042e4:	08006cf4 	.word	0x08006cf4
 80042e8:	20040000 	.word	0x20040000
 80042ec:	20040004 	.word	0x20040004

080042f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fe:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004308:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x34>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d121      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d11e      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004324:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004330:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e005      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004340:	4b2d      	ldr	r3, [pc, #180]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800434c:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004360:	e00a      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d102      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004368:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x110>)
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e004      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d101      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004374:	4b23      	ldr	r3, [pc, #140]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x114>)
 8004376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d134      	bne.n	80043e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800437e:	4b1e      	ldr	r3, [pc, #120]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0xa6>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d003      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0xac>
 8004394:	e005      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004396:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x110>)
 8004398:	617b      	str	r3, [r7, #20]
      break;
 800439a:	e005      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x114>)
 800439e:	617b      	str	r3, [r7, #20]
      break;
 80043a0:	e002      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	617b      	str	r3, [r7, #20]
      break;
 80043a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3301      	adds	r3, #1
 80043b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043b6:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	fb03 f202 	mul.w	r2, r3, r2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	0e5b      	lsrs	r3, r3, #25
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	3301      	adds	r3, #1
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e8:	69bb      	ldr	r3, [r7, #24]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3724      	adds	r7, #36	@ 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08006d0c 	.word	0x08006d0c
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	@ (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20040000 	.word	0x20040000

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4904      	ldr	r1, [pc, #16]	@ (8004448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	08006d04 	.word	0x08006d04

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004450:	f7ff ffda 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0adb      	lsrs	r3, r3, #11
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	@ (8004474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	08006d04 	.word	0x08006d04

08004478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004490:	f7ff f906 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004494:	6178      	str	r0, [r7, #20]
 8004496:	e014      	b.n	80044c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044b0:	f7ff f8f6 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 80044b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d10b      	bne.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b80      	cmp	r3, #128	@ 0x80
 80044ce:	d913      	bls.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80044d4:	d902      	bls.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d6:	2302      	movs	r3, #2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e00d      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e00a      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e6:	d902      	bls.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80044e8:	2302      	movs	r3, #2
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e004      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b70      	cmp	r3, #112	@ 0x70
 80044f2:	d101      	bne.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f4:	2301      	movs	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 020f 	bic.w	r2, r3, #15
 8004500:	4909      	ldr	r1, [pc, #36]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004508:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d001      	beq.n	800451a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	40022000 	.word	0x40022000

0800452c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004532:	4b2d      	ldr	r3, [pc, #180]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d00b      	beq.n	800455a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d825      	bhi.n	8004594 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d008      	beq.n	8004560 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d11f      	bne.n	8004594 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004554:	4b25      	ldr	r3, [pc, #148]	@ (80045ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004556:	613b      	str	r3, [r7, #16]
    break;
 8004558:	e01f      	b.n	800459a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800455a:	4b25      	ldr	r3, [pc, #148]	@ (80045f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800455c:	613b      	str	r3, [r7, #16]
    break;
 800455e:	e01c      	b.n	800459a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004560:	4b21      	ldr	r3, [pc, #132]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800456c:	4b1e      	ldr	r3, [pc, #120]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e005      	b.n	8004588 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800457c:	4b1a      	ldr	r3, [pc, #104]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004588:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	613b      	str	r3, [r7, #16]
    break;
 8004592:	e002      	b.n	800459a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
    break;
 8004598:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800459a:	4b13      	ldr	r3, [pc, #76]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	3301      	adds	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045a8:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	fb03 f202 	mul.w	r2, r3, r2
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045c0:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0e5b      	lsrs	r3, r3, #25
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80045da:	683b      	ldr	r3, [r7, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	007a1200 	.word	0x007a1200
 80045f4:	08006d0c 	.word	0x08006d0c

080045f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004600:	2300      	movs	r3, #0
 8004602:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004604:	2300      	movs	r3, #0
 8004606:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d040      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d02a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800461c:	2b80      	cmp	r3, #128	@ 0x80
 800461e:	d825      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004620:	2b60      	cmp	r3, #96	@ 0x60
 8004622:	d026      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004624:	2b60      	cmp	r3, #96	@ 0x60
 8004626:	d821      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d006      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d81d      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d010      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004638:	e018      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800463a:	4b89      	ldr	r3, [pc, #548]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4a88      	ldr	r2, [pc, #544]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004646:	e015      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fb02 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004658:	e00c      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3320      	adds	r3, #32
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fbed 	bl	8004e40 <RCCEx_PLLSAI2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	74fb      	strb	r3, [r7, #19]
      break;
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467a:	4b79      	ldr	r3, [pc, #484]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800467c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004680:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004688:	4975      	ldr	r1, [pc, #468]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004690:	e001      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d047      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046aa:	d030      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b0:	d82a      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b6:	d02a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046bc:	d824      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c2:	d008      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c8:	d81e      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d2:	d010      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046d4:	e018      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d6:	4b62      	ldr	r3, [pc, #392]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4a61      	ldr	r2, [pc, #388]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e2:	e015      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fab4 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046f4:	e00c      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3320      	adds	r3, #32
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fb9f 	bl	8004e40 <RCCEx_PLLSAI2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004706:	e003      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	74fb      	strb	r3, [r7, #19]
      break;
 800470c:	e000      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800470e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004716:	4b52      	ldr	r3, [pc, #328]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800471c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	494e      	ldr	r1, [pc, #312]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800472c:	e001      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 809f 	beq.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004744:	4b46      	ldr	r3, [pc, #280]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004754:	2300      	movs	r3, #0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a40      	ldr	r2, [pc, #256]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
 8004766:	4b3e      	ldr	r3, [pc, #248]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004776:	4b3b      	ldr	r3, [pc, #236]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3a      	ldr	r2, [pc, #232]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004782:	f7fc fe15 	bl	80013b0 <HAL_GetTick>
 8004786:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004788:	e009      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fc fe11 	bl	80013b0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d902      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	74fb      	strb	r3, [r7, #19]
        break;
 800479c:	e005      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800479e:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ef      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d15b      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01f      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d019      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ce:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047da:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047fa:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d016      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc fdd0 	bl	80013b0 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004812:	e00b      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fc fdcc 	bl	80013b0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d902      	bls.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	74fb      	strb	r3, [r7, #19]
            break;
 800482a:	e006      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ec      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10c      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004840:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	4903      	ldr	r1, [pc, #12]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004858:	e008      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	74bb      	strb	r3, [r7, #18]
 800485e:	e005      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004860:	40021000 	.word	0x40021000
 8004864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486c:	7c7b      	ldrb	r3, [r7, #17]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d105      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4ba0      	ldr	r3, [pc, #640]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004876:	4a9f      	ldr	r2, [pc, #636]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800488a:	4b9a      	ldr	r3, [pc, #616]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f023 0203 	bic.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004898:	4996      	ldr	r1, [pc, #600]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ac:	4b91      	ldr	r3, [pc, #580]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b2:	f023 020c 	bic.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	498e      	ldr	r1, [pc, #568]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ce:	4b89      	ldr	r3, [pc, #548]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	4985      	ldr	r1, [pc, #532]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f0:	4b80      	ldr	r3, [pc, #512]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	497d      	ldr	r1, [pc, #500]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004912:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004920:	4974      	ldr	r1, [pc, #464]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004934:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004942:	496c      	ldr	r1, [pc, #432]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004956:	4b67      	ldr	r3, [pc, #412]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004964:	4963      	ldr	r1, [pc, #396]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004978:	4b5e      	ldr	r3, [pc, #376]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004986:	495b      	ldr	r1, [pc, #364]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800499a:	4b56      	ldr	r3, [pc, #344]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	4952      	ldr	r1, [pc, #328]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049bc:	4b4d      	ldr	r3, [pc, #308]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	494a      	ldr	r1, [pc, #296]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049de:	4b45      	ldr	r3, [pc, #276]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ec:	4941      	ldr	r1, [pc, #260]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a00:	4b3c      	ldr	r3, [pc, #240]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0e:	4939      	ldr	r1, [pc, #228]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d028      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a22:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a30:	4930      	ldr	r1, [pc, #192]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a42:	4b2c      	ldr	r3, [pc, #176]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a4c:	60d3      	str	r3, [r2, #12]
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f8f9 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d04d      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a88:	d108      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a90:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a96:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a9a:	e012      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a9c:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aa2:	4a14      	ldr	r2, [pc, #80]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aa8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004aac:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aba:	490e      	ldr	r1, [pc, #56]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aca:	d106      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004acc:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	60d3      	str	r3, [r2, #12]
 8004ad8:	e020      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a02      	ldr	r2, [pc, #8]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aee:	60d3      	str	r3, [r2, #12]
 8004af0:	e014      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004afc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f8a5 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d028      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b28:	4b4a      	ldr	r3, [pc, #296]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b36:	4947      	ldr	r1, [pc, #284]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b46:	d106      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b42      	ldr	r3, [pc, #264]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a41      	ldr	r2, [pc, #260]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]
 8004b54:	e011      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b5e:	d10c      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f876 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01e      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b96:	492f      	ldr	r1, [pc, #188]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f851 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd0:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bd6:	f023 0204 	bic.w	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be0:	491c      	ldr	r1, [pc, #112]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bf4:	4b17      	ldr	r3, [pc, #92]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bfa:	f023 0218 	bic.w	r2, r3, #24
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	4913      	ldr	r1, [pc, #76]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d017      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c28:	490a      	ldr	r1, [pc, #40]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000

08004c58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c66:	4b72      	ldr	r3, [pc, #456]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00e      	beq.n	8004c90 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c72:	4b6f      	ldr	r3, [pc, #444]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d103      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
       ||
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d142      	bne.n	8004d10 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
 8004c8e:	e03f      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d018      	beq.n	8004cca <RCCEx_PLLSAI1_Config+0x72>
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d825      	bhi.n	8004ce8 <RCCEx_PLLSAI1_Config+0x90>
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d002      	beq.n	8004ca6 <RCCEx_PLLSAI1_Config+0x4e>
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d009      	beq.n	8004cb8 <RCCEx_PLLSAI1_Config+0x60>
 8004ca4:	e020      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ca6:	4b62      	ldr	r3, [pc, #392]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11d      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb6:	e01a      	b.n	8004cee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d116      	bne.n	8004cf2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e013      	b.n	8004cf2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cca:	4b59      	ldr	r3, [pc, #356]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cd6:	4b56      	ldr	r3, [pc, #344]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ce6:	e006      	b.n	8004cf6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      break;
 8004cec:	e004      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e002      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f023 0203 	bic.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4949      	ldr	r1, [pc, #292]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 8086 	bne.w	8004e24 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d18:	4b45      	ldr	r3, [pc, #276]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a44      	ldr	r2, [pc, #272]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fc fb44 	bl	80013b0 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d2a:	e009      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d2c:	f7fc fb40 	bl	80013b0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d902      	bls.n	8004d40 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d3e:	e005      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ef      	bne.n	8004d2c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d168      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d113      	bne.n	8004d80 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d58:	4b35      	ldr	r3, [pc, #212]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	4b35      	ldr	r3, [pc, #212]	@ (8004e34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6892      	ldr	r2, [r2, #8]
 8004d64:	0211      	lsls	r1, r2, #8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68d2      	ldr	r2, [r2, #12]
 8004d6a:	06d2      	lsls	r2, r2, #27
 8004d6c:	4311      	orrs	r1, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6852      	ldr	r2, [r2, #4]
 8004d72:	3a01      	subs	r2, #1
 8004d74:	0112      	lsls	r2, r2, #4
 8004d76:	430a      	orrs	r2, r1
 8004d78:	492d      	ldr	r1, [pc, #180]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]
 8004d7e:	e02d      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d115      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d86:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6892      	ldr	r2, [r2, #8]
 8004d92:	0211      	lsls	r1, r2, #8
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6912      	ldr	r2, [r2, #16]
 8004d98:	0852      	lsrs	r2, r2, #1
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0552      	lsls	r2, r2, #21
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	3a01      	subs	r2, #1
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	430a      	orrs	r2, r1
 8004daa:	4921      	ldr	r1, [pc, #132]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	610b      	str	r3, [r1, #16]
 8004db0:	e014      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	4b21      	ldr	r3, [pc, #132]	@ (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6892      	ldr	r2, [r2, #8]
 8004dbe:	0211      	lsls	r1, r2, #8
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6952      	ldr	r2, [r2, #20]
 8004dc4:	0852      	lsrs	r2, r2, #1
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	0652      	lsls	r2, r2, #25
 8004dca:	4311      	orrs	r1, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6852      	ldr	r2, [r2, #4]
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4916      	ldr	r1, [pc, #88]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fc fae2 	bl	80013b0 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df0:	f7fc fade 	bl	80013b0 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
          break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	07ff800f 	.word	0x07ff800f
 8004e38:	ff9f800f 	.word	0xff9f800f
 8004e3c:	f9ff800f 	.word	0xf9ff800f

08004e40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e4e:	4b72      	ldr	r3, [pc, #456]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00e      	beq.n	8004e78 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0203 	and.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d103      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d142      	bne.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e03f      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d018      	beq.n	8004eb2 <RCCEx_PLLSAI2_Config+0x72>
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d825      	bhi.n	8004ed0 <RCCEx_PLLSAI2_Config+0x90>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d002      	beq.n	8004e8e <RCCEx_PLLSAI2_Config+0x4e>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d009      	beq.n	8004ea0 <RCCEx_PLLSAI2_Config+0x60>
 8004e8c:	e020      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e8e:	4b62      	ldr	r3, [pc, #392]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11d      	bne.n	8004ed6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9e:	e01a      	b.n	8004ed6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e013      	b.n	8004eda <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eb2:	4b59      	ldr	r3, [pc, #356]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ebe:	4b56      	ldr	r3, [pc, #344]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ece:	e006      	b.n	8004ede <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e004      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4949      	ldr	r1, [pc, #292]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 8086 	bne.w	800500c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f00:	4b45      	ldr	r3, [pc, #276]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a44      	ldr	r2, [pc, #272]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fc fa50 	bl	80013b0 <HAL_GetTick>
 8004f10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f12:	e009      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f14:	f7fc fa4c 	bl	80013b0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	73fb      	strb	r3, [r7, #15]
        break;
 8004f26:	e005      	b.n	8004f34 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f28:	4b3b      	ldr	r3, [pc, #236]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ef      	bne.n	8004f14 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d168      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f40:	4b35      	ldr	r3, [pc, #212]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	4b35      	ldr	r3, [pc, #212]	@ (800501c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	0211      	lsls	r1, r2, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	06d2      	lsls	r2, r2, #27
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6852      	ldr	r2, [r2, #4]
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	492d      	ldr	r1, [pc, #180]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	614b      	str	r3, [r1, #20]
 8004f66:	e02d      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d115      	bne.n	8004f9a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	0211      	lsls	r1, r2, #8
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6912      	ldr	r2, [r2, #16]
 8004f80:	0852      	lsrs	r2, r2, #1
 8004f82:	3a01      	subs	r2, #1
 8004f84:	0552      	lsls	r2, r2, #21
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6852      	ldr	r2, [r2, #4]
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0112      	lsls	r2, r2, #4
 8004f90:	430a      	orrs	r2, r1
 8004f92:	4921      	ldr	r1, [pc, #132]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	614b      	str	r3, [r1, #20]
 8004f98:	e014      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	0211      	lsls	r1, r2, #8
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6952      	ldr	r2, [r2, #20]
 8004fac:	0852      	lsrs	r2, r2, #1
 8004fae:	3a01      	subs	r2, #1
 8004fb0:	0652      	lsls	r2, r2, #25
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6852      	ldr	r2, [r2, #4]
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	0112      	lsls	r2, r2, #4
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	4916      	ldr	r1, [pc, #88]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fc4:	4b14      	ldr	r3, [pc, #80]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fc f9ee 	bl	80013b0 <HAL_GetTick>
 8004fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fd6:	e009      	b.n	8004fec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fd8:	f7fc f9ea 	bl	80013b0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8004fea:	e005      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	4904      	ldr	r1, [pc, #16]	@ (8005018 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	07ff800f 	.word	0x07ff800f
 8005020:	ff9f800f 	.word	0xff9f800f
 8005024:	f9ff800f 	.word	0xf9ff800f

08005028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e042      	b.n	80050c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fb ffcd 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2224      	movs	r2, #36	@ 0x24
 8005056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fbb2 	bl	80057dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8b3 	bl	80051e4 <UART_SetConfig>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e01b      	b.n	80050c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fc31 	bl	8005920 <UART_CheckIdleState>
 80050be:	4603      	mov	r3, r0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d17b      	bne.n	80051da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_UART_Transmit+0x26>
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e074      	b.n	80051dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2221      	movs	r2, #33	@ 0x21
 80050fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005102:	f7fc f955 	bl	80013b0 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005120:	d108      	bne.n	8005134 <HAL_UART_Transmit+0x6c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513c:	e030      	b.n	80051a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fc93 	bl	8005a74 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e03d      	b.n	80051dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	881a      	ldrh	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005172:	b292      	uxth	r2, r2
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3302      	adds	r3, #2
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e007      	b.n	800518e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	3301      	adds	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1c8      	bne.n	800513e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2140      	movs	r1, #64	@ 0x40
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fc5c 	bl	8005a74 <UART_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e006      	b.n	80051dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b08c      	sub	sp, #48	@ 0x30
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4313      	orrs	r3, r2
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4baa      	ldr	r3, [pc, #680]	@ (80054bc <UART_SetConfig+0x2d8>)
 8005214:	4013      	ands	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800521c:	430b      	orrs	r3, r1
 800521e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a9f      	ldr	r2, [pc, #636]	@ (80054c0 <UART_SetConfig+0x2dc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524c:	4313      	orrs	r3, r2
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800525a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	430b      	orrs	r3, r1
 8005266:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f023 010f 	bic.w	r1, r3, #15
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a90      	ldr	r2, [pc, #576]	@ (80054c4 <UART_SetConfig+0x2e0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d125      	bne.n	80052d4 <UART_SetConfig+0xf0>
 8005288:	4b8f      	ldr	r3, [pc, #572]	@ (80054c8 <UART_SetConfig+0x2e4>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b03      	cmp	r3, #3
 8005294:	d81a      	bhi.n	80052cc <UART_SetConfig+0xe8>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <UART_SetConfig+0xb8>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e116      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e112      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e10e      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e10a      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e106      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a7c      	ldr	r2, [pc, #496]	@ (80054cc <UART_SetConfig+0x2e8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d138      	bne.n	8005350 <UART_SetConfig+0x16c>
 80052de:	4b7a      	ldr	r3, [pc, #488]	@ (80054c8 <UART_SetConfig+0x2e4>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	d82d      	bhi.n	8005348 <UART_SetConfig+0x164>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x110>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005329 	.word	0x08005329
 80052f8:	08005349 	.word	0x08005349
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005349 	.word	0x08005349
 8005304:	08005339 	.word	0x08005339
 8005308:	08005349 	.word	0x08005349
 800530c:	08005349 	.word	0x08005349
 8005310:	08005349 	.word	0x08005349
 8005314:	08005331 	.word	0x08005331
 8005318:	08005349 	.word	0x08005349
 800531c:	08005349 	.word	0x08005349
 8005320:	08005349 	.word	0x08005349
 8005324:	08005341 	.word	0x08005341
 8005328:	2300      	movs	r3, #0
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532e:	e0d8      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005330:	2302      	movs	r3, #2
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005336:	e0d4      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533e:	e0d0      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005346:	e0cc      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534e:	e0c8      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5e      	ldr	r2, [pc, #376]	@ (80054d0 <UART_SetConfig+0x2ec>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d125      	bne.n	80053a6 <UART_SetConfig+0x1c2>
 800535a:	4b5b      	ldr	r3, [pc, #364]	@ (80054c8 <UART_SetConfig+0x2e4>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005360:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005364:	2b30      	cmp	r3, #48	@ 0x30
 8005366:	d016      	beq.n	8005396 <UART_SetConfig+0x1b2>
 8005368:	2b30      	cmp	r3, #48	@ 0x30
 800536a:	d818      	bhi.n	800539e <UART_SetConfig+0x1ba>
 800536c:	2b20      	cmp	r3, #32
 800536e:	d00a      	beq.n	8005386 <UART_SetConfig+0x1a2>
 8005370:	2b20      	cmp	r3, #32
 8005372:	d814      	bhi.n	800539e <UART_SetConfig+0x1ba>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <UART_SetConfig+0x19a>
 8005378:	2b10      	cmp	r3, #16
 800537a:	d008      	beq.n	800538e <UART_SetConfig+0x1aa>
 800537c:	e00f      	b.n	800539e <UART_SetConfig+0x1ba>
 800537e:	2300      	movs	r3, #0
 8005380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005384:	e0ad      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005386:	2302      	movs	r3, #2
 8005388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538c:	e0a9      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800538e:	2304      	movs	r3, #4
 8005390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005394:	e0a5      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005396:	2308      	movs	r3, #8
 8005398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539c:	e0a1      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800539e:	2310      	movs	r3, #16
 80053a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a4:	e09d      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4a      	ldr	r2, [pc, #296]	@ (80054d4 <UART_SetConfig+0x2f0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d125      	bne.n	80053fc <UART_SetConfig+0x218>
 80053b0:	4b45      	ldr	r3, [pc, #276]	@ (80054c8 <UART_SetConfig+0x2e4>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80053bc:	d016      	beq.n	80053ec <UART_SetConfig+0x208>
 80053be:	2bc0      	cmp	r3, #192	@ 0xc0
 80053c0:	d818      	bhi.n	80053f4 <UART_SetConfig+0x210>
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d00a      	beq.n	80053dc <UART_SetConfig+0x1f8>
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	d814      	bhi.n	80053f4 <UART_SetConfig+0x210>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <UART_SetConfig+0x1f0>
 80053ce:	2b40      	cmp	r3, #64	@ 0x40
 80053d0:	d008      	beq.n	80053e4 <UART_SetConfig+0x200>
 80053d2:	e00f      	b.n	80053f4 <UART_SetConfig+0x210>
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e082      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053dc:	2302      	movs	r3, #2
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e07e      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e07a      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053ec:	2308      	movs	r3, #8
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e076      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e072      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <UART_SetConfig+0x2f4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d12a      	bne.n	800545c <UART_SetConfig+0x278>
 8005406:	4b30      	ldr	r3, [pc, #192]	@ (80054c8 <UART_SetConfig+0x2e4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005414:	d01a      	beq.n	800544c <UART_SetConfig+0x268>
 8005416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541a:	d81b      	bhi.n	8005454 <UART_SetConfig+0x270>
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	d00c      	beq.n	800543c <UART_SetConfig+0x258>
 8005422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005426:	d815      	bhi.n	8005454 <UART_SetConfig+0x270>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <UART_SetConfig+0x250>
 800542c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005430:	d008      	beq.n	8005444 <UART_SetConfig+0x260>
 8005432:	e00f      	b.n	8005454 <UART_SetConfig+0x270>
 8005434:	2300      	movs	r3, #0
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543a:	e052      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800543c:	2302      	movs	r3, #2
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005442:	e04e      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544a:	e04a      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005452:	e046      	b.n	80054e2 <UART_SetConfig+0x2fe>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545a:	e042      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <UART_SetConfig+0x2dc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d13a      	bne.n	80054dc <UART_SetConfig+0x2f8>
 8005466:	4b18      	ldr	r3, [pc, #96]	@ (80054c8 <UART_SetConfig+0x2e4>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005474:	d01a      	beq.n	80054ac <UART_SetConfig+0x2c8>
 8005476:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800547a:	d81b      	bhi.n	80054b4 <UART_SetConfig+0x2d0>
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005480:	d00c      	beq.n	800549c <UART_SetConfig+0x2b8>
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005486:	d815      	bhi.n	80054b4 <UART_SetConfig+0x2d0>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <UART_SetConfig+0x2b0>
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005490:	d008      	beq.n	80054a4 <UART_SetConfig+0x2c0>
 8005492:	e00f      	b.n	80054b4 <UART_SetConfig+0x2d0>
 8005494:	2300      	movs	r3, #0
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e022      	b.n	80054e2 <UART_SetConfig+0x2fe>
 800549c:	2302      	movs	r3, #2
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e01e      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e01a      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e016      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	e012      	b.n	80054e2 <UART_SetConfig+0x2fe>
 80054bc:	cfff69f3 	.word	0xcfff69f3
 80054c0:	40008000 	.word	0x40008000
 80054c4:	40013800 	.word	0x40013800
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40004400 	.word	0x40004400
 80054d0:	40004800 	.word	0x40004800
 80054d4:	40004c00 	.word	0x40004c00
 80054d8:	40005000 	.word	0x40005000
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4aae      	ldr	r2, [pc, #696]	@ (80057a0 <UART_SetConfig+0x5bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	f040 8097 	bne.w	800561c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d823      	bhi.n	800553e <UART_SetConfig+0x35a>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <UART_SetConfig+0x318>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005521 	.word	0x08005521
 8005500:	0800553f 	.word	0x0800553f
 8005504:	08005529 	.word	0x08005529
 8005508:	0800553f 	.word	0x0800553f
 800550c:	0800552f 	.word	0x0800552f
 8005510:	0800553f 	.word	0x0800553f
 8005514:	0800553f 	.word	0x0800553f
 8005518:	0800553f 	.word	0x0800553f
 800551c:	08005537 	.word	0x08005537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005520:	f7fe ff7e 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005526:	e010      	b.n	800554a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005528:	4b9e      	ldr	r3, [pc, #632]	@ (80057a4 <UART_SetConfig+0x5c0>)
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800552c:	e00d      	b.n	800554a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800552e:	f7fe fedf 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 8005532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005534:	e009      	b.n	800554a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800553c:	e005      	b.n	800554a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8130 	beq.w	80057b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	4a94      	ldr	r2, [pc, #592]	@ (80057a8 <UART_SetConfig+0x5c4>)
 8005558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555c:	461a      	mov	r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	fbb3 f3f2 	udiv	r3, r3, r2
 8005564:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d305      	bcc.n	8005582 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	429a      	cmp	r2, r3
 8005580:	d903      	bls.n	800558a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005588:	e113      	b.n	80057b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	2200      	movs	r2, #0
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	60fa      	str	r2, [r7, #12]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	4a84      	ldr	r2, [pc, #528]	@ (80057a8 <UART_SetConfig+0x5c4>)
 8005598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800559c:	b29b      	uxth	r3, r3
 800559e:	2200      	movs	r2, #0
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ac:	f7fa fe78 	bl	80002a0 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4610      	mov	r0, r2
 80055b6:	4619      	mov	r1, r3
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	020b      	lsls	r3, r1, #8
 80055c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055c6:	0202      	lsls	r2, r0, #8
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	6849      	ldr	r1, [r1, #4]
 80055cc:	0849      	lsrs	r1, r1, #1
 80055ce:	2000      	movs	r0, #0
 80055d0:	460c      	mov	r4, r1
 80055d2:	4605      	mov	r5, r0
 80055d4:	eb12 0804 	adds.w	r8, r2, r4
 80055d8:	eb43 0905 	adc.w	r9, r3, r5
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	469a      	mov	sl, r3
 80055e4:	4693      	mov	fp, r2
 80055e6:	4652      	mov	r2, sl
 80055e8:	465b      	mov	r3, fp
 80055ea:	4640      	mov	r0, r8
 80055ec:	4649      	mov	r1, r9
 80055ee:	f7fa fe57 	bl	80002a0 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4613      	mov	r3, r2
 80055f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005600:	d308      	bcc.n	8005614 <UART_SetConfig+0x430>
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005608:	d204      	bcs.n	8005614 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	e0ce      	b.n	80057b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800561a:	e0ca      	b.n	80057b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005624:	d166      	bne.n	80056f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005626:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800562a:	2b08      	cmp	r3, #8
 800562c:	d827      	bhi.n	800567e <UART_SetConfig+0x49a>
 800562e:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <UART_SetConfig+0x450>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe fee2 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565e:	e014      	b.n	800568a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe fef4 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005666:	e010      	b.n	800568a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <UART_SetConfig+0x5c0>)
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800566c:	e00d      	b.n	800568a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe fe3f 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 8005672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005674:	e009      	b.n	800568a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800567c:	e005      	b.n	800568a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8090 	beq.w	80057b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4a44      	ldr	r2, [pc, #272]	@ (80057a8 <UART_SetConfig+0x5c4>)
 8005698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569c:	461a      	mov	r2, r3
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a4:	005a      	lsls	r2, r3, #1
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	441a      	add	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d916      	bls.n	80056ec <UART_SetConfig+0x508>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	d212      	bcs.n	80056ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f023 030f 	bic.w	r3, r3, #15
 80056ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	b29a      	uxth	r2, r3
 80056dc:	8bfb      	ldrh	r3, [r7, #30]
 80056de:	4313      	orrs	r3, r2
 80056e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	8bfa      	ldrh	r2, [r7, #30]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	e062      	b.n	80057b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056f2:	e05e      	b.n	80057b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d828      	bhi.n	800574e <UART_SetConfig+0x56a>
 80056fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <UART_SetConfig+0x520>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005729 	.word	0x08005729
 8005708:	08005731 	.word	0x08005731
 800570c:	08005739 	.word	0x08005739
 8005710:	0800574f 	.word	0x0800574f
 8005714:	0800573f 	.word	0x0800573f
 8005718:	0800574f 	.word	0x0800574f
 800571c:	0800574f 	.word	0x0800574f
 8005720:	0800574f 	.word	0x0800574f
 8005724:	08005747 	.word	0x08005747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7fe fe7a 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800572e:	e014      	b.n	800575a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005730:	f7fe fe8c 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005736:	e010      	b.n	800575a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005738:	4b1a      	ldr	r3, [pc, #104]	@ (80057a4 <UART_SetConfig+0x5c0>)
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800573c:	e00d      	b.n	800575a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573e:	f7fe fdd7 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005744:	e009      	b.n	800575a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800574c:	e005      	b.n	800575a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005758:	bf00      	nop
    }

    if (pclk != 0U)
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d028      	beq.n	80057b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	4a10      	ldr	r2, [pc, #64]	@ (80057a8 <UART_SetConfig+0x5c4>)
 8005766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800576a:	461a      	mov	r2, r3
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	441a      	add	r2, r3
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d910      	bls.n	80057ac <UART_SetConfig+0x5c8>
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005790:	d20c      	bcs.n	80057ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	b29a      	uxth	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	e009      	b.n	80057b2 <UART_SetConfig+0x5ce>
 800579e:	bf00      	nop
 80057a0:	40008000 	.word	0x40008000
 80057a4:	00f42400 	.word	0x00f42400
 80057a8:	08006d3c 	.word	0x08006d3c
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2201      	movs	r2, #1
 80057be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3730      	adds	r7, #48	@ 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058da:	d10a      	bne.n	80058f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b098      	sub	sp, #96	@ 0x60
 8005924:	af02      	add	r7, sp, #8
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005930:	f7fb fd3e 	bl	80013b0 <HAL_GetTick>
 8005934:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b08      	cmp	r3, #8
 8005942:	d12f      	bne.n	80059a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f88e 	bl	8005a74 <UART_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d022      	beq.n	80059a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005972:	653b      	str	r3, [r7, #80]	@ 0x50
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
 800597e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e063      	b.n	8005a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d149      	bne.n	8005a46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ba:	2200      	movs	r2, #0
 80059bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f857 	bl	8005a74 <UART_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03c      	beq.n	8005a46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	623b      	str	r3, [r7, #32]
   return(result);
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a1e:	61fa      	str	r2, [r7, #28]
 8005a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	69b9      	ldr	r1, [r7, #24]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e5      	bne.n	80059fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e012      	b.n	8005a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3758      	adds	r7, #88	@ 0x58
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a84:	e04f      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a8c:	d04b      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8e:	f7fb fc8f 	bl	80013b0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e04e      	b.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d037      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b80      	cmp	r3, #128	@ 0x80
 8005aba:	d034      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d031      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d110      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f838 	bl	8005b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e029      	b.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b00:	d111      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f81e 	bl	8005b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e00f      	b.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	bf0c      	ite	eq
 8005b36:	2301      	moveq	r3, #1
 8005b38:	2300      	movne	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d0a0      	beq.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b095      	sub	sp, #84	@ 0x54
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e3      	bne.n	8005b88 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d118      	bne.n	8005bfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c0e:	bf00      	nop
 8005c10:	3754      	adds	r7, #84	@ 0x54
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e027      	b.n	8005c80 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	@ 0x24
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e02d      	b.n	8005d00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2224      	movs	r2, #36	@ 0x24
 8005cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f84f 	bl	8005d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e02d      	b.n	8005d7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	@ 0x24
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f811 	bl	8005d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d108      	bne.n	8005da6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005da4:	e031      	b.n	8005e0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005da6:	2308      	movs	r3, #8
 8005da8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005daa:	2308      	movs	r3, #8
 8005dac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	0e5b      	lsrs	r3, r3, #25
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	0f5b      	lsrs	r3, r3, #29
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	7b3a      	ldrb	r2, [r7, #12]
 8005dd2:	4911      	ldr	r1, [pc, #68]	@ (8005e18 <UARTEx_SetNbDataToProcess+0x94>)
 8005dd4:	5c8a      	ldrb	r2, [r1, r2]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dda:	7b3a      	ldrb	r2, [r7, #12]
 8005ddc:	490f      	ldr	r1, [pc, #60]	@ (8005e1c <UARTEx_SetNbDataToProcess+0x98>)
 8005dde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	7b7a      	ldrb	r2, [r7, #13]
 8005df0:	4909      	ldr	r1, [pc, #36]	@ (8005e18 <UARTEx_SetNbDataToProcess+0x94>)
 8005df2:	5c8a      	ldrb	r2, [r1, r2]
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005df8:	7b7a      	ldrb	r2, [r7, #13]
 8005dfa:	4908      	ldr	r1, [pc, #32]	@ (8005e1c <UARTEx_SetNbDataToProcess+0x98>)
 8005dfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	08006d54 	.word	0x08006d54
 8005e1c:	08006d5c 	.word	0x08006d5c

08005e20 <std>:
 8005e20:	2300      	movs	r3, #0
 8005e22:	b510      	push	{r4, lr}
 8005e24:	4604      	mov	r4, r0
 8005e26:	e9c0 3300 	strd	r3, r3, [r0]
 8005e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e2e:	6083      	str	r3, [r0, #8]
 8005e30:	8181      	strh	r1, [r0, #12]
 8005e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e34:	81c2      	strh	r2, [r0, #14]
 8005e36:	6183      	str	r3, [r0, #24]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	305c      	adds	r0, #92	@ 0x5c
 8005e3e:	f000 f8c3 	bl	8005fc8 <memset>
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <std+0x58>)
 8005e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <std+0x5c>)
 8005e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <std+0x60>)
 8005e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <std+0x64>)
 8005e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <std+0x68>)
 8005e54:	6224      	str	r4, [r4, #32]
 8005e56:	429c      	cmp	r4, r3
 8005e58:	d006      	beq.n	8005e68 <std+0x48>
 8005e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e5e:	4294      	cmp	r4, r2
 8005e60:	d002      	beq.n	8005e68 <std+0x48>
 8005e62:	33d0      	adds	r3, #208	@ 0xd0
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d105      	bne.n	8005e74 <std+0x54>
 8005e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f000 b8dc 	b.w	800602c <__retarget_lock_init_recursive>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	08006881 	.word	0x08006881
 8005e7c:	080068a3 	.word	0x080068a3
 8005e80:	080068db 	.word	0x080068db
 8005e84:	080068ff 	.word	0x080068ff
 8005e88:	20040204 	.word	0x20040204

08005e8c <stdio_exit_handler>:
 8005e8c:	4a02      	ldr	r2, [pc, #8]	@ (8005e98 <stdio_exit_handler+0xc>)
 8005e8e:	4903      	ldr	r1, [pc, #12]	@ (8005e9c <stdio_exit_handler+0x10>)
 8005e90:	4803      	ldr	r0, [pc, #12]	@ (8005ea0 <stdio_exit_handler+0x14>)
 8005e92:	f000 b869 	b.w	8005f68 <_fwalk_sglue>
 8005e96:	bf00      	nop
 8005e98:	2004000c 	.word	0x2004000c
 8005e9c:	08006819 	.word	0x08006819
 8005ea0:	2004001c 	.word	0x2004001c

08005ea4 <cleanup_stdio>:
 8005ea4:	6841      	ldr	r1, [r0, #4]
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <cleanup_stdio+0x34>)
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	4604      	mov	r4, r0
 8005eae:	d001      	beq.n	8005eb4 <cleanup_stdio+0x10>
 8005eb0:	f000 fcb2 	bl	8006818 <_fflush_r>
 8005eb4:	68a1      	ldr	r1, [r4, #8]
 8005eb6:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <cleanup_stdio+0x38>)
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	d002      	beq.n	8005ec2 <cleanup_stdio+0x1e>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fcab 	bl	8006818 <_fflush_r>
 8005ec2:	68e1      	ldr	r1, [r4, #12]
 8005ec4:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <cleanup_stdio+0x3c>)
 8005ec6:	4299      	cmp	r1, r3
 8005ec8:	d004      	beq.n	8005ed4 <cleanup_stdio+0x30>
 8005eca:	4620      	mov	r0, r4
 8005ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed0:	f000 bca2 	b.w	8006818 <_fflush_r>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20040204 	.word	0x20040204
 8005edc:	2004026c 	.word	0x2004026c
 8005ee0:	200402d4 	.word	0x200402d4

08005ee4 <global_stdio_init.part.0>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <global_stdio_init.part.0+0x30>)
 8005ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8005f18 <global_stdio_init.part.0+0x34>)
 8005eea:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <global_stdio_init.part.0+0x38>)
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	f7ff ff94 	bl	8005e20 <std>
 8005ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005efc:	2201      	movs	r2, #1
 8005efe:	2109      	movs	r1, #9
 8005f00:	f7ff ff8e 	bl	8005e20 <std>
 8005f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f08:	2202      	movs	r2, #2
 8005f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0e:	2112      	movs	r1, #18
 8005f10:	f7ff bf86 	b.w	8005e20 <std>
 8005f14:	2004033c 	.word	0x2004033c
 8005f18:	20040204 	.word	0x20040204
 8005f1c:	08005e8d 	.word	0x08005e8d

08005f20 <__sfp_lock_acquire>:
 8005f20:	4801      	ldr	r0, [pc, #4]	@ (8005f28 <__sfp_lock_acquire+0x8>)
 8005f22:	f000 b884 	b.w	800602e <__retarget_lock_acquire_recursive>
 8005f26:	bf00      	nop
 8005f28:	20040341 	.word	0x20040341

08005f2c <__sfp_lock_release>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	@ (8005f34 <__sfp_lock_release+0x8>)
 8005f2e:	f000 b87f 	b.w	8006030 <__retarget_lock_release_recursive>
 8005f32:	bf00      	nop
 8005f34:	20040341 	.word	0x20040341

08005f38 <__sinit>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	f7ff fff0 	bl	8005f20 <__sfp_lock_acquire>
 8005f40:	6a23      	ldr	r3, [r4, #32]
 8005f42:	b11b      	cbz	r3, 8005f4c <__sinit+0x14>
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f7ff bff0 	b.w	8005f2c <__sfp_lock_release>
 8005f4c:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <__sinit+0x28>)
 8005f4e:	6223      	str	r3, [r4, #32]
 8005f50:	4b04      	ldr	r3, [pc, #16]	@ (8005f64 <__sinit+0x2c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f5      	bne.n	8005f44 <__sinit+0xc>
 8005f58:	f7ff ffc4 	bl	8005ee4 <global_stdio_init.part.0>
 8005f5c:	e7f2      	b.n	8005f44 <__sinit+0xc>
 8005f5e:	bf00      	nop
 8005f60:	08005ea5 	.word	0x08005ea5
 8005f64:	2004033c 	.word	0x2004033c

08005f68 <_fwalk_sglue>:
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	4688      	mov	r8, r1
 8005f70:	4614      	mov	r4, r2
 8005f72:	2600      	movs	r6, #0
 8005f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f78:	f1b9 0901 	subs.w	r9, r9, #1
 8005f7c:	d505      	bpl.n	8005f8a <_fwalk_sglue+0x22>
 8005f7e:	6824      	ldr	r4, [r4, #0]
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d1f7      	bne.n	8005f74 <_fwalk_sglue+0xc>
 8005f84:	4630      	mov	r0, r6
 8005f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	89ab      	ldrh	r3, [r5, #12]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d907      	bls.n	8005fa0 <_fwalk_sglue+0x38>
 8005f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f94:	3301      	adds	r3, #1
 8005f96:	d003      	beq.n	8005fa0 <_fwalk_sglue+0x38>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	47c0      	blx	r8
 8005f9e:	4306      	orrs	r6, r0
 8005fa0:	3568      	adds	r5, #104	@ 0x68
 8005fa2:	e7e9      	b.n	8005f78 <_fwalk_sglue+0x10>

08005fa4 <iprintf>:
 8005fa4:	b40f      	push	{r0, r1, r2, r3}
 8005fa6:	b507      	push	{r0, r1, r2, lr}
 8005fa8:	4906      	ldr	r1, [pc, #24]	@ (8005fc4 <iprintf+0x20>)
 8005faa:	ab04      	add	r3, sp, #16
 8005fac:	6808      	ldr	r0, [r1, #0]
 8005fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb2:	6881      	ldr	r1, [r0, #8]
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	f000 f865 	bl	8006084 <_vfiprintf_r>
 8005fba:	b003      	add	sp, #12
 8005fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc0:	b004      	add	sp, #16
 8005fc2:	4770      	bx	lr
 8005fc4:	20040018 	.word	0x20040018

08005fc8 <memset>:
 8005fc8:	4402      	add	r2, r0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d100      	bne.n	8005fd2 <memset+0xa>
 8005fd0:	4770      	bx	lr
 8005fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd6:	e7f9      	b.n	8005fcc <memset+0x4>

08005fd8 <__errno>:
 8005fd8:	4b01      	ldr	r3, [pc, #4]	@ (8005fe0 <__errno+0x8>)
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20040018 	.word	0x20040018

08005fe4 <__libc_init_array>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800601c <__libc_init_array+0x38>)
 8005fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8006020 <__libc_init_array+0x3c>)
 8005fea:	1b64      	subs	r4, r4, r5
 8005fec:	10a4      	asrs	r4, r4, #2
 8005fee:	2600      	movs	r6, #0
 8005ff0:	42a6      	cmp	r6, r4
 8005ff2:	d109      	bne.n	8006008 <__libc_init_array+0x24>
 8005ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8006024 <__libc_init_array+0x40>)
 8005ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8006028 <__libc_init_array+0x44>)
 8005ff8:	f000 fe3e 	bl	8006c78 <_init>
 8005ffc:	1b64      	subs	r4, r4, r5
 8005ffe:	10a4      	asrs	r4, r4, #2
 8006000:	2600      	movs	r6, #0
 8006002:	42a6      	cmp	r6, r4
 8006004:	d105      	bne.n	8006012 <__libc_init_array+0x2e>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	f855 3b04 	ldr.w	r3, [r5], #4
 800600c:	4798      	blx	r3
 800600e:	3601      	adds	r6, #1
 8006010:	e7ee      	b.n	8005ff0 <__libc_init_array+0xc>
 8006012:	f855 3b04 	ldr.w	r3, [r5], #4
 8006016:	4798      	blx	r3
 8006018:	3601      	adds	r6, #1
 800601a:	e7f2      	b.n	8006002 <__libc_init_array+0x1e>
 800601c:	08006da0 	.word	0x08006da0
 8006020:	08006da0 	.word	0x08006da0
 8006024:	08006da0 	.word	0x08006da0
 8006028:	08006da4 	.word	0x08006da4

0800602c <__retarget_lock_init_recursive>:
 800602c:	4770      	bx	lr

0800602e <__retarget_lock_acquire_recursive>:
 800602e:	4770      	bx	lr

08006030 <__retarget_lock_release_recursive>:
 8006030:	4770      	bx	lr

08006032 <__sfputc_r>:
 8006032:	6893      	ldr	r3, [r2, #8]
 8006034:	3b01      	subs	r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	b410      	push	{r4}
 800603a:	6093      	str	r3, [r2, #8]
 800603c:	da08      	bge.n	8006050 <__sfputc_r+0x1e>
 800603e:	6994      	ldr	r4, [r2, #24]
 8006040:	42a3      	cmp	r3, r4
 8006042:	db01      	blt.n	8006048 <__sfputc_r+0x16>
 8006044:	290a      	cmp	r1, #10
 8006046:	d103      	bne.n	8006050 <__sfputc_r+0x1e>
 8006048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800604c:	f000 bc5b 	b.w	8006906 <__swbuf_r>
 8006050:	6813      	ldr	r3, [r2, #0]
 8006052:	1c58      	adds	r0, r3, #1
 8006054:	6010      	str	r0, [r2, #0]
 8006056:	7019      	strb	r1, [r3, #0]
 8006058:	4608      	mov	r0, r1
 800605a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800605e:	4770      	bx	lr

08006060 <__sfputs_r>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	4606      	mov	r6, r0
 8006064:	460f      	mov	r7, r1
 8006066:	4614      	mov	r4, r2
 8006068:	18d5      	adds	r5, r2, r3
 800606a:	42ac      	cmp	r4, r5
 800606c:	d101      	bne.n	8006072 <__sfputs_r+0x12>
 800606e:	2000      	movs	r0, #0
 8006070:	e007      	b.n	8006082 <__sfputs_r+0x22>
 8006072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006076:	463a      	mov	r2, r7
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffda 	bl	8006032 <__sfputc_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d1f3      	bne.n	800606a <__sfputs_r+0xa>
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006084 <_vfiprintf_r>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	460d      	mov	r5, r1
 800608a:	b09d      	sub	sp, #116	@ 0x74
 800608c:	4614      	mov	r4, r2
 800608e:	4698      	mov	r8, r3
 8006090:	4606      	mov	r6, r0
 8006092:	b118      	cbz	r0, 800609c <_vfiprintf_r+0x18>
 8006094:	6a03      	ldr	r3, [r0, #32]
 8006096:	b90b      	cbnz	r3, 800609c <_vfiprintf_r+0x18>
 8006098:	f7ff ff4e 	bl	8005f38 <__sinit>
 800609c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_vfiprintf_r+0x2a>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_vfiprintf_r+0x2a>
 80060a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060aa:	f7ff ffc0 	bl	800602e <__retarget_lock_acquire_recursive>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d501      	bpl.n	80060b8 <_vfiprintf_r+0x34>
 80060b4:	692b      	ldr	r3, [r5, #16]
 80060b6:	b99b      	cbnz	r3, 80060e0 <_vfiprintf_r+0x5c>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f000 fc62 	bl	8006984 <__swsetup_r>
 80060c0:	b170      	cbz	r0, 80060e0 <_vfiprintf_r+0x5c>
 80060c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c4:	07dc      	lsls	r4, r3, #31
 80060c6:	d504      	bpl.n	80060d2 <_vfiprintf_r+0x4e>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060cc:	b01d      	add	sp, #116	@ 0x74
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	0598      	lsls	r0, r3, #22
 80060d6:	d4f7      	bmi.n	80060c8 <_vfiprintf_r+0x44>
 80060d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060da:	f7ff ffa9 	bl	8006030 <__retarget_lock_release_recursive>
 80060de:	e7f3      	b.n	80060c8 <_vfiprintf_r+0x44>
 80060e0:	2300      	movs	r3, #0
 80060e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e4:	2320      	movs	r3, #32
 80060e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ee:	2330      	movs	r3, #48	@ 0x30
 80060f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062a0 <_vfiprintf_r+0x21c>
 80060f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060f8:	f04f 0901 	mov.w	r9, #1
 80060fc:	4623      	mov	r3, r4
 80060fe:	469a      	mov	sl, r3
 8006100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006104:	b10a      	cbz	r2, 800610a <_vfiprintf_r+0x86>
 8006106:	2a25      	cmp	r2, #37	@ 0x25
 8006108:	d1f9      	bne.n	80060fe <_vfiprintf_r+0x7a>
 800610a:	ebba 0b04 	subs.w	fp, sl, r4
 800610e:	d00b      	beq.n	8006128 <_vfiprintf_r+0xa4>
 8006110:	465b      	mov	r3, fp
 8006112:	4622      	mov	r2, r4
 8006114:	4629      	mov	r1, r5
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ffa2 	bl	8006060 <__sfputs_r>
 800611c:	3001      	adds	r0, #1
 800611e:	f000 80a7 	beq.w	8006270 <_vfiprintf_r+0x1ec>
 8006122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006124:	445a      	add	r2, fp
 8006126:	9209      	str	r2, [sp, #36]	@ 0x24
 8006128:	f89a 3000 	ldrb.w	r3, [sl]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 809f 	beq.w	8006270 <_vfiprintf_r+0x1ec>
 8006132:	2300      	movs	r3, #0
 8006134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	9307      	str	r3, [sp, #28]
 8006144:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006148:	931a      	str	r3, [sp, #104]	@ 0x68
 800614a:	4654      	mov	r4, sl
 800614c:	2205      	movs	r2, #5
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	4853      	ldr	r0, [pc, #332]	@ (80062a0 <_vfiprintf_r+0x21c>)
 8006154:	f7fa f854 	bl	8000200 <memchr>
 8006158:	9a04      	ldr	r2, [sp, #16]
 800615a:	b9d8      	cbnz	r0, 8006194 <_vfiprintf_r+0x110>
 800615c:	06d1      	lsls	r1, r2, #27
 800615e:	bf44      	itt	mi
 8006160:	2320      	movmi	r3, #32
 8006162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006166:	0713      	lsls	r3, r2, #28
 8006168:	bf44      	itt	mi
 800616a:	232b      	movmi	r3, #43	@ 0x2b
 800616c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006170:	f89a 3000 	ldrb.w	r3, [sl]
 8006174:	2b2a      	cmp	r3, #42	@ 0x2a
 8006176:	d015      	beq.n	80061a4 <_vfiprintf_r+0x120>
 8006178:	9a07      	ldr	r2, [sp, #28]
 800617a:	4654      	mov	r4, sl
 800617c:	2000      	movs	r0, #0
 800617e:	f04f 0c0a 	mov.w	ip, #10
 8006182:	4621      	mov	r1, r4
 8006184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006188:	3b30      	subs	r3, #48	@ 0x30
 800618a:	2b09      	cmp	r3, #9
 800618c:	d94b      	bls.n	8006226 <_vfiprintf_r+0x1a2>
 800618e:	b1b0      	cbz	r0, 80061be <_vfiprintf_r+0x13a>
 8006190:	9207      	str	r2, [sp, #28]
 8006192:	e014      	b.n	80061be <_vfiprintf_r+0x13a>
 8006194:	eba0 0308 	sub.w	r3, r0, r8
 8006198:	fa09 f303 	lsl.w	r3, r9, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	46a2      	mov	sl, r4
 80061a2:	e7d2      	b.n	800614a <_vfiprintf_r+0xc6>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1d19      	adds	r1, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9103      	str	r1, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfbb      	ittet	lt
 80061b0:	425b      	neglt	r3, r3
 80061b2:	f042 0202 	orrlt.w	r2, r2, #2
 80061b6:	9307      	strge	r3, [sp, #28]
 80061b8:	9307      	strlt	r3, [sp, #28]
 80061ba:	bfb8      	it	lt
 80061bc:	9204      	strlt	r2, [sp, #16]
 80061be:	7823      	ldrb	r3, [r4, #0]
 80061c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80061c2:	d10a      	bne.n	80061da <_vfiprintf_r+0x156>
 80061c4:	7863      	ldrb	r3, [r4, #1]
 80061c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80061c8:	d132      	bne.n	8006230 <_vfiprintf_r+0x1ac>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	1d1a      	adds	r2, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	9203      	str	r2, [sp, #12]
 80061d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061d6:	3402      	adds	r4, #2
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062b0 <_vfiprintf_r+0x22c>
 80061de:	7821      	ldrb	r1, [r4, #0]
 80061e0:	2203      	movs	r2, #3
 80061e2:	4650      	mov	r0, sl
 80061e4:	f7fa f80c 	bl	8000200 <memchr>
 80061e8:	b138      	cbz	r0, 80061fa <_vfiprintf_r+0x176>
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	eba0 000a 	sub.w	r0, r0, sl
 80061f0:	2240      	movs	r2, #64	@ 0x40
 80061f2:	4082      	lsls	r2, r0
 80061f4:	4313      	orrs	r3, r2
 80061f6:	3401      	adds	r4, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fe:	4829      	ldr	r0, [pc, #164]	@ (80062a4 <_vfiprintf_r+0x220>)
 8006200:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006204:	2206      	movs	r2, #6
 8006206:	f7f9 fffb 	bl	8000200 <memchr>
 800620a:	2800      	cmp	r0, #0
 800620c:	d03f      	beq.n	800628e <_vfiprintf_r+0x20a>
 800620e:	4b26      	ldr	r3, [pc, #152]	@ (80062a8 <_vfiprintf_r+0x224>)
 8006210:	bb1b      	cbnz	r3, 800625a <_vfiprintf_r+0x1d6>
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	3307      	adds	r3, #7
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	3308      	adds	r3, #8
 800621c:	9303      	str	r3, [sp, #12]
 800621e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006220:	443b      	add	r3, r7
 8006222:	9309      	str	r3, [sp, #36]	@ 0x24
 8006224:	e76a      	b.n	80060fc <_vfiprintf_r+0x78>
 8006226:	fb0c 3202 	mla	r2, ip, r2, r3
 800622a:	460c      	mov	r4, r1
 800622c:	2001      	movs	r0, #1
 800622e:	e7a8      	b.n	8006182 <_vfiprintf_r+0xfe>
 8006230:	2300      	movs	r3, #0
 8006232:	3401      	adds	r4, #1
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	4619      	mov	r1, r3
 8006238:	f04f 0c0a 	mov.w	ip, #10
 800623c:	4620      	mov	r0, r4
 800623e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006242:	3a30      	subs	r2, #48	@ 0x30
 8006244:	2a09      	cmp	r2, #9
 8006246:	d903      	bls.n	8006250 <_vfiprintf_r+0x1cc>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0c6      	beq.n	80061da <_vfiprintf_r+0x156>
 800624c:	9105      	str	r1, [sp, #20]
 800624e:	e7c4      	b.n	80061da <_vfiprintf_r+0x156>
 8006250:	fb0c 2101 	mla	r1, ip, r1, r2
 8006254:	4604      	mov	r4, r0
 8006256:	2301      	movs	r3, #1
 8006258:	e7f0      	b.n	800623c <_vfiprintf_r+0x1b8>
 800625a:	ab03      	add	r3, sp, #12
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462a      	mov	r2, r5
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <_vfiprintf_r+0x228>)
 8006262:	a904      	add	r1, sp, #16
 8006264:	4630      	mov	r0, r6
 8006266:	f3af 8000 	nop.w
 800626a:	4607      	mov	r7, r0
 800626c:	1c78      	adds	r0, r7, #1
 800626e:	d1d6      	bne.n	800621e <_vfiprintf_r+0x19a>
 8006270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006272:	07d9      	lsls	r1, r3, #31
 8006274:	d405      	bmi.n	8006282 <_vfiprintf_r+0x1fe>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	059a      	lsls	r2, r3, #22
 800627a:	d402      	bmi.n	8006282 <_vfiprintf_r+0x1fe>
 800627c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800627e:	f7ff fed7 	bl	8006030 <__retarget_lock_release_recursive>
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	065b      	lsls	r3, r3, #25
 8006286:	f53f af1f 	bmi.w	80060c8 <_vfiprintf_r+0x44>
 800628a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800628c:	e71e      	b.n	80060cc <_vfiprintf_r+0x48>
 800628e:	ab03      	add	r3, sp, #12
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	462a      	mov	r2, r5
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <_vfiprintf_r+0x228>)
 8006296:	a904      	add	r1, sp, #16
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f91b 	bl	80064d4 <_printf_i>
 800629e:	e7e4      	b.n	800626a <_vfiprintf_r+0x1e6>
 80062a0:	08006d64 	.word	0x08006d64
 80062a4:	08006d6e 	.word	0x08006d6e
 80062a8:	00000000 	.word	0x00000000
 80062ac:	08006061 	.word	0x08006061
 80062b0:	08006d6a 	.word	0x08006d6a

080062b4 <sbrk_aligned>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4e0f      	ldr	r6, [pc, #60]	@ (80062f4 <sbrk_aligned+0x40>)
 80062b8:	460c      	mov	r4, r1
 80062ba:	6831      	ldr	r1, [r6, #0]
 80062bc:	4605      	mov	r5, r0
 80062be:	b911      	cbnz	r1, 80062c6 <sbrk_aligned+0x12>
 80062c0:	f000 fc4c 	bl	8006b5c <_sbrk_r>
 80062c4:	6030      	str	r0, [r6, #0]
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 fc47 	bl	8006b5c <_sbrk_r>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d103      	bne.n	80062da <sbrk_aligned+0x26>
 80062d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80062d6:	4620      	mov	r0, r4
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	1cc4      	adds	r4, r0, #3
 80062dc:	f024 0403 	bic.w	r4, r4, #3
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d0f8      	beq.n	80062d6 <sbrk_aligned+0x22>
 80062e4:	1a21      	subs	r1, r4, r0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 fc38 	bl	8006b5c <_sbrk_r>
 80062ec:	3001      	adds	r0, #1
 80062ee:	d1f2      	bne.n	80062d6 <sbrk_aligned+0x22>
 80062f0:	e7ef      	b.n	80062d2 <sbrk_aligned+0x1e>
 80062f2:	bf00      	nop
 80062f4:	20040344 	.word	0x20040344

080062f8 <_malloc_r>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	1ccd      	adds	r5, r1, #3
 80062fe:	f025 0503 	bic.w	r5, r5, #3
 8006302:	3508      	adds	r5, #8
 8006304:	2d0c      	cmp	r5, #12
 8006306:	bf38      	it	cc
 8006308:	250c      	movcc	r5, #12
 800630a:	2d00      	cmp	r5, #0
 800630c:	4606      	mov	r6, r0
 800630e:	db01      	blt.n	8006314 <_malloc_r+0x1c>
 8006310:	42a9      	cmp	r1, r5
 8006312:	d904      	bls.n	800631e <_malloc_r+0x26>
 8006314:	230c      	movs	r3, #12
 8006316:	6033      	str	r3, [r6, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f4 <_malloc_r+0xfc>
 8006322:	f000 faa1 	bl	8006868 <__malloc_lock>
 8006326:	f8d8 3000 	ldr.w	r3, [r8]
 800632a:	461c      	mov	r4, r3
 800632c:	bb44      	cbnz	r4, 8006380 <_malloc_r+0x88>
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ffbf 	bl	80062b4 <sbrk_aligned>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	4604      	mov	r4, r0
 800633a:	d158      	bne.n	80063ee <_malloc_r+0xf6>
 800633c:	f8d8 4000 	ldr.w	r4, [r8]
 8006340:	4627      	mov	r7, r4
 8006342:	2f00      	cmp	r7, #0
 8006344:	d143      	bne.n	80063ce <_malloc_r+0xd6>
 8006346:	2c00      	cmp	r4, #0
 8006348:	d04b      	beq.n	80063e2 <_malloc_r+0xea>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	4639      	mov	r1, r7
 800634e:	4630      	mov	r0, r6
 8006350:	eb04 0903 	add.w	r9, r4, r3
 8006354:	f000 fc02 	bl	8006b5c <_sbrk_r>
 8006358:	4581      	cmp	r9, r0
 800635a:	d142      	bne.n	80063e2 <_malloc_r+0xea>
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	1a6d      	subs	r5, r5, r1
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffa6 	bl	80062b4 <sbrk_aligned>
 8006368:	3001      	adds	r0, #1
 800636a:	d03a      	beq.n	80063e2 <_malloc_r+0xea>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	442b      	add	r3, r5
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	bb62      	cbnz	r2, 80063d4 <_malloc_r+0xdc>
 800637a:	f8c8 7000 	str.w	r7, [r8]
 800637e:	e00f      	b.n	80063a0 <_malloc_r+0xa8>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	1b52      	subs	r2, r2, r5
 8006384:	d420      	bmi.n	80063c8 <_malloc_r+0xd0>
 8006386:	2a0b      	cmp	r2, #11
 8006388:	d917      	bls.n	80063ba <_malloc_r+0xc2>
 800638a:	1961      	adds	r1, r4, r5
 800638c:	42a3      	cmp	r3, r4
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	bf18      	it	ne
 8006392:	6059      	strne	r1, [r3, #4]
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	bf08      	it	eq
 8006398:	f8c8 1000 	streq.w	r1, [r8]
 800639c:	5162      	str	r2, [r4, r5]
 800639e:	604b      	str	r3, [r1, #4]
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 fa67 	bl	8006874 <__malloc_unlock>
 80063a6:	f104 000b 	add.w	r0, r4, #11
 80063aa:	1d23      	adds	r3, r4, #4
 80063ac:	f020 0007 	bic.w	r0, r0, #7
 80063b0:	1ac2      	subs	r2, r0, r3
 80063b2:	bf1c      	itt	ne
 80063b4:	1a1b      	subne	r3, r3, r0
 80063b6:	50a3      	strne	r3, [r4, r2]
 80063b8:	e7af      	b.n	800631a <_malloc_r+0x22>
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	bf0c      	ite	eq
 80063c0:	f8c8 2000 	streq.w	r2, [r8]
 80063c4:	605a      	strne	r2, [r3, #4]
 80063c6:	e7eb      	b.n	80063a0 <_malloc_r+0xa8>
 80063c8:	4623      	mov	r3, r4
 80063ca:	6864      	ldr	r4, [r4, #4]
 80063cc:	e7ae      	b.n	800632c <_malloc_r+0x34>
 80063ce:	463c      	mov	r4, r7
 80063d0:	687f      	ldr	r7, [r7, #4]
 80063d2:	e7b6      	b.n	8006342 <_malloc_r+0x4a>
 80063d4:	461a      	mov	r2, r3
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d1fb      	bne.n	80063d4 <_malloc_r+0xdc>
 80063dc:	2300      	movs	r3, #0
 80063de:	6053      	str	r3, [r2, #4]
 80063e0:	e7de      	b.n	80063a0 <_malloc_r+0xa8>
 80063e2:	230c      	movs	r3, #12
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 fa44 	bl	8006874 <__malloc_unlock>
 80063ec:	e794      	b.n	8006318 <_malloc_r+0x20>
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	e7d6      	b.n	80063a0 <_malloc_r+0xa8>
 80063f2:	bf00      	nop
 80063f4:	20040348 	.word	0x20040348

080063f8 <_printf_common>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	4616      	mov	r6, r2
 80063fe:	4698      	mov	r8, r3
 8006400:	688a      	ldr	r2, [r1, #8]
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006408:	4293      	cmp	r3, r2
 800640a:	bfb8      	it	lt
 800640c:	4613      	movlt	r3, r2
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006414:	4607      	mov	r7, r0
 8006416:	460c      	mov	r4, r1
 8006418:	b10a      	cbz	r2, 800641e <_printf_common+0x26>
 800641a:	3301      	adds	r3, #1
 800641c:	6033      	str	r3, [r6, #0]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	0699      	lsls	r1, r3, #26
 8006422:	bf42      	ittt	mi
 8006424:	6833      	ldrmi	r3, [r6, #0]
 8006426:	3302      	addmi	r3, #2
 8006428:	6033      	strmi	r3, [r6, #0]
 800642a:	6825      	ldr	r5, [r4, #0]
 800642c:	f015 0506 	ands.w	r5, r5, #6
 8006430:	d106      	bne.n	8006440 <_printf_common+0x48>
 8006432:	f104 0a19 	add.w	sl, r4, #25
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	6832      	ldr	r2, [r6, #0]
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	42ab      	cmp	r3, r5
 800643e:	dc26      	bgt.n	800648e <_printf_common+0x96>
 8006440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	3b00      	subs	r3, #0
 8006448:	bf18      	it	ne
 800644a:	2301      	movne	r3, #1
 800644c:	0692      	lsls	r2, r2, #26
 800644e:	d42b      	bmi.n	80064a8 <_printf_common+0xb0>
 8006450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006454:	4641      	mov	r1, r8
 8006456:	4638      	mov	r0, r7
 8006458:	47c8      	blx	r9
 800645a:	3001      	adds	r0, #1
 800645c:	d01e      	beq.n	800649c <_printf_common+0xa4>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	f003 0306 	and.w	r3, r3, #6
 8006466:	2b04      	cmp	r3, #4
 8006468:	bf02      	ittt	eq
 800646a:	68e5      	ldreq	r5, [r4, #12]
 800646c:	6833      	ldreq	r3, [r6, #0]
 800646e:	1aed      	subeq	r5, r5, r3
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	bf0c      	ite	eq
 8006474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006478:	2500      	movne	r5, #0
 800647a:	4293      	cmp	r3, r2
 800647c:	bfc4      	itt	gt
 800647e:	1a9b      	subgt	r3, r3, r2
 8006480:	18ed      	addgt	r5, r5, r3
 8006482:	2600      	movs	r6, #0
 8006484:	341a      	adds	r4, #26
 8006486:	42b5      	cmp	r5, r6
 8006488:	d11a      	bne.n	80064c0 <_printf_common+0xc8>
 800648a:	2000      	movs	r0, #0
 800648c:	e008      	b.n	80064a0 <_printf_common+0xa8>
 800648e:	2301      	movs	r3, #1
 8006490:	4652      	mov	r2, sl
 8006492:	4641      	mov	r1, r8
 8006494:	4638      	mov	r0, r7
 8006496:	47c8      	blx	r9
 8006498:	3001      	adds	r0, #1
 800649a:	d103      	bne.n	80064a4 <_printf_common+0xac>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	3501      	adds	r5, #1
 80064a6:	e7c6      	b.n	8006436 <_printf_common+0x3e>
 80064a8:	18e1      	adds	r1, r4, r3
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	2030      	movs	r0, #48	@ 0x30
 80064ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064b2:	4422      	add	r2, r4
 80064b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064bc:	3302      	adds	r3, #2
 80064be:	e7c7      	b.n	8006450 <_printf_common+0x58>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4622      	mov	r2, r4
 80064c4:	4641      	mov	r1, r8
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c8      	blx	r9
 80064ca:	3001      	adds	r0, #1
 80064cc:	d0e6      	beq.n	800649c <_printf_common+0xa4>
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7d9      	b.n	8006486 <_printf_common+0x8e>
	...

080064d4 <_printf_i>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	7e0f      	ldrb	r7, [r1, #24]
 80064da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064dc:	2f78      	cmp	r7, #120	@ 0x78
 80064de:	4691      	mov	r9, r2
 80064e0:	4680      	mov	r8, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	469a      	mov	sl, r3
 80064e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ea:	d807      	bhi.n	80064fc <_printf_i+0x28>
 80064ec:	2f62      	cmp	r7, #98	@ 0x62
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x32>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	f000 80d1 	beq.w	8006698 <_printf_i+0x1c4>
 80064f6:	2f58      	cmp	r7, #88	@ 0x58
 80064f8:	f000 80b8 	beq.w	800666c <_printf_i+0x198>
 80064fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006504:	e03a      	b.n	800657c <_printf_i+0xa8>
 8006506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800650a:	2b15      	cmp	r3, #21
 800650c:	d8f6      	bhi.n	80064fc <_printf_i+0x28>
 800650e:	a101      	add	r1, pc, #4	@ (adr r1, 8006514 <_printf_i+0x40>)
 8006510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	08006581 	.word	0x08006581
 800651c:	080064fd 	.word	0x080064fd
 8006520:	080064fd 	.word	0x080064fd
 8006524:	080064fd 	.word	0x080064fd
 8006528:	080064fd 	.word	0x080064fd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064fd 	.word	0x080064fd
 8006534:	080064fd 	.word	0x080064fd
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	0800667f 	.word	0x0800667f
 8006544:	080065ab 	.word	0x080065ab
 8006548:	08006639 	.word	0x08006639
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	080066a1 	.word	0x080066a1
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080065ab 	.word	0x080065ab
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006641 	.word	0x08006641
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6032      	str	r2, [r6, #0]
 8006574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800657c:	2301      	movs	r3, #1
 800657e:	e09c      	b.n	80066ba <_printf_i+0x1e6>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	0606      	lsls	r6, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xbc>
 800658c:	681d      	ldr	r5, [r3, #0]
 800658e:	e003      	b.n	8006598 <_printf_i+0xc4>
 8006590:	0645      	lsls	r5, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xb8>
 8006594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006598:	2d00      	cmp	r5, #0
 800659a:	da03      	bge.n	80065a4 <_printf_i+0xd0>
 800659c:	232d      	movs	r3, #45	@ 0x2d
 800659e:	426d      	negs	r5, r5
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a4:	4858      	ldr	r0, [pc, #352]	@ (8006708 <_printf_i+0x234>)
 80065a6:	230a      	movs	r3, #10
 80065a8:	e011      	b.n	80065ce <_printf_i+0xfa>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	0608      	lsls	r0, r1, #24
 80065b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0xe8>
 80065b6:	0649      	lsls	r1, r1, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80065be:	4852      	ldr	r0, [pc, #328]	@ (8006708 <_printf_i+0x234>)
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	bf14      	ite	ne
 80065c4:	230a      	movne	r3, #10
 80065c6:	2308      	moveq	r3, #8
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ce:	6866      	ldr	r6, [r4, #4]
 80065d0:	60a6      	str	r6, [r4, #8]
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	db05      	blt.n	80065e2 <_printf_i+0x10e>
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	432e      	orrs	r6, r5
 80065da:	f021 0104 	bic.w	r1, r1, #4
 80065de:	6021      	str	r1, [r4, #0]
 80065e0:	d04b      	beq.n	800667a <_printf_i+0x1a6>
 80065e2:	4616      	mov	r6, r2
 80065e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80065e8:	fb03 5711 	mls	r7, r3, r1, r5
 80065ec:	5dc7      	ldrb	r7, [r0, r7]
 80065ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065f2:	462f      	mov	r7, r5
 80065f4:	42bb      	cmp	r3, r7
 80065f6:	460d      	mov	r5, r1
 80065f8:	d9f4      	bls.n	80065e4 <_printf_i+0x110>
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d10b      	bne.n	8006616 <_printf_i+0x142>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	07df      	lsls	r7, r3, #31
 8006602:	d508      	bpl.n	8006616 <_printf_i+0x142>
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	6861      	ldr	r1, [r4, #4]
 8006608:	4299      	cmp	r1, r3
 800660a:	bfde      	ittt	le
 800660c:	2330      	movle	r3, #48	@ 0x30
 800660e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006612:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006616:	1b92      	subs	r2, r2, r6
 8006618:	6122      	str	r2, [r4, #16]
 800661a:	f8cd a000 	str.w	sl, [sp]
 800661e:	464b      	mov	r3, r9
 8006620:	aa03      	add	r2, sp, #12
 8006622:	4621      	mov	r1, r4
 8006624:	4640      	mov	r0, r8
 8006626:	f7ff fee7 	bl	80063f8 <_printf_common>
 800662a:	3001      	adds	r0, #1
 800662c:	d14a      	bne.n	80066c4 <_printf_i+0x1f0>
 800662e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006632:	b004      	add	sp, #16
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	f043 0320 	orr.w	r3, r3, #32
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	4832      	ldr	r0, [pc, #200]	@ (800670c <_printf_i+0x238>)
 8006642:	2778      	movs	r7, #120	@ 0x78
 8006644:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	6831      	ldr	r1, [r6, #0]
 800664c:	061f      	lsls	r7, r3, #24
 800664e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006652:	d402      	bmi.n	800665a <_printf_i+0x186>
 8006654:	065f      	lsls	r7, r3, #25
 8006656:	bf48      	it	mi
 8006658:	b2ad      	uxthmi	r5, r5
 800665a:	6031      	str	r1, [r6, #0]
 800665c:	07d9      	lsls	r1, r3, #31
 800665e:	bf44      	itt	mi
 8006660:	f043 0320 	orrmi.w	r3, r3, #32
 8006664:	6023      	strmi	r3, [r4, #0]
 8006666:	b11d      	cbz	r5, 8006670 <_printf_i+0x19c>
 8006668:	2310      	movs	r3, #16
 800666a:	e7ad      	b.n	80065c8 <_printf_i+0xf4>
 800666c:	4826      	ldr	r0, [pc, #152]	@ (8006708 <_printf_i+0x234>)
 800666e:	e7e9      	b.n	8006644 <_printf_i+0x170>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	f023 0320 	bic.w	r3, r3, #32
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	e7f6      	b.n	8006668 <_printf_i+0x194>
 800667a:	4616      	mov	r6, r2
 800667c:	e7bd      	b.n	80065fa <_printf_i+0x126>
 800667e:	6833      	ldr	r3, [r6, #0]
 8006680:	6825      	ldr	r5, [r4, #0]
 8006682:	6961      	ldr	r1, [r4, #20]
 8006684:	1d18      	adds	r0, r3, #4
 8006686:	6030      	str	r0, [r6, #0]
 8006688:	062e      	lsls	r6, r5, #24
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	d501      	bpl.n	8006692 <_printf_i+0x1be>
 800668e:	6019      	str	r1, [r3, #0]
 8006690:	e002      	b.n	8006698 <_printf_i+0x1c4>
 8006692:	0668      	lsls	r0, r5, #25
 8006694:	d5fb      	bpl.n	800668e <_printf_i+0x1ba>
 8006696:	8019      	strh	r1, [r3, #0]
 8006698:	2300      	movs	r3, #0
 800669a:	6123      	str	r3, [r4, #16]
 800669c:	4616      	mov	r6, r2
 800669e:	e7bc      	b.n	800661a <_printf_i+0x146>
 80066a0:	6833      	ldr	r3, [r6, #0]
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	6032      	str	r2, [r6, #0]
 80066a6:	681e      	ldr	r6, [r3, #0]
 80066a8:	6862      	ldr	r2, [r4, #4]
 80066aa:	2100      	movs	r1, #0
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7f9 fda7 	bl	8000200 <memchr>
 80066b2:	b108      	cbz	r0, 80066b8 <_printf_i+0x1e4>
 80066b4:	1b80      	subs	r0, r0, r6
 80066b6:	6060      	str	r0, [r4, #4]
 80066b8:	6863      	ldr	r3, [r4, #4]
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	2300      	movs	r3, #0
 80066be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c2:	e7aa      	b.n	800661a <_printf_i+0x146>
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	4632      	mov	r2, r6
 80066c8:	4649      	mov	r1, r9
 80066ca:	4640      	mov	r0, r8
 80066cc:	47d0      	blx	sl
 80066ce:	3001      	adds	r0, #1
 80066d0:	d0ad      	beq.n	800662e <_printf_i+0x15a>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	079b      	lsls	r3, r3, #30
 80066d6:	d413      	bmi.n	8006700 <_printf_i+0x22c>
 80066d8:	68e0      	ldr	r0, [r4, #12]
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	4298      	cmp	r0, r3
 80066de:	bfb8      	it	lt
 80066e0:	4618      	movlt	r0, r3
 80066e2:	e7a6      	b.n	8006632 <_printf_i+0x15e>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4632      	mov	r2, r6
 80066e8:	4649      	mov	r1, r9
 80066ea:	4640      	mov	r0, r8
 80066ec:	47d0      	blx	sl
 80066ee:	3001      	adds	r0, #1
 80066f0:	d09d      	beq.n	800662e <_printf_i+0x15a>
 80066f2:	3501      	adds	r5, #1
 80066f4:	68e3      	ldr	r3, [r4, #12]
 80066f6:	9903      	ldr	r1, [sp, #12]
 80066f8:	1a5b      	subs	r3, r3, r1
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	dcf2      	bgt.n	80066e4 <_printf_i+0x210>
 80066fe:	e7eb      	b.n	80066d8 <_printf_i+0x204>
 8006700:	2500      	movs	r5, #0
 8006702:	f104 0619 	add.w	r6, r4, #25
 8006706:	e7f5      	b.n	80066f4 <_printf_i+0x220>
 8006708:	08006d75 	.word	0x08006d75
 800670c:	08006d86 	.word	0x08006d86

08006710 <__sflush_r>:
 8006710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	0716      	lsls	r6, r2, #28
 800671a:	4605      	mov	r5, r0
 800671c:	460c      	mov	r4, r1
 800671e:	d454      	bmi.n	80067ca <__sflush_r+0xba>
 8006720:	684b      	ldr	r3, [r1, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc02      	bgt.n	800672c <__sflush_r+0x1c>
 8006726:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	dd48      	ble.n	80067be <__sflush_r+0xae>
 800672c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800672e:	2e00      	cmp	r6, #0
 8006730:	d045      	beq.n	80067be <__sflush_r+0xae>
 8006732:	2300      	movs	r3, #0
 8006734:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006738:	682f      	ldr	r7, [r5, #0]
 800673a:	6a21      	ldr	r1, [r4, #32]
 800673c:	602b      	str	r3, [r5, #0]
 800673e:	d030      	beq.n	80067a2 <__sflush_r+0x92>
 8006740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0759      	lsls	r1, r3, #29
 8006746:	d505      	bpl.n	8006754 <__sflush_r+0x44>
 8006748:	6863      	ldr	r3, [r4, #4]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800674e:	b10b      	cbz	r3, 8006754 <__sflush_r+0x44>
 8006750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006758:	6a21      	ldr	r1, [r4, #32]
 800675a:	4628      	mov	r0, r5
 800675c:	47b0      	blx	r6
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	d106      	bne.n	8006772 <__sflush_r+0x62>
 8006764:	6829      	ldr	r1, [r5, #0]
 8006766:	291d      	cmp	r1, #29
 8006768:	d82b      	bhi.n	80067c2 <__sflush_r+0xb2>
 800676a:	4a2a      	ldr	r2, [pc, #168]	@ (8006814 <__sflush_r+0x104>)
 800676c:	40ca      	lsrs	r2, r1
 800676e:	07d6      	lsls	r6, r2, #31
 8006770:	d527      	bpl.n	80067c2 <__sflush_r+0xb2>
 8006772:	2200      	movs	r2, #0
 8006774:	6062      	str	r2, [r4, #4]
 8006776:	04d9      	lsls	r1, r3, #19
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	d504      	bpl.n	8006788 <__sflush_r+0x78>
 800677e:	1c42      	adds	r2, r0, #1
 8006780:	d101      	bne.n	8006786 <__sflush_r+0x76>
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	b903      	cbnz	r3, 8006788 <__sflush_r+0x78>
 8006786:	6560      	str	r0, [r4, #84]	@ 0x54
 8006788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800678a:	602f      	str	r7, [r5, #0]
 800678c:	b1b9      	cbz	r1, 80067be <__sflush_r+0xae>
 800678e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006792:	4299      	cmp	r1, r3
 8006794:	d002      	beq.n	800679c <__sflush_r+0x8c>
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fa24 	bl	8006be4 <_free_r>
 800679c:	2300      	movs	r3, #0
 800679e:	6363      	str	r3, [r4, #52]	@ 0x34
 80067a0:	e00d      	b.n	80067be <__sflush_r+0xae>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b0      	blx	r6
 80067a8:	4602      	mov	r2, r0
 80067aa:	1c50      	adds	r0, r2, #1
 80067ac:	d1c9      	bne.n	8006742 <__sflush_r+0x32>
 80067ae:	682b      	ldr	r3, [r5, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0c6      	beq.n	8006742 <__sflush_r+0x32>
 80067b4:	2b1d      	cmp	r3, #29
 80067b6:	d001      	beq.n	80067bc <__sflush_r+0xac>
 80067b8:	2b16      	cmp	r3, #22
 80067ba:	d11e      	bne.n	80067fa <__sflush_r+0xea>
 80067bc:	602f      	str	r7, [r5, #0]
 80067be:	2000      	movs	r0, #0
 80067c0:	e022      	b.n	8006808 <__sflush_r+0xf8>
 80067c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c6:	b21b      	sxth	r3, r3
 80067c8:	e01b      	b.n	8006802 <__sflush_r+0xf2>
 80067ca:	690f      	ldr	r7, [r1, #16]
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	d0f6      	beq.n	80067be <__sflush_r+0xae>
 80067d0:	0793      	lsls	r3, r2, #30
 80067d2:	680e      	ldr	r6, [r1, #0]
 80067d4:	bf08      	it	eq
 80067d6:	694b      	ldreq	r3, [r1, #20]
 80067d8:	600f      	str	r7, [r1, #0]
 80067da:	bf18      	it	ne
 80067dc:	2300      	movne	r3, #0
 80067de:	eba6 0807 	sub.w	r8, r6, r7
 80067e2:	608b      	str	r3, [r1, #8]
 80067e4:	f1b8 0f00 	cmp.w	r8, #0
 80067e8:	dde9      	ble.n	80067be <__sflush_r+0xae>
 80067ea:	6a21      	ldr	r1, [r4, #32]
 80067ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067ee:	4643      	mov	r3, r8
 80067f0:	463a      	mov	r2, r7
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b0      	blx	r6
 80067f6:	2800      	cmp	r0, #0
 80067f8:	dc08      	bgt.n	800680c <__sflush_r+0xfc>
 80067fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680c:	4407      	add	r7, r0
 800680e:	eba8 0800 	sub.w	r8, r8, r0
 8006812:	e7e7      	b.n	80067e4 <__sflush_r+0xd4>
 8006814:	20400001 	.word	0x20400001

08006818 <_fflush_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	690b      	ldr	r3, [r1, #16]
 800681c:	4605      	mov	r5, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b913      	cbnz	r3, 8006828 <_fflush_r+0x10>
 8006822:	2500      	movs	r5, #0
 8006824:	4628      	mov	r0, r5
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	b118      	cbz	r0, 8006832 <_fflush_r+0x1a>
 800682a:	6a03      	ldr	r3, [r0, #32]
 800682c:	b90b      	cbnz	r3, 8006832 <_fflush_r+0x1a>
 800682e:	f7ff fb83 	bl	8005f38 <__sinit>
 8006832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f3      	beq.n	8006822 <_fflush_r+0xa>
 800683a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800683c:	07d0      	lsls	r0, r2, #31
 800683e:	d404      	bmi.n	800684a <_fflush_r+0x32>
 8006840:	0599      	lsls	r1, r3, #22
 8006842:	d402      	bmi.n	800684a <_fflush_r+0x32>
 8006844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006846:	f7ff fbf2 	bl	800602e <__retarget_lock_acquire_recursive>
 800684a:	4628      	mov	r0, r5
 800684c:	4621      	mov	r1, r4
 800684e:	f7ff ff5f 	bl	8006710 <__sflush_r>
 8006852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006854:	07da      	lsls	r2, r3, #31
 8006856:	4605      	mov	r5, r0
 8006858:	d4e4      	bmi.n	8006824 <_fflush_r+0xc>
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	059b      	lsls	r3, r3, #22
 800685e:	d4e1      	bmi.n	8006824 <_fflush_r+0xc>
 8006860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006862:	f7ff fbe5 	bl	8006030 <__retarget_lock_release_recursive>
 8006866:	e7dd      	b.n	8006824 <_fflush_r+0xc>

08006868 <__malloc_lock>:
 8006868:	4801      	ldr	r0, [pc, #4]	@ (8006870 <__malloc_lock+0x8>)
 800686a:	f7ff bbe0 	b.w	800602e <__retarget_lock_acquire_recursive>
 800686e:	bf00      	nop
 8006870:	20040340 	.word	0x20040340

08006874 <__malloc_unlock>:
 8006874:	4801      	ldr	r0, [pc, #4]	@ (800687c <__malloc_unlock+0x8>)
 8006876:	f7ff bbdb 	b.w	8006030 <__retarget_lock_release_recursive>
 800687a:	bf00      	nop
 800687c:	20040340 	.word	0x20040340

08006880 <__sread>:
 8006880:	b510      	push	{r4, lr}
 8006882:	460c      	mov	r4, r1
 8006884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006888:	f000 f956 	bl	8006b38 <_read_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	bfab      	itete	ge
 8006890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006892:	89a3      	ldrhlt	r3, [r4, #12]
 8006894:	181b      	addge	r3, r3, r0
 8006896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800689a:	bfac      	ite	ge
 800689c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800689e:	81a3      	strhlt	r3, [r4, #12]
 80068a0:	bd10      	pop	{r4, pc}

080068a2 <__swrite>:
 80068a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a6:	461f      	mov	r7, r3
 80068a8:	898b      	ldrh	r3, [r1, #12]
 80068aa:	05db      	lsls	r3, r3, #23
 80068ac:	4605      	mov	r5, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	4616      	mov	r6, r2
 80068b2:	d505      	bpl.n	80068c0 <__swrite+0x1e>
 80068b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b8:	2302      	movs	r3, #2
 80068ba:	2200      	movs	r2, #0
 80068bc:	f000 f92a 	bl	8006b14 <_lseek_r>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	4632      	mov	r2, r6
 80068ce:	463b      	mov	r3, r7
 80068d0:	4628      	mov	r0, r5
 80068d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d6:	f000 b951 	b.w	8006b7c <_write_r>

080068da <__sseek>:
 80068da:	b510      	push	{r4, lr}
 80068dc:	460c      	mov	r4, r1
 80068de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e2:	f000 f917 	bl	8006b14 <_lseek_r>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	bf15      	itete	ne
 80068ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068f6:	81a3      	strheq	r3, [r4, #12]
 80068f8:	bf18      	it	ne
 80068fa:	81a3      	strhne	r3, [r4, #12]
 80068fc:	bd10      	pop	{r4, pc}

080068fe <__sclose>:
 80068fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006902:	f000 b94d 	b.w	8006ba0 <_close_r>

08006906 <__swbuf_r>:
 8006906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006908:	460e      	mov	r6, r1
 800690a:	4614      	mov	r4, r2
 800690c:	4605      	mov	r5, r0
 800690e:	b118      	cbz	r0, 8006918 <__swbuf_r+0x12>
 8006910:	6a03      	ldr	r3, [r0, #32]
 8006912:	b90b      	cbnz	r3, 8006918 <__swbuf_r+0x12>
 8006914:	f7ff fb10 	bl	8005f38 <__sinit>
 8006918:	69a3      	ldr	r3, [r4, #24]
 800691a:	60a3      	str	r3, [r4, #8]
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	071a      	lsls	r2, r3, #28
 8006920:	d501      	bpl.n	8006926 <__swbuf_r+0x20>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	b943      	cbnz	r3, 8006938 <__swbuf_r+0x32>
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f82b 	bl	8006984 <__swsetup_r>
 800692e:	b118      	cbz	r0, 8006938 <__swbuf_r+0x32>
 8006930:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006934:	4638      	mov	r0, r7
 8006936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	6922      	ldr	r2, [r4, #16]
 800693c:	1a98      	subs	r0, r3, r2
 800693e:	6963      	ldr	r3, [r4, #20]
 8006940:	b2f6      	uxtb	r6, r6
 8006942:	4283      	cmp	r3, r0
 8006944:	4637      	mov	r7, r6
 8006946:	dc05      	bgt.n	8006954 <__swbuf_r+0x4e>
 8006948:	4621      	mov	r1, r4
 800694a:	4628      	mov	r0, r5
 800694c:	f7ff ff64 	bl	8006818 <_fflush_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	d1ed      	bne.n	8006930 <__swbuf_r+0x2a>
 8006954:	68a3      	ldr	r3, [r4, #8]
 8006956:	3b01      	subs	r3, #1
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	6022      	str	r2, [r4, #0]
 8006960:	701e      	strb	r6, [r3, #0]
 8006962:	6962      	ldr	r2, [r4, #20]
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	429a      	cmp	r2, r3
 8006968:	d004      	beq.n	8006974 <__swbuf_r+0x6e>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	07db      	lsls	r3, r3, #31
 800696e:	d5e1      	bpl.n	8006934 <__swbuf_r+0x2e>
 8006970:	2e0a      	cmp	r6, #10
 8006972:	d1df      	bne.n	8006934 <__swbuf_r+0x2e>
 8006974:	4621      	mov	r1, r4
 8006976:	4628      	mov	r0, r5
 8006978:	f7ff ff4e 	bl	8006818 <_fflush_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	d0d9      	beq.n	8006934 <__swbuf_r+0x2e>
 8006980:	e7d6      	b.n	8006930 <__swbuf_r+0x2a>
	...

08006984 <__swsetup_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4b29      	ldr	r3, [pc, #164]	@ (8006a2c <__swsetup_r+0xa8>)
 8006988:	4605      	mov	r5, r0
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	460c      	mov	r4, r1
 800698e:	b118      	cbz	r0, 8006998 <__swsetup_r+0x14>
 8006990:	6a03      	ldr	r3, [r0, #32]
 8006992:	b90b      	cbnz	r3, 8006998 <__swsetup_r+0x14>
 8006994:	f7ff fad0 	bl	8005f38 <__sinit>
 8006998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699c:	0719      	lsls	r1, r3, #28
 800699e:	d422      	bmi.n	80069e6 <__swsetup_r+0x62>
 80069a0:	06da      	lsls	r2, r3, #27
 80069a2:	d407      	bmi.n	80069b4 <__swsetup_r+0x30>
 80069a4:	2209      	movs	r2, #9
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ac:	81a3      	strh	r3, [r4, #12]
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069b2:	e033      	b.n	8006a1c <__swsetup_r+0x98>
 80069b4:	0758      	lsls	r0, r3, #29
 80069b6:	d512      	bpl.n	80069de <__swsetup_r+0x5a>
 80069b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069ba:	b141      	cbz	r1, 80069ce <__swsetup_r+0x4a>
 80069bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069c0:	4299      	cmp	r1, r3
 80069c2:	d002      	beq.n	80069ca <__swsetup_r+0x46>
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 f90d 	bl	8006be4 <_free_r>
 80069ca:	2300      	movs	r3, #0
 80069cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	2300      	movs	r3, #0
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	f043 0308 	orr.w	r3, r3, #8
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	b94b      	cbnz	r3, 80069fe <__swsetup_r+0x7a>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f4:	d003      	beq.n	80069fe <__swsetup_r+0x7a>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f83f 	bl	8006a7c <__smakebuf_r>
 80069fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a02:	f013 0201 	ands.w	r2, r3, #1
 8006a06:	d00a      	beq.n	8006a1e <__swsetup_r+0x9a>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	60a2      	str	r2, [r4, #8]
 8006a0c:	6962      	ldr	r2, [r4, #20]
 8006a0e:	4252      	negs	r2, r2
 8006a10:	61a2      	str	r2, [r4, #24]
 8006a12:	6922      	ldr	r2, [r4, #16]
 8006a14:	b942      	cbnz	r2, 8006a28 <__swsetup_r+0xa4>
 8006a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a1a:	d1c5      	bne.n	80069a8 <__swsetup_r+0x24>
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	0799      	lsls	r1, r3, #30
 8006a20:	bf58      	it	pl
 8006a22:	6962      	ldrpl	r2, [r4, #20]
 8006a24:	60a2      	str	r2, [r4, #8]
 8006a26:	e7f4      	b.n	8006a12 <__swsetup_r+0x8e>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7f7      	b.n	8006a1c <__swsetup_r+0x98>
 8006a2c:	20040018 	.word	0x20040018

08006a30 <__swhatbuf_r>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	b096      	sub	sp, #88	@ 0x58
 8006a3c:	4615      	mov	r5, r2
 8006a3e:	461e      	mov	r6, r3
 8006a40:	da0d      	bge.n	8006a5e <__swhatbuf_r+0x2e>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	bf14      	ite	ne
 8006a4e:	2340      	movne	r3, #64	@ 0x40
 8006a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a54:	2000      	movs	r0, #0
 8006a56:	6031      	str	r1, [r6, #0]
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	b016      	add	sp, #88	@ 0x58
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f000 f8ae 	bl	8006bc0 <_fstat_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	dbec      	blt.n	8006a42 <__swhatbuf_r+0x12>
 8006a68:	9901      	ldr	r1, [sp, #4]
 8006a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a72:	4259      	negs	r1, r3
 8006a74:	4159      	adcs	r1, r3
 8006a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a7a:	e7eb      	b.n	8006a54 <__swhatbuf_r+0x24>

08006a7c <__smakebuf_r>:
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a80:	079d      	lsls	r5, r3, #30
 8006a82:	4606      	mov	r6, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	d507      	bpl.n	8006a98 <__smakebuf_r+0x1c>
 8006a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	2301      	movs	r3, #1
 8006a92:	6163      	str	r3, [r4, #20]
 8006a94:	b003      	add	sp, #12
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a98:	ab01      	add	r3, sp, #4
 8006a9a:	466a      	mov	r2, sp
 8006a9c:	f7ff ffc8 	bl	8006a30 <__swhatbuf_r>
 8006aa0:	9f00      	ldr	r7, [sp, #0]
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff fc26 	bl	80062f8 <_malloc_r>
 8006aac:	b948      	cbnz	r0, 8006ac2 <__smakebuf_r+0x46>
 8006aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab2:	059a      	lsls	r2, r3, #22
 8006ab4:	d4ee      	bmi.n	8006a94 <__smakebuf_r+0x18>
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	f043 0302 	orr.w	r3, r3, #2
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	e7e2      	b.n	8006a88 <__smakebuf_r+0xc>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	6020      	str	r0, [r4, #0]
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ad2:	b15b      	cbz	r3, 8006aec <__smakebuf_r+0x70>
 8006ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f000 f80b 	bl	8006af4 <_isatty_r>
 8006ade:	b128      	cbz	r0, 8006aec <__smakebuf_r+0x70>
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	431d      	orrs	r5, r3
 8006af0:	81a5      	strh	r5, [r4, #12]
 8006af2:	e7cf      	b.n	8006a94 <__smakebuf_r+0x18>

08006af4 <_isatty_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d06      	ldr	r5, [pc, #24]	@ (8006b10 <_isatty_r+0x1c>)
 8006af8:	2300      	movs	r3, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	f7fa fb63 	bl	80011ca <_isatty>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_isatty_r+0x1a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_isatty_r+0x1a>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	2004034c 	.word	0x2004034c

08006b14 <_lseek_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	@ (8006b34 <_lseek_r+0x20>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f7fa fb5c 	bl	80011e0 <_lseek>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_lseek_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_lseek_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	2004034c 	.word	0x2004034c

08006b38 <_read_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	@ (8006b58 <_read_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fa faea 	bl	8001120 <_read>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_read_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_read_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	2004034c 	.word	0x2004034c

08006b5c <_sbrk_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d06      	ldr	r5, [pc, #24]	@ (8006b78 <_sbrk_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fa fb48 	bl	80011fc <_sbrk>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_sbrk_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_sbrk_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	2004034c 	.word	0x2004034c

08006b7c <_write_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d07      	ldr	r5, [pc, #28]	@ (8006b9c <_write_r+0x20>)
 8006b80:	4604      	mov	r4, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fa fae5 	bl	800115a <_write>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_write_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_write_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	2004034c 	.word	0x2004034c

08006ba0 <_close_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d06      	ldr	r5, [pc, #24]	@ (8006bbc <_close_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f7fa faf1 	bl	8001192 <_close>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_close_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_close_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	2004034c 	.word	0x2004034c

08006bc0 <_fstat_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	@ (8006be0 <_fstat_r+0x20>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	f7fa faec 	bl	80011aa <_fstat>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d102      	bne.n	8006bdc <_fstat_r+0x1c>
 8006bd6:	682b      	ldr	r3, [r5, #0]
 8006bd8:	b103      	cbz	r3, 8006bdc <_fstat_r+0x1c>
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	2004034c 	.word	0x2004034c

08006be4 <_free_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4605      	mov	r5, r0
 8006be8:	2900      	cmp	r1, #0
 8006bea:	d041      	beq.n	8006c70 <_free_r+0x8c>
 8006bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf0:	1f0c      	subs	r4, r1, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfb8      	it	lt
 8006bf6:	18e4      	addlt	r4, r4, r3
 8006bf8:	f7ff fe36 	bl	8006868 <__malloc_lock>
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c74 <_free_r+0x90>)
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	b933      	cbnz	r3, 8006c10 <_free_r+0x2c>
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	6014      	str	r4, [r2, #0]
 8006c06:	4628      	mov	r0, r5
 8006c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0c:	f7ff be32 	b.w	8006874 <__malloc_unlock>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d908      	bls.n	8006c26 <_free_r+0x42>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	1821      	adds	r1, r4, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf01      	itttt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	1809      	addeq	r1, r1, r0
 8006c22:	6021      	streq	r1, [r4, #0]
 8006c24:	e7ed      	b.n	8006c02 <_free_r+0x1e>
 8006c26:	461a      	mov	r2, r3
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b10b      	cbz	r3, 8006c30 <_free_r+0x4c>
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d9fa      	bls.n	8006c26 <_free_r+0x42>
 8006c30:	6811      	ldr	r1, [r2, #0]
 8006c32:	1850      	adds	r0, r2, r1
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d10b      	bne.n	8006c50 <_free_r+0x6c>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	4401      	add	r1, r0
 8006c3c:	1850      	adds	r0, r2, r1
 8006c3e:	4283      	cmp	r3, r0
 8006c40:	6011      	str	r1, [r2, #0]
 8006c42:	d1e0      	bne.n	8006c06 <_free_r+0x22>
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	6053      	str	r3, [r2, #4]
 8006c4a:	4408      	add	r0, r1
 8006c4c:	6010      	str	r0, [r2, #0]
 8006c4e:	e7da      	b.n	8006c06 <_free_r+0x22>
 8006c50:	d902      	bls.n	8006c58 <_free_r+0x74>
 8006c52:	230c      	movs	r3, #12
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	e7d6      	b.n	8006c06 <_free_r+0x22>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	1821      	adds	r1, r4, r0
 8006c5c:	428b      	cmp	r3, r1
 8006c5e:	bf04      	itt	eq
 8006c60:	6819      	ldreq	r1, [r3, #0]
 8006c62:	685b      	ldreq	r3, [r3, #4]
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	bf04      	itt	eq
 8006c68:	1809      	addeq	r1, r1, r0
 8006c6a:	6021      	streq	r1, [r4, #0]
 8006c6c:	6054      	str	r4, [r2, #4]
 8006c6e:	e7ca      	b.n	8006c06 <_free_r+0x22>
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	20040348 	.word	0x20040348

08006c78 <_init>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr

08006c84 <_fini>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr
